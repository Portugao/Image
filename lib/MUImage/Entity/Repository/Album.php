<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query;
use Doctrine\ORM\QueryBuilder;

use DoctrineExtensions\Paginate\Paginate;

/**
 * Repository class used to implement own convenience methods for performing certain DQL queries.
 *
 * This is the concrete repository class for album entities.
 */
class MUImage_Entity_Repository_Album extends MUImage_Entity_Repository_Base_Album
{
    /**
     * Returns an array of additional template variables which are specific to the object type treated by this repository.
     *
     * @param string $context Usage context (allowed values: controllerAction, api, actionHandler, block, contentType).
     * @param array  $args    Additional arguments.
     *
     * @return array List of template variables to be assigned.
     */
    public function getAdditionalTemplateParameters($context = '', $args = array())
    {
        if (!in_array($context, array('controllerAction', 'api', 'actionHandler', 'block', 'contentType'))) {
            $context = 'controllerAction';
        }

        $templateParameters = array();

        if ($context == 'controllerAction') {
            if (!isset($args['action'])) {
                $args['action'] = FormUtil::getPassedValue('func', 'main', 'GETPOST');
            }
            if (in_array($args['action'], array('main', 'view'))) {
                $templateParameters = $this->getViewQuickNavParameters($context, $args);
                $listHelper = new MUImage_Util_ListEntries(ServiceUtil::getManager());
                $templateParameters['workflowStateItems'] = $listHelper->getEntries('album', 'workflowState');
                $templateParameters['albumAccessItems'] = $listHelper->getEntries('album', 'albumAccess');
                $booleanSelectorItems = array(
                        array('value' => 'no', 'text' => __('No')),
                        array('value' => 'yes', 'text' => __('Yes'))
                );
                $templateParameters['notInFrontendItems'] = $booleanSelectorItems;
            }

            // initialise Imagine preset instances
            $imageHelper = new MUImage_Util_Image(ServiceUtil::getManager());
            if (in_array($args['action'], array('display', 'view'))) {
                // use separate preset for images in related items
                $templateParameters['relationThumbPreset'] = $imageHelper->getCustomPreset('', '', 'MUImage_displaycontainer', $context, $args);
            }
        }

        // in the concrete child class you could do something like
        // $parameters = parent::getAdditionalTemplateParameters($context, $args);
        // $parameters['myvar'] = 'myvalue';
        // return $parameters;

        return $templateParameters;
    }

    /**
     * Adds default filters as where clauses.
     *
     * @param Doctrine\ORM\QueryBuilder $qb         Query builder to be enhanced.
     * @param array                     $parameters List of determined filter options.
     *
     * @return Doctrine\ORM\QueryBuilder Enriched query builder instance.
     */
    protected function applyDefaultFilters(QueryBuilder $qb, $parameters = array())
    {
        $currentModule = ModUtil::getName();//FormUtil::getPassedValue('module', '', 'GETPOST');
        $currentType = FormUtil::getPassedValue('type', 'user', 'GETPOST');
        if ($currentType == 'admin' && ($currentModule == 'MUImage' || $currentModule == 'Extensions')) {
            return $qb;
        }

        if (!in_array('workflowState', array_keys($parameters)) || empty($parameters['workflowState'])) {
            // per default we show approved albums only
            $onlineStates = array('approved');
            $qb->andWhere('tbl.workflowState IN (:onlineStates)')
            ->setParameter('onlineStates', $onlineStates);
        }

        return $qb;
    }

    /**
     * Builds a generic Doctrine query supporting WHERE and ORDER BY.
     *
     * @param string  $where    The where clause to use when retrieving the collection (optional) (default='').
     * @param string  $orderBy  The order-by clause to use when retrieving the collection (optional) (default='').
     * @param boolean $useJoins Whether to include joining related objects (optional) (default=true).
     * @param boolean $slimMode If activated only some basic fields are selected without using any joins (optional) (default=false).
     *
     * @return Doctrine\ORM\QueryBuilder query builder instance to be further processed
     */
    public function genericBaseQuery($where = '', $orderBy = '', $useJoins = true, $slimMode = false)
    {
        // normally we select the whole table
        $selection = 'tbl';

        if ($slimMode === true) {
            // but for the slim version we select only the basic fields, and no joins

            $selection = 'tbl.id';


            $selection .= ', tbl.title';
            $useJoins = false;
        }

        if ($useJoins === true) {
            $selection .= $this->addJoinsToSelection();
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select($selection)
        ->from('MUImage_Entity_Album', 'tbl');

        if ($useJoins === true) {
            $this->addJoinsToFrom($qb);
        }

        $request = new Zikula_Request_Http();
        $type = $request->query->filter('type', 'user', FILTER_SANITIZE_STRING);
        $func = $request->query->filter('func', 'main', FILTER_SANITIZE_STRING);

        if ($type == 'user' && $func = 'view') {
           /* if (UserUtil::isLoggedIn() == true) {
                if ($where != '') {
                    $where .= ' AND ';
                    $where .= 'tbl.albumAccess = all';
                } else {
                    $where = 'tbl.albumAccess = all';
                }
                $where .= ' AND ';
                $where .= '(tblChildren is NULL OR tblChildren.albumAccess = all)';
            }*/
            if ($where != '') {
                $where .= ' AND ';
                $where .= 'tbl.notInFrontend = 0';
            } else {
                $where = 'tbl.notInFrontend = 0';
            }
            if ($where != '') {
                $where .= ' AND ';
                $where .= '(tblChildren is NULL OR tblChildren.notInFrontend = 0)';
            } else {
                $where = '(tblChildren is NULL OR tblChildren.notInFrontend = 0)';
            }
        }
        /*if (UserUtil::isLoggedIn() == true) {
         $qb->where(' AND tblChildren is NULL OR tblChildren.albumAccess = all');
        }*/

        $this->genericBaseQueryAddWhere($qb, $where);
        $this->genericBaseQueryAddOrderBy($qb, $orderBy);

        return $qb;
    }
}
