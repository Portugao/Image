<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

/**
 * Controller for external calls implementation class.
 */
class MUImage_Controller_External extends MUImage_Controller_Base_External
{
    /**
     * Popup selector for Scribite plugins.
     * Finds items of a certain object type.
     *
     * @param string $objectType The object type.
     * @param string $editor     Name of used Scribite editor.
     * @param string $sort       Sorting field.
     * @param string $sortdir    Sorting direction.
     * @param int    $pos        Current pager position.
     * @param int    $num        Amount of entries to display.
     *
     * @return output The external item finder page
     */
    public function finder()
    {
        PageUtil::addVar('stylesheet', ThemeUtil::getModuleStylesheet('MUImage'));

        $getData = $this->request->query;
        $controllerHelper = new MUImage_Util_Controller($this->serviceManager);

        $objectType = $getData->filter('objectType', 'album', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'external', 'action' => 'finder');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }

        if ($objectType == 'picture') {
            $album = $getData->filter('album', 0, FILTER_SANITIZE_NUMBER_INT);
        }

        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUImage:' . ucfirst($objectType) . ':', '::', ACCESS_COMMENT), LogUtil::getErrorMsgPermission());

        $entityClass = 'MUImage_Entity_' . ucfirst($objectType);
        $repository = $this->entityManager->getRepository($entityClass);
        $repository->setControllerArguments(array());

        $editor = $getData->filter('editor', '', FILTER_SANITIZE_STRING);
        if (empty($editor) || !in_array($editor, array('xinha', 'tinymce', 'ckeditor'))) {
            return $this->__('Error: Invalid editor context given for external controller action.');
        }

        // fetch selected categories to reselect them in the output
        // the actual filtering is done inside the repository class
        $categoryIds = ModUtil::apiFunc('MUImage', 'category', 'retrieveCategoriesFromRequest', array('ot' => $objectType, 'source' => 'GET'));
        $sort = $getData->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }

        $sortdir = $getData->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sortdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }

        $sortParam = $sort . ' ' . $sdir;

        // the current offset which is used to calculate the pagination
        $currentPage = (int) $getData->filter('pos', 1, FILTER_VALIDATE_INT);

        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) $getData->filter('num', 0, FILTER_VALIDATE_INT);
        if ($resultsPerPage == 0) {
            $resultsPerPage = $this->getVar('pageSize', 20);
        }
        if ($objectType == 'album') {
            $where = '';
            list($entities, $objectCount) = $repository->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);

            foreach ($entities as $k => $entity) {
                $entity->initWorkflow();
            }
        }

        if ($objectType == 'picture') {
            $albumRepository = MUImage_Util_Model::getAlbumRepository();
            $where = '';
            $albums = $albumRepository->selectWhere($where);
            
            if ($album != 0) {
                $where2 = 'tbl.album = \'' . DataUtil::formatForStore($album) . '\'';
                list($entities, $objectCount) = $repository->selectWherePaginated($where2, $sortParam, $currentPage, $resultsPerPage);

                foreach ($entities as $k => $entity) {
                    $entity->initWorkflow();
                }
            } else {
                $entities = null;
            }
        }

        $view = Zikula_View::getInstance('MUImage', false);
        
        if ($albums) {
            $view->assign('albums', $albums);
        }

        $view->assign('editorName', $editor)
        ->assign('objectType', $objectType)
        ->assign('items', $entities)
        ->assign('sort', $sort)
        ->assign('sortdir', $sdir)
        ->assign('currentPage', $currentPage)
        ->assign('album', $album)
        ->assign('pager', array('numitems'     => $objectCount,
                'itemsperpage' => $resultsPerPage));

        // assign category properties
        $properties = null;
        if (in_array($objectType, $this->categorisableObjectTypes)) {
            $properties = ModUtil::apiFunc('MUImage', 'category', 'getAllProperties', array('ot' => $objectType));
        }
        $view->assign('properties', $properties)
        ->assign('catIds', $categoryIds);

        return $view->display('external/' . $objectType . '/find.tpl');
    }
}
