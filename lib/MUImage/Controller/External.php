<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu Feb 23 22:43:24 CET 2012.
 */

/**
 * This is the Admin controller class providing navigation and interaction functionality.
 */
class MUImage_Controller_External extends MUImage_Controller_Base_External
{
    /**
* Popup selector for scribite plugins.
* Finds items of a certain object type.
*
* @param array $args List of arguments.
*
* @return output The external item finder page
*/
    public function finder($args)
    {
        PageUtil::addVar('stylesheet', ThemeUtil::getModuleStylesheet('MUImage'));
    
        $getData = $this->request->query;
        $controllerHelper = new MUImage_Util_Controller($this->serviceManager);
    
        $objectType = isset($args['objectType']) ? $args['objectType'] : $getData->filter('objectType', 'picture', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'external', 'action' => 'finder');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }
    
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUImage:' . ucwords($objectType) . ':', '::', ACCESS_COMMENT), LogUtil::getErrorMsgPermission());
    
        $repository = $this->entityManager->getRepository('MUImage_Entity_' . ucfirst($objectType));
    
        $editor = (isset($args['editor']) && !empty($args['editor'])) ? $args['editor'] : $getData->filter('editor', '', FILTER_SANITIZE_STRING);
        if (empty($editor) || !in_array($editor, array('xinha', 'tinymce', 'ckeditor'))) {
            return 'Error: Invalid editor context given for external controller action.';
        }
    
        // fetch selected categories to reselect them in the output
        // the actual filtering is done inside the repository class
        $categoryIds = ModUtil::apiFunc('MUImage', 'category', 'retrieveCategoriesFromRequest', array('ot' => $objectType, 'source' => 'GET'));
        $sort = (isset($args['sort']) && !empty($args['sort'])) ? $args['sort'] : $getData->filter('sort', '', FILTER_SANITIZE_STRING);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
    
        $sdir = (isset($args['sortdir']) && !empty($args['sortdir'])) ? $args['sortdir'] : $getData->filter('sortdir', '', FILTER_SANITIZE_STRING);
        $sdir = strtolower($sdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
    
        $sortParam = $sort . ' ' . $sdir;
    
        // the current offset which is used to calculate the pagination
        $currentPage = (int) (isset($args['pos']) && !empty($args['pos'])) ? $args['pos'] : $getData->filter('pos', 1, FILTER_VALIDATE_INT);
    
        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) (isset($args['num']) && !empty($args['num'])) ? $args['num'] : $getData->filter('num', 0, FILTER_VALIDATE_INT);
        if ($resultsPerPage == 0) {
            $resultsPerPage = $this->getVar('pageSize', 20);
        }
        $where = '';
        list($objectData, $objectCount) = $repository->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);
    
        $view = Zikula_View::getInstance('MUImage', false);
    
        $view->assign('editorName', $editor)
             ->assign('objectType', $objectType)
             ->assign('objectData', $objectData)
             ->assign('sort', $sort)
             ->assign('sortdir', $sdir)
             ->assign('currentPage', $currentPage)
             ->assign('pager', array('numitems' => $objectCount,
                                     'itemsperpage' => $resultsPerPage));
    
        // assign category properties
        $properties = null;
        if (in_array($objectType, $this->categorisableObjectTypes)) {
            $properties = ModUtil::apiFunc('MUImage', 'category', 'getAllProperties', array('ot' => $objectType));
        }
        $view->assign('properties', $properties)
             ->assign('catIds', $categoryIds);
    
        return $view->display('external/' . $objectType . '/find.tpl');
    }
}
