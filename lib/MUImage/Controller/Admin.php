<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu Feb 23 22:43:24 CET 2012.
 */

/**
 * This is the Admin controller class providing navigation and interaction functionality.
 */
class MUImage_Controller_Admin extends MUImage_Controller_Base_Admin
{
    
    /**
     * This method provides a item list overview.
     *
     * @param string  $ot           Treated object type.
     * @param string  $sort         Sorting field.
     * @param string  $sortdir      Sorting direction.
     * @param int     $pos          Current pager position.
     * @param int     $num          Amount of entries to display.
     * @param string  $tpl          Name of alternative template (to be used instead of the default template).
     * @param boolean $raw          Optional way to display a template instead of fetching it (required for standalone output).
     *
     * @return mixed Output.
     */
    public function view()
    {
        $controllerHelper = new MUImage_Util_Controller($this->serviceManager);
    
        // parameter specifying which type of objects we are treating
        $objectType = $this->request->query->filter('ot', 'album', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'admin', 'action' => 'view');
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
        }
        $permLevel = ACCESS_ADMIN;
        $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucfirst($objectType) . ':', '::', $permLevel), LogUtil::getErrorMsgPermission());
    
        // redirect to entity controller
    
        System::queryStringSetVar('lct', 'admin');
        $this->request->query->set('lct', 'admin');
    
        return ModUtil::func($this->name, $objectType, 'view', array('lct' => 'admin'));
    }
    
	/**
	 * This method provides a generic item list overview.
	 *
	 * @param string  $ot           Treated object type.
	 * @param string  $sort         Sorting field.
	 * @param string  $sortdir      Sorting direction.
	 * @param int     $pos          Current pager position.
	 * @param int     $num          Amount of entries to display.
	 * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
	 * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
	 * @return mixed Output.
	 */
	/*public function view($args)
	{
	    $controllerHelper = new MUImage_Util_Controller($this->serviceManager);
	    
	    // parameter specifying which type of objects we are treating
	    $objectType = $this->request->query->filter('ot', 'album', FILTER_SANITIZE_STRING);
	    $utilArgs = array('controller' => 'admin', 'action' => 'view');
	    if (!in_array($objectType, $controllerHelper->getObjectTypes('controllerAction', $utilArgs))) {
	        $objectType = $controllerHelper->getDefaultObjectType('controllerAction', $utilArgs);
	    }
	    $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . ':' . ucwords($objectType) . ':', '::', ACCESS_ADMIN), LogUtil::getErrorMsgPermission());
	    $entityClass = $this->name . '_Entity_' . ucwords($objectType);
	    $repository = $this->entityManager->getRepository($entityClass);
	    $repository->setControllerArguments(array());
	    $viewHelper = new MUImage_Util_View($this->serviceManager);
	    
	    // parameter for used sorting field
	    $sort = $this->request->query->filter('sort', '', FILTER_SANITIZE_STRING);
	    if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
	        $sort = $repository->getDefaultSortingField();
	    }
	    
	    // parameter for used sort order
	    $sdir = $this->request->query->filter('sortdir', '', FILTER_SANITIZE_STRING);
	    $sdir = strtolower($sdir);
	    if ($sdir != 'asc' && $sdir != 'desc') {
	        $sdir = 'asc';
	    }
	    
	    // convenience vars to make code clearer
	    $currentUrlArgs = array('ot' => $objectType);
	    
	    $where = '';
	    
	    $selectionArgs = array(
	            'ot' => $objectType,
	            'where' => $where,
	            'orderBy' => $sort . ' ' . $sdir
	    );
	    
	    $showOwnEntries = (int) $this->request->query->filter('own', $this->getVar('showOnlyOwnEntries', 0), FILTER_VALIDATE_INT);
	    $showAllEntries = (int) $this->request->query->filter('all', 0, FILTER_VALIDATE_INT);
	    
	    if (!$showAllEntries) {
	        $csv = (int) $this->request->query->filter('usecsvext', 0, FILTER_VALIDATE_INT);
	        if ($csv == 1) {
	            $showAllEntries = 1;
	        }
	    }
	    
	    $this->view->assign('showOwnEntries', $showOwnEntries)
	    ->assign('showAllEntries', $showAllEntries);
	    if ($showOwnEntries == 1) {
	        $currentUrlArgs['own'] = 1;
	    }
	    if ($showAllEntries == 1) {
	        $currentUrlArgs['all'] = 1;
	    }
	    
	    // prepare access level for cache id
	    $accessLevel = ACCESS_READ;
	    $component = 'MUImage:' . ucwords($objectType) . ':';
	    $instance = '::';
	    if (SecurityUtil::checkPermission($component, $instance, ACCESS_COMMENT)) {
	        $accessLevel = ACCESS_COMMENT;
	    }
	    if (SecurityUtil::checkPermission($component, $instance, ACCESS_EDIT)) {
	        $accessLevel = ACCESS_EDIT;
	    }
	    
	    $templateFile = $viewHelper->getViewTemplate($this->view, 'admin', $objectType, 'view', array());
	    $cacheId = 'view|ot_' . $objectType . '_sort_' . $sort . '_' . $sdir;
	    $resultsPerPage = 0;
	    if ($showAllEntries == 1) {
	        // set cache id
	        $this->view->setCacheId($cacheId . '_all_1_own_' . $showOwnEntries . '_' . $accessLevel);
	    
	        // if page is cached return cached content
	        if ($this->view->is_cached($templateFile)) {
	            return $viewHelper->processTemplate($this->view, 'admin', $objectType, 'view', array(), $templateFile);
	        }
	    
	        // retrieve item list without pagination
	        $entities = ModUtil::apiFunc($this->name, 'selection', 'getEntities', $selectionArgs);
	    } else {
	        // the current offset which is used to calculate the pagination
	        $currentPage = (int) $this->request->query->filter('pos', 1, FILTER_VALIDATE_INT);
	    
	        // the number of items displayed on a page for pagination
	        $resultsPerPage = (int) $this->request->query->filter('num', 0, FILTER_VALIDATE_INT);
	        if ($resultsPerPage == 0) {
	            $resultsPerPage = $this->getVar('pageSize', 10);
	        }
	        
	        // we get the pagesize for albums
	        if ($objectType == 'album') {
	            $resultsPerPage = ModUtil::getVar($this->name, 'pageSizeAdminAlbums');
	        }
	        	
	        if ($objectType == 'picture') {
	            $resultsPerPage = ModUtil::getVar($this->name, 'pageSizeAdminPictures');
	        }
	    
	        // set cache id
	        $this->view->setCacheId($cacheId . '_amount_' . $resultsPerPage . '_page_' . $currentPage . '_own_' . $showOwnEntries . '_' . $accessLevel);
	    
	        // if page is cached return cached content
	        if ($this->view->is_cached($templateFile)) {
	            return $viewHelper->processTemplate($this->view, 'admin', $objectType, 'view', array(), $templateFile);
	        }
	    
	        // retrieve item list with pagination
	        $selectionArgs['currentPage'] = $currentPage;
	        $selectionArgs['resultsPerPage'] = $resultsPerPage;
	        list($entities, $objectCount) = ModUtil::apiFunc($this->name, 'selection', 'getEntitiesPaginated', $selectionArgs);
	    
	        $this->view->assign('currentPage', $currentPage)
	        ->assign('pager', array('numitems'     => $objectCount,
	                'itemsperpage' => $resultsPerPage));
	    }
	    
	    foreach ($entities as $k => $entity) {
	        $entity->initWorkflow();
	    }
	    
	    // build ModUrl instance for display hooks
	    $currentUrlObject = new Zikula_ModUrl($this->name, 'admin', 'view', ZLanguage::getLanguageCode(), $currentUrlArgs);
	    
	    // assign the object data, sorting information and details for creating the pager
	    $this->view->assign('items', $entities)
	    ->assign('sort', $sort)
	    ->assign('sdir', $sdir)
	    ->assign('pageSize', $resultsPerPage)
	    ->assign('currentUrlObject', $currentUrlObject)
	    ->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
	    
	    $modelHelper = new MUImage_Util_Model($this->serviceManager);
	    $this->view->assign('canBeCreated', $modelHelper->canBeCreated($objectType));
	    
	    // fetch and return the appropriate template
	    return $viewHelper->processTemplate($this->view, 'admin', $objectType, 'view', array(), $templateFile);
	     
	    ///////////////////////////////////////////////////////////
		// DEBUG: permission check aspect starts
		/*$this->throwForbiddenUnless(SecurityUtil::checkPermission('MUImage::', '::', ACCESS_ADMIN));
		// DEBUG: permission check aspect ends
	
		// parameter specifying which type of objects we are treating
		$objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->getGet()->filter('ot', 'album', FILTER_SANITIZE_STRING);
		$utilArgs = array('controller' => 'admin', 'action' => 'view');
		if (!in_array($objectType, MUImage_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
			$objectType = MUImage_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
		}
		$repository = $this->entityManager->getRepository('MUImage_Entity_' . ucfirst($objectType));
	
		$tpl = (isset($args['tpl']) && !empty($args['tpl'])) ? $args['tpl'] : $this->request->getGet()->filter('tpl', '', FILTER_SANITIZE_STRING);
		if ($tpl == 'tree') {
			$trees = ModUtil::apiFunc($this->name, 'selection', 'getAllTrees', array('ot' => $objectType));
			$this->view->assign('trees', $trees)
			->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
			// fetch and return the appropriate template
			return MUImage_Util_View::processTemplate($this->view, 'admin', $objectType, 'view', $args);
		}
	
		// parameter for used sorting field
		$sort = (isset($args['sort']) && !empty($args['sort'])) ? $args['sort'] : $this->request->getGet()->filter('sort', '', FILTER_SANITIZE_STRING);
		if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
			$sort = $repository->getDefaultSortingField();
		}
	
		// parameter for used sort order
		$sdir = (isset($args['sortdir']) && !empty($args['sortdir'])) ? $args['sortdir'] : $this->request->getGet()->filter('sortdir', '', FILTER_SANITIZE_STRING);
		$sdir = strtolower($sdir);
		if ($sdir != 'asc' && $sdir != 'desc') {
			$sdir = 'asc';
		}
	
		// convenience vars to make code clearer
		$currentUrlArgs = array('ot' => $objectType);
	
		$selectionArgs = array(
				'ot'      => $objectType,
				'where'   => '',
				'orderBy' => $sort . ' ' . $sdir
		);
	
		$showAllEntries = (int)(isset($args['all']) && !empty($args['all'])) ? $args['all'] : $this->request->getGet()->filter('all', 0, FILTER_VALIDATE_INT);
		$this->view->assign('showAllEntries', $showAllEntries);
		if ($showAllEntries == 1) {
			// item list without pagination
			$entities = ModUtil::apiFunc($this->name, 'selection', 'getEntities', $selectionArgs);
			$objectCount = count($entities);
			$currentUrlArgs['all'] = 1;
		} else {
			// item list with pagination
	
			// the current offset which is used to calculate the pagination
			$currentPage = (int)(isset($args['pos']) && !empty($args['pos'])) ? $args['pos'] : $this->request->getGet()->filter('pos', 1, FILTER_VALIDATE_INT);
	
			// the number of items displayed on a page for pagination
			$resultsPerPage = (int)(isset($args['num']) && !empty($args['num'])) ? $args['num'] : $this->request->getGet()->filter('num', 0, FILTER_VALIDATE_INT);
			if ($resultsPerPage == 0) {
				$csv = (int)(isset($args['usecsv']) && !empty($args['usecsv'])) ? $args['usecsv'] : $this->request->getGet()->filter('usecsvext', 0, FILTER_VALIDATE_INT);
				$resultsPerPage = ($csv == 1) ? 999999 : $this->getVar('pagesize', 10);
			}
			
			// we get the pagesize for albums
			if ($objectType == 'album') {
				$resultsPerPage = ModUtil::getVar($this->name, 'pageSizeAdminAlbums');
			}
			
			if ($objectType == 'picture') {
				$resultsPerPage = ModUtil::getVar($this->name, 'pageSizeAdminPictures');
			}
	
			$selectionArgs['currentPage'] = $currentPage;
			$selectionArgs['resultsPerPage'] = $resultsPerPage;
			list($entities, $objectCount) = ModUtil::apiFunc($this->name, 'selection', 'getEntitiesPaginated', $selectionArgs);
	
			$this->view->assign('currentPage', $currentPage)
			->assign('pager', array('numitems'     => $objectCount,
					'itemsperpage' => $resultsPerPage));
		}
	
		// build ModUrl instance for display hooks
		$currentUrlObject = new Zikula_ModUrl($this->name, 'admin', 'view', ZLanguage::getLanguageCode(), $currentUrlArgs);
	
		// assign the object data, sorting information and details for creating the pager
		$this->view->assign('items', $entities)
		->assign('sort', $sort)
		->assign('sdir', $sdir)
		->assign('currentUrlObject', $currentUrlObject)
		->assign($repository->getAdditionalTemplateParameters('controllerAction', $utilArgs));
	
		// fetch and return the appropriate template
		return MUImage_Util_View::processTemplate($this->view, 'admin', $objectType, 'view', $args);
	}*/
	
	/**
	 * This method takes care of the application configuration.
	 *
	 * @return string Output
	 */
	public function modulealbums()
	{
		$this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN));

		// Create new Form reference
		$view = FormUtil::newForm($this->name, $this);

		// Execute form using supplied template and page event handler
		return $view->execute('admin/album.tpl', new MUImage_Form_Handler_Admin_Base_ModuleAlbums());
	}

	/**
	 * This method takes care of the application configuration.
	 *
	 * @return string Output
	 */
	public function import()
	{
		$this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN));

		// Create new Form reference
		$view = FormUtil::newForm($this->name, $this);

		// Execute form using supplied template and page event handler
		return $view->execute('admin/import.tpl', new MUImage_Form_Handler_Admin_Base_Import());
	}
	
	/**
	 * This method takes care of the generating several picture sizes
	 */
	public function sizes()
	{
	    $this->throwForbiddenUnless(SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN));
	    
	    // Create new Form reference
	    $view = FormUtil::newForm($this->name, $this);
	    
	    // Execute form using supplied template and page event handler
	    return $view->execute('admin/createSeveralSizes.tpl', new MUImage_Form_Handler_Admin_Base_Sizes());
	     
	}
}
