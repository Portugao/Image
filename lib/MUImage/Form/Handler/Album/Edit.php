<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu Feb 23 22:43:24 CET 2012.
 */

/**
 * This handler class handles the page events of the Form called by the MUImage_user_edit() function.
 * It aims on the album object type.
 */
class MUImage_Form_Handler_Album_Edit extends MUImage_Form_Handler_Album_Base_Edit
{
    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize(Zikula_Form_View $view)
    {
        $dom = ZLanguage::getModuleDomain('MUImage');
        $id = $this->request->query->filter('id', 0, FILTER_SANITIZE_NUMBER_INT);

        $mainAlbumMode = MUImage_Util_Controller::ruleEditMainAlbum($id);

        // we check if user is in admin group
        $inAdminGroup = MUImage_Util_View::isAdmin();

        // if we want to edit an item
        if ($id > 0) {
            $myAlbums = MUImage_Util_View::getAlbums($id);

            $myalbums = array();

            if (MUImage_Util_View::isAdmin() === true || ($mainAlbumMode != C && $mainAlbumMode != D)) {
                $myalbums[] = array('value' => '', 'text' => __('No main album', $dom));
            }

            if (MUImage_Util_View::isAdmin() === true || $mainAlbumMode == 1 || $mainAlbumMode == 2 || $mainAlbumMode == 3 || $mainAlbumMode == A || $mainAlbumMode == B || $mainAlbumMode == C || $mainAlbumMode == D) {
                foreach ($myAlbums as $myAlbum) {
                    $myalbums[] = array('value' => $myAlbum['id'], 'text' => $myAlbum['title'] . ' - ' . __('Owner', $dom) . ': ' . UserUtil::getVar('uname', $myAlbum['createdUserId']) . ' - ' . __('Main album', $dom) . ': ' . $myAlbum['parent']['title']);
                }
            }
        }
        // we check if there is an item in the dropdownlist
        $countmyalbums = count($myalbums);

        $this->view->assign('mainAlbumMode', $mainAlbumMode)
        ->assign('inAdminGroup', $inAdminGroup)
        ->assign('countmyalbums', $countmyalbums);

        // controlling of albums in edit form
        // of pictures and albums
        $mainalbum = $this->view->get_template_vars('mainalbum');
        $mainalbum['muimageAlbum_ParentItemListItems'] = $myalbums;
        $this->view->assign('mainalbum', $mainalbum);

        $albumrepository = MUImage_Util_Model::getAlbumRepository();
        if ($id > 0) {
            // we get this album to edit
            $thisalbum = $albumrepository->selectById($id);
            $parent = $thisalbum->getParent();
            if ($parent) {
                $parentid = $parent->getId();
            }
            else {
                $parentid = 0;
            }


        } else {
            $parentid = $this->request->query->filter('parent', 0, FILTER_SANITIZE_NUMBER_INT);
        }

        $this->view->assign('savedParent', $parentid);

        if (MUImage_Util_View::otherUserMainAlbums() == true) {
            $this->view->assign('otherMainAlbum', true);
        } else {
            $this->view->assign('otherMainAlbum', false);
        }
        parent::initialize($view);
    }
    
    /**
     * Input data processing called by handleCommand method.
     *
     * @param Zikula_Form_View $view The form view instance.
     * @param array            $args Additional arguments.
     *
     * @return array form data after processing.
     */
    public function fetchInputData(Zikula_Form_View $view, &$args)
    {
        // fetch posted data input values as an associative array
        $formData = $this->view->getValues();
        // we want the array with our field values
        $entityData = $formData[$this->objectTypeLower];
        unset($formData[$this->objectTypeLower]);
    
        // get treated entity reference from persisted member var
        $entity = $this->entityRef;
    
    
        if ($args['commandName'] != 'cancel') {
            if (count($this->uploadFields) > 0) {
                $entityData = $this->handleUploads($entityData, $entity);
                if ($entityData == false) {
                    return false;
                }
            }
    
            if (count($this->listFields) > 0) {
                foreach ($this->listFields as $listField => $multiple) {
                    if (!$multiple) {
                        continue;
                    }
                    if (is_array($entityData[$listField])) {
                        $values = $entityData[$listField];
                        $entityData[$listField] = '';
                        if (count($values) > 0) {
                            $entityData[$listField] = '###' . implode('###', $values) . '###';
                        }
                    }
                }
            }
        } else {
            // remove fields for form options to prevent them being merged into the entity object
            if (count($this->uploadFields) > 0) {
                foreach ($this->uploadFields as $uploadField => $isMandatory) {
                    if (isset($entityData[$uploadField . 'DeleteFile'])) {
                        unset($entityData[$uploadField . 'DeleteFile']);
                    }
                }
            }
        }
    
        if (isset($entityData['repeatCreation'])) {
            if ($this->mode == 'create') {
                $this->repeatCreateAction = $entityData['repeatCreation'];
            }
            unset($entityData['repeatCreation']);
        }
        if (isset($entityData['additionalNotificationRemarks'])) {
            SessionUtil::setVar($this->name . 'AdditionalNotificationRemarks', $entityData['additionalNotificationRemarks']);
            unset($entityData['additionalNotificationRemarks']);
        }
        
        $query = new Zikula_Request_Http();
        
        //$albumrepository = MUImage_Util_Model::getAlbumRepository();
        $albumrepository = $this->getEntityManager()->getRepository('MUImage_Entity_Album');
        
        // we get parent id
        $parent = $query->request->filter('muimageAlbum_ParentItemList', 0, FILTER_SANITIZE_NUMBER_INT);
               
        if ($args['commandName'] == 'update' || $args['commandName'] == 'submit') {
            if ($parent[0] > 0 && is_array($parent)) {
                $album = $albumrepository->selectById($parent[0]);
                if ($album) {
                    $entityData['Parent'] = $album;
                }
            } else {
                $entityData['Parent'] = null;
            }
        }
    
        // search for relationship plugins to update the corresponding data
        $entityData = $this->writeRelationDataToEntity($view, $entity, $entityData);
    
        // assign fetched data
        $entity->merge($entityData);
    
        // we must persist related items now (after the merge) to avoid validation errors
        // if cascades cause the main entity becoming persisted automatically, too
        $this->persistRelationData($view);
    
        // save updated entity
        $this->entityRef = $entity;
    
        // return remaining form data
        return $formData;
    }

    /**
     * Get the default redirect url. Required if no returnTo parameter has been supplied.
     * This method is called in handleCommand so we know which command has been performed.
     */
    protected function getDefaultReturnUrl($args)
    {
        $albumId = $this->request->query->filter('id', 0, FILTER_SANITIZE_NUMBER_INT);

        // redirect to the list of albums
        $viewArgs = array('ot' => $this->objectType);
        $url = ModUtil::url($this->name, 'user', 'view', $viewArgs);

        //if ($args['commandName'] != 'delete' && !($this->mode == 'create' && $args['commandName'] == 'cancel')) {
        if ($args['commandName'] == 'submit') {
            // redirect to the detail page of treated album
            $url = ModUtil::url($this->name, 'user', 'display', array('ot' => 'album', 'id' => $this->idValues['id']));
        }
        if ($args['commandName'] == 'update') {
            $url = ModUtil::url($this->name, 'user', 'display', array('ot' => 'album', 'id' => $albumId));

        }
        //}
        return $url;
    }
}
