<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.6.2 (http://modulestudio.de).
 */

use Imagine\Gd\Imagine;
use Imagine\Image\Box;
use Imagine\Image\Point;
use Imagine\Image\ManipulatorInterface;

/**
 * Create several picture sizes handler base class.
 */
class MUImage_Form_Handler_Admin_Base_Sizes extends Zikula_Form_AbstractHandler
{
    /**
     * Post construction hook.
     *
     * @return mixed
     */
    public function setup()
    {
    }

    /**
     * Initialize form handler.
     *
     * This method takes care of all necessary initialisation of our data and form states.
     *
     * @param Zikula_Form_View $view The form view instance.
     *
     * @return boolean False in case of initialization errors, otherwise true.
     */
    public function initialize(Zikula_Form_View $view)
    {
        // permission check
        if (!SecurityUtil::checkPermission($this->name . '::', '::', ACCESS_ADMIN)) {
            return $view->registerError(LogUtil::registerPermissionError());
        }

        // custom initialisation aspects
        $this->initializeAdditions();

        // everything okay, no initialization errors occured
        return true;
    }

    /**
     * Method stub for own additions in subclasses.
     */
    protected function initializeAdditions()
    {
    }

    /**
     * Pre-initialise hook.
     *
     * @return void
     */
    public function preInitialize()
    {
    }

    /**
     * Post-initialise hook.
     *
     * @return void
     */
    public function postInitialize()
    {
    }

    /**
     * Command event handler.
     *
     * This event handler is called when a command is issued by the user. Commands are typically something
     * that originates from a {@link Zikula_Form_Plugin_Button} plugin. The passed args contains different properties
     * depending on the command source, but you should at least find a <var>$args['commandName']</var>
     * value indicating the name of the command. The command name is normally specified by the plugin
     * that initiated the command.
     *
     * @param Zikula_Form_View $view The form view instance.
     * @param array            $args Additional arguments.
     *
     * @see Zikula_Form_Plugin_Button
     * @see Zikula_Form_Plugin_ImageButton
     *
     * @return mixed Redirect or false on errors.
     */
    public function handleCommand(Zikula_Form_View $view, &$args)
    {
        if ($args['commandName'] == 'generate') {
            
            $pictureRepository = MUImage_Util_Model::getPictureRepository();
            $pictures = $pictureRepository->selectWhere();
            
            $widthFirst = ModUtil::getVar('MUImage', 'widthFirst');
            $heightFirst = ModUtil::getVar('MUImage', 'heightFirst');
            
            $widthSecond = ModUtil::getVar('MUImage', 'widthSecond');
            $heightSecond = ModUtil::getVar('MUImage', 'heightSecond');

            $widthThird = ModUtil::getVar('MUImage', 'widthThird');
            $heightThird = ModUtil::getVar('MUImage', 'heightThird');  

            $serviceManager = ServiceUtil::getManager();
            $controllerHelper = new MUImage_Util_Controller($serviceManager);
            
            $entityManager = $serviceManager->getService('doctrine.entitymanager');
            
            // get base path for picture
            $objectType = 'picture';
            $fieldName = 'imageUpload';
            try {
                $basePath = $controllerHelper->getFileBaseFolder($objectType, $fieldName);
            } catch (\Exception $e) {
                return LogUtil::registerError($e->getMessage());
            }
            
            foreach ($pictures as $picture) {

                // retrieve the final file name
                $fileNameParts = explode('.', $picture['imageUpload']);
                $fileNamePartsWithoutExtension = array_slice($fileNameParts, 0, count($fileNameParts) - 1);
                $fileNameWithoutExtension = implode('.', $fileNamePartsWithoutExtension);
                
                $imagine = new Imagine();
                
                // we create the thumnail
                if ($widthFirst > 0 && $heightFirst > 0) {
                    $nameForThumb = $fileNameWithoutExtension . '_tmb.jpg';
                    $imagine->open($basePath . $picture['imageUpload'])->thumbnail(new Box($widthFirst, $heightFirst), 'inset')->save($basePath . $nameForThumb);
                }
                // we create the preview
                if ($widthSecond > 0 && $heightSecond > 0) {
                    $nameForThumb = $fileNameWithoutExtension . '_pre.jpg';
                    $imagine->open($basePath . $picture['imageUpload'])->thumbnail(new Box($widthSecond, $heightSecond), 'inset')->save($basePath . $nameForThumb);
                }
                // we create the full image
                if ($widthThird > 0 && $heightThird > 0) {
                    $nameForThumb = $fileNameWithoutExtension . '_full.jpg';
                    $imagine->open($basePath . $picture['imageUpload'])->thumbnail(new Box($widthThird, $heightThird), 'inset')->save($basePath . $nameForThumb);
                }
                
                $pictureObject = $pictureRepository->selectById($picture['id']);
                $meta = $pictureObject->getImageUploadMeta;
                $meta['filename'] = $fileNameWithoutExtension;
                
                $pictureObject->setImageUploadMeta($meta);
                $entityManager->flush();
                
            }

            LogUtil::registerStatus($this->__('Done! Several sizes for old uploads created.'));
        } else if ($args['commandName'] == 'cancel') {
            // nothing to do there
        }

        // redirect back to the config page
        $url = ModUtil::url($this->name, 'admin', 'config');

        return $this->view->redirect($url);
    }
}
