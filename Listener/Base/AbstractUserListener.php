<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\ImageModule\Listener\Base;

use Psr\Log\LoggerInterface;
use Zikula\Common\Translator\TranslatorInterface as ZkTranslatorInterface;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\HttpKernel\HttpKernelInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Core\Event\GenericEvent;
use Zikula\UsersModule\Api\CurrentUserApi;
use Zikula\UsersModule\UserEvents;
use MU\ImageModule\Entity\Factory\ImageFactory;

/**
 * Event handler base class for user-related events.
 */
abstract class AbstractUserListener implements EventSubscriberInterface
{
    /**
     * @var ZkTranslatorInterface
     */
    protected $translator;
    
    /**
     * @var ImageFactory
     */
    protected $entityFactory;
    
    /**
     * @var CurrentUserApi
     */
    protected $currentUserApi;
    
    /**
     * @var LoggerInterface
     */
    protected $logger;
    
    /**
     * UserListener constructor.
     *
     * @param ZkTranslatorInterface $translator     Translator service instance
     * @param ImageFactory $entityFactory ImageFactory service instance
     * @param CurrentUserApi        $currentUserApi CurrentUserApi service instance
     * @param LoggerInterface       $logger         Logger service instance
     *
     * @return void
     */
    public function __construct(ZkTranslatorInterface $translator, ImageFactory $entityFactory, CurrentUserApi $currentUserApi, LoggerInterface $logger)
    {
        $this->translator = $translator;
        $this->entityFactory = $entityFactory;
        $this->currentUserApi = $currentUserApi;
        $this->logger = $logger;
    }
    
    /**
     * Makes our handlers known to the event system.
     */
    public static function getSubscribedEvents()
    {
        return [
            'user.gettheme'            => ['getTheme', 5],
            UserEvents::CREATE_ACCOUNT => ['create', 5],
            UserEvents::UPDATE_ACCOUNT => ['update', 5],
            UserEvents::DELETE_ACCOUNT => ['delete', 5]
        ];
    }
    
    /**
     * Listener for the `user.gettheme` event.
     *
     * Called during \UserUtil::getTheme() and is used to filter the results.
     * Receives arg['type'] with the type of result to be filtered
     * and the $themeName in the $event->data which can be modified.
     * Must $event->stopPropagation() if handler performs filter.
     *
     * @param GenericEvent $event The event instance
     */
    public function getTheme(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `user.account.create` event.
     *
     * Occurs after a user account is created. All handlers are notified.
     * It does not apply to creation of a pending registration.
     * The full user record created is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record that was created.
     *
     * @param GenericEvent $event The event instance
     */
    public function create(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `user.account.update` event.
     *
     * Occurs after a user is updated. All handlers are notified.
     * The full updated user record is available as the subject.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     * The subject of the event is set to the user record, with the updated values.
     *
     * @param GenericEvent $event The event instance
     */
    public function update(GenericEvent $event)
    {
    }
    
    /**
     * Listener for the `user.account.delete` event.
     *
     * Occurs after the deletion of a user account. Subject is $userId.
     * This is a storage-level event, not a UI event. It should not be used for UI-level actions such as redirects.
     *
     * @param GenericEvent $event The event instance
     */
    public function delete(GenericEvent $event)
    {
        $userId = $event->getSubject();
    
        
        $repo = $this->entityFactory->getRepository('album');
        // set creator to admin (2) for all albums created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all albums updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUImageModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'albums'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('picture');
        // set creator to admin (2) for all pictures created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all pictures updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUImageModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'pictures'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
        
        $repo = $this->entityFactory->getRepository('avatar');
        // set creator to admin (2) for all avatars created by this user
        $repo->updateCreator($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        // set last editor to admin (2) for all avatars updated by this user
        $repo->updateLastEditor($userId, 2, $this->translator, $this->logger, $this->currentUserApi);
        
        $logArgs = ['app' => 'MUImageModule', 'user' => $this->currentUserApi->get('uname'), 'entities' => 'avatars'];
        $this->logger->notice('{app}: User {user} has been deleted, so we deleted/updated corresponding {entities}, too.', $logArgs);
    }
}
