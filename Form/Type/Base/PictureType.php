<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\MUImageModule\Form\Type\Base;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use MU\MUImageModule\Entity\Factory\PictureFactory;
use MU\MUImageModule\Helper\ListEntriesHelper;

/**
 * Picture editing form type base class.
 */
class PictureType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var PictureFactory
     */
    protected $entityFactory;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * PictureType constructor.
     *
     * @param TranslatorInterface $translator    Translator service instance
     * @param PictureFactory        $entityFactory Entity factory service instance
     * @param ListEntriesHelper   $listHelper    ListEntriesHelper service instance
     */
    public function __construct(TranslatorInterface $translator, PictureFactory $entityFactory, ListEntriesHelper $listHelper)
    {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
        $this->listHelper = $listHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        $this->addIncomingRelationshipFields($builder, $options);
        $this->addReturnControlField($builder, $options);
        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds basic entity fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('title', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
            'label' => $this->__('Title') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Enter the title of the picture')
            ],'required' => false,
            'max_length' => 255,
        ]);
        $builder->add('description', 'Symfony\Component\Form\Extension\Core\Type\TextareaType', [
            'label' => $this->__('Description') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Enter the description of the picture')
            ],'required' => false,
            'max_length' => 2000,
        ]);
        $builder->add('showTitle', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
            'label' => $this->__('Show title') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('show title ?')
            ],'required' => false,
        ]);
        $builder->add('showDescription', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
            'label' => $this->__('Show description') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('show description ?')
            ],'required' => false,
        ]);
        $builder->add('imageUpload', 'Symfony\Component\Form\Extension\Core\Type\FileType', [
            'label' => $this->__('Image upload') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => ' validate-upload',
                'title' => $this->__('Enter the image upload of the picture')
            ],'required' => true && $options['mode'] == 'create',
            'file_meta' => 'getImageUploadMeta',
            'file_path' => 'getImageUploadFullPath',
            'file_url' => 'getImageUploadFullPathUrl',
            'allowed_extensions' => 'gif, jpeg, jpg, png',
            'allowed_size' => 0
        ]);
        $builder->add('imageView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
            'label' => $this->__('Image view') . ':',
            'empty_data' => '0',
            'attr' => [
                'class' => ' validate-digits',
                'title' => $this->__('Enter the image view of the picture. Only digits are allowed.')
            ],'required' => false,
            'max_length' => 11,
            'scale' => 0
        ]);
        $builder->add('albumImage', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
            'label' => $this->__('Album image') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('album image ?')
            ],'required' => false,
        ]);
        $builder->add('pos', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
            'label' => $this->__('Pos') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => ' validate-digits',
                'title' => $this->__('Enter the pos of the picture. Only digits are allowed.')
            ],'required' => true,
            'max_length' => 11,
            'scale' => 0
        ]);
    }

    /**
     * Adds fields for incoming relationships.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIncomingRelationshipFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('album', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUMUImageModule:AlbumEntity',
            'choice_label' => 'getTitleFromDisplayPattern',
            'multiple' => false,
            'expanded' => false,
            'query_builder' => function(EntityRepository $er) {
                return $er->getListQueryBuilder('', '', false, true);
            },
            'label' => $this->__('Album'),
            'attr' => [
                'id' => 'album',
                'title' => $this->__('Choose the album')
            ]
        ]);
    }

    /**
     * Adds the return control field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addReturnControlField(FormBuilderInterface $builder, array $options)
    {
        $builder->add('repeatCreation', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
            'mapped' => false,
            'label' => $this->__('Create another item after save'),
            'required' => false
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options)
    {
        foreach ($options['actions'] as $action) {
            $builder->add($action['id'], 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__($action['title']),
                'icon' => ($action['id'] == 'delete' ? 'fa-trash-o' : ''),
                'attr' => [
                    'id' => 'btn' . ucfirst($action['id']),
                    'class' => $action['buttonClass'],
                    'title' => $this->__($action['description'])
                ]
            ]);
        }
        $builder->add('reset', 'Symfony\Component\Form\Extension\Core\Type\ResetType', [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'id' => 'btnReset',
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'id' => 'btnCancel',
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return 'mumuimagemodule_picture';
    }

    /**
     * {@inheritdoc}
     */
    public function getName()
    {
        return $this->getBlockPrefix();
    }

    /**
     * {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data (required for embedding forms)
                'data_class' => 'MU\MUImageModule\Entity\PictureEntity',
                'empty_data' => function (FormInterface $form) {
                    return $this->entityFactory->createPicture();
                },
                'error_mapping' => [
                ],
                'mode' => 'create',
                'actions' => [],
                'inlineUsage' => false
            ])
            ->setRequired(['mode', 'actions'])
            ->setAllowedTypes([
                'mode' => 'string',
                'actions' => 'array',
                'inlineUsage' => 'bool'
            ])
            ->setAllowedValues([
                'mode' => ['create', 'edit']
            ])
        ;
    }
}
