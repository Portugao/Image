<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\ImageModule\Form\Type\Base;

use Doctrine\ORM\EntityRepository;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\Form\FormInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use MU\ImageModule\Entity\Factory\AlbumFactory;
use MU\ImageModule\Helper\FeatureActivationHelper;
use MU\ImageModule\Helper\ListEntriesHelper;

/**
 * Album editing form type base class.
 */
abstract class AbstractAlbumType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var AlbumFactory
     */
    protected $entityFactory;

    /**
     * @var ListEntriesHelper
     */
    protected $listHelper;

    /**
     * @var FeatureActivationHelper
     */
    protected $featureActivationHelper;

    /**
     * AlbumType constructor.
     *
     * @param TranslatorInterface $translator    Translator service instance
     * @param AlbumFactory        $entityFactory Entity factory service instance
     * @param ListEntriesHelper   $listHelper    ListEntriesHelper service instance
     * @param FeatureActivationHelper $featureActivationHelper FeatureActivationHelper service instance
     */
    public function __construct(TranslatorInterface $translator, AlbumFactory $entityFactory, ListEntriesHelper $listHelper, FeatureActivationHelper $featureActivationHelper)
    {
        $this->setTranslator($translator);
        $this->entityFactory = $entityFactory;
        $this->listHelper = $listHelper;
        $this->featureActivationHelper = $featureActivationHelper;
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        if ($this->featureActivationHelper->isEnabled(FeatureActivationHelper::CATEGORIES, 'album')) {
            $this->addCategoriesField($builder, $options);
        }
        $this->addIncomingRelationshipFields($builder, $options);
        $this->addOutgoingRelationshipFields($builder, $options);
        $this->addReturnControlField($builder, $options);
        $this->addSubmitButtons($builder, $options);
    }

    /**
     * Adds basic entity fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('title', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
            'label' => $this->__('Title') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => 'validate-unique',
                'title' => $this->__('Enter the title of the album')
            ],'required' => true,
            'max_length' => 255,
        ]);
        $builder->add('description', 'Symfony\Component\Form\Extension\Core\Type\TextareaType', [
            'label' => $this->__('Description') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Enter the description of the album')
            ],'required' => false,
            'max_length' => 2000,
        ]);
        $builder->add('parent_id', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
            'label' => $this->__('Parent_id') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => ' validate-digits',
                'title' => $this->__('Enter the parent_id of the album. Only digits are allowed.')
            ],'required' => false,
            'max_length' => 11,
            'scale' => 0
        ]);
        $listEntries = $this->listHelper->getEntries('album', 'albumAccess');
        $choices = [];
        $choiceAttributes = [];
        foreach ($listEntries as $entry) {
            $choices[$entry['text']] = $entry['value'];
            $choiceAttributes[$entry['text']] = ['title' => $entry['title']];
        }
        $builder->add('albumAccess', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
            'label' => $this->__('Album access') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Choose the album access')
            ],'placeholder' => '',
            'choices' => $choices,
            'choices_as_values' => true,
            'choice_attr' => $choiceAttributes,
            'multiple' => false,
            'expanded' => false
        ]);
        $builder->add('passwordAccess', 'Symfony\Component\Form\Extension\Core\Type\PasswordType', [
            'label' => $this->__('Password access') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Enter the password access of the album')
            ],'required' => false,
            'max_length' => 255,
        ]);
        $builder->add('myFriends', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
            'label' => $this->__('My friends') . ':',
            'empty_data' => '',
            'attr' => [
                'class' => '',
                'title' => $this->__('Enter the my friends of the album')
            ],'required' => false,
            'max_length' => 255,
        ]);
        $builder->add('notInFrontend', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
            'label' => $this->__('Not in frontend') . ':',
            'attr' => [
                'class' => '',
                'title' => $this->__('not in frontend ?')
            ],'required' => false,
        ]);
    }

    /**
     * Adds a categories field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addCategoriesField(FormBuilderInterface $builder, array $options)
    {
        $builder->add('categories', 'Zikula\CategoriesModule\Form\Type\CategoriesType', [
            'label' => $this->__('Category') . ':',
            'empty_data' => [],
            'attr' => [
                'class' => 'category-selector'
            ],
            'required' => false,
            'multiple' => false,
            'module' => 'MUImageModule',
            'entity' => 'AlbumEntity',
            'entityCategoryClass' => 'MU\ImageModule\Entity\AlbumCategoryEntity'
        ]);
    }

    /**
     * Adds fields for incoming relationships.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addIncomingRelationshipFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('album', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUImageModule:AlbumEntity',
            'choice_label' => 'getTitleFromDisplayPattern',
            'multiple' => false,
            'expanded' => false,
            'query_builder' => function(EntityRepository $er) {
                // select without joins
                return $er->getListQueryBuilder('', '', false);
            },
            'label' => $this->__('Album'),
            'attr' => [
                'title' => $this->__('Choose the album')
            ]
        ]);
    }

    /**
     * Adds fields for outgoing relationships.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addOutgoingRelationshipFields(FormBuilderInterface $builder, array $options)
    {
        $builder->add('albums', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUImageModule:AlbumEntity',
            'choice_label' => 'getTitleFromDisplayPattern',
            'multiple' => true,
            'expanded' => false,
            'query_builder' => function(EntityRepository $er) {
                // select without joins
                return $er->getListQueryBuilder('', '', false);
            },
            'label' => $this->__('Albums'),
            'attr' => [
                'title' => $this->__('Choose the albums')
            ]
        ]);
        $builder->add('pictures', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
            'class' => 'MUImageModule:PictureEntity',
            'choice_label' => 'getTitleFromDisplayPattern',
            'multiple' => true,
            'expanded' => false,
            'query_builder' => function(EntityRepository $er) {
                // select without joins
                return $er->getListQueryBuilder('', '', false);
            },
            'label' => $this->__('Pictures'),
            'attr' => [
                'title' => $this->__('Choose the pictures')
            ]
        ]);
    }

    /**
     * Adds the return control field.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addReturnControlField(FormBuilderInterface $builder, array $options)
    {
        if ($options['mode'] != 'create') {
            return;
        }
        $builder->add('repeatCreation', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
            'mapped' => false,
            'label' => $this->__('Create another item after save'),
            'required' => false
        ]);
    }

    /**
     * Adds submit buttons.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSubmitButtons(FormBuilderInterface $builder, array $options)
    {
        foreach ($options['actions'] as $action) {
            $builder->add($action['id'], 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__(/** @Ignore */$action['title']),
                'icon' => ($action['id'] == 'delete' ? 'fa-trash-o' : ''),
                'attr' => [
                    'class' => $action['buttonClass'],
                    'title' => $this->__(/** @Ignore */$action['description'])
                ]
            ]);
        }
        $builder->add('reset', 'Symfony\Component\Form\Extension\Core\Type\ResetType', [
            'label' => $this->__('Reset'),
            'icon' => 'fa-refresh',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
        $builder->add('cancel', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
            'label' => $this->__('Cancel'),
            'icon' => 'fa-times',
            'attr' => [
                'class' => 'btn btn-default',
                'formnovalidate' => 'formnovalidate'
            ]
        ]);
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return 'muimagemodule_album';
    }

    /**
     * {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver
            ->setDefaults([
                // define class for underlying data (required for embedding forms)
                'data_class' => 'MU\ImageModule\Entity\AlbumEntity',
                'empty_data' => function (FormInterface $form) {
                    return $this->entityFactory->createAlbum();
                },
                'error_mapping' => [
                ],
                'mode' => 'create',
                'actions' => [],
                'inlineUsage' => false
            ])
            ->setRequired(['mode', 'actions'])
            ->setAllowedTypes([
                'mode' => 'string',
                'actions' => 'array',
                'inlineUsage' => 'bool'
            ])
            ->setAllowedValues([
                'mode' => ['create', 'edit']
            ])
        ;
    }
}
