<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\ImageModule\Form\Base;

use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\Common\Translator\TranslatorTrait;
use Zikula\ExtensionsModule\Api\VariableApi;
use Zikula\GroupsModule\Entity\RepositoryInterface\GroupRepositoryInterface;

/**
 * Configuration form type base class.
 */
abstract class AbstractAppSettingsType extends AbstractType
{
    use TranslatorTrait;

    /**
     * @var VariableApi
     */
    protected $variableApi;

    /**
     * @var array
     */
    protected $modVars;

    /**
     * AppSettingsType constructor.
     *
     * @param TranslatorInterface      $translator      Translator service instance
     * @param VariableApi              $variableApi     VariableApi service instance
     * @param GroupRepositoryInterface $groupRepository GroupRepository service instance
     */
    public function __construct(TranslatorInterface $translator, VariableApi $variableApi, GroupRepositoryInterface $groupRepository)
    {
        $this->setTranslator($translator);
        $this->variableApi = $variableApi;
        $this->modVars = $this->variableApi->getAll('MUImageModule');

        foreach (['moderationGroupForAvatars'] as $groupFieldName) {
            $groupId = intval($this->modVars[$groupFieldName]);
            if ($groupId < 1) {
                $groupId = 2; // fallback to admin group
            }
            $this->modVars[$groupFieldName] = $groupRepository->find($groupId);
        }
    }

    /**
     * Sets the translator.
     *
     * @param TranslatorInterface $translator Translator service instance
     */
    public function setTranslator(/*TranslatorInterface */$translator)
    {
        $this->translator = $translator;
    }

    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addGeneralFields($builder, $options);
        $this->addSlideshowsFields($builder, $options);
        $this->addUploadHandlerFields($builder, $options);
        $this->addAvatarsFields($builder, $options);
        $this->addDisplaySettingsFields($builder, $options);
        $this->addWatermarkFields($builder, $options);
        $this->addModerationFields($builder, $options);
        $this->addListviewsFields($builder, $options);
        $this->addImagesFields($builder, $options);

        $builder
            ->add('save', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Update configuration'),
                'icon' => 'fa-check',
                'attr' => [
                    'class' => 'btn btn-success'
                ]
            ])
            ->add('cancel', 'Symfony\Component\Form\Extension\Core\Type\SubmitType', [
                'label' => $this->__('Cancel'),
                'icon' => 'fa-times',
                'attr' => [
                    'class' => 'btn btn-default',
                    'formnovalidate' => 'formnovalidate'
                ]
            ])
        ;
    }

    /**
     * Adds fields for general fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addGeneralFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('supportCategories', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Support categories') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['supportCategories']) ? $this->modVars['supportCategories'] : '',
                'attr' => [
                    'title' => $this->__('The support categories option.')
                ],
            ])
            ->add('supportSubAlbums', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Support sub albums') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['supportSubAlbums']) ? $this->modVars['supportSubAlbums'] : '',
                'attr' => [
                    'title' => $this->__('The support sub albums option.')
                ],
            ])
            ->add('userDeletePictures', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('User delete pictures') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['userDeletePictures']) ? $this->modVars['userDeletePictures'] : '',
                'attr' => [
                    'title' => $this->__('The user delete pictures option.')
                ],
            ])
            ->add('slideshow1', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Slideshow 1') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['slideshow1']) ? $this->modVars['slideshow1'] : '',
                'attr' => [
                    'title' => $this->__('The slideshow 1 option.')
                ],
            ])
            ->add('useAvatars', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Use avatars') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['useAvatars']) ? $this->modVars['useAvatars'] : '',
                'attr' => [
                    'title' => $this->__('The use avatars option.')
                ],
            ])
            ->add('useWatermark', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Use watermark') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['useWatermark']) ? $this->modVars['useWatermark'] : '',
                'attr' => [
                    'title' => $this->__('The use watermark option.')
                ],
            ])
            ->add('useExtendedFeatures', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Use extended features') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Do you want to limit creating of albums, subalbums or pictures?
                    Do you want set a group for common albums?
                    Do you want to give the option to rule the access to albums?
                    Do you want to use Categories for Albums or Avatars?
                    
                    Then you can enable these features here!')
                ],
                'help' => $this->__('Do you want to limit creating of albums, subalbums or pictures?
                Do you want set a group for common albums?
                Do you want to give the option to rule the access to albums?
                Do you want to use Categories for Albums or Avatars?
                
                Then you can enable these features here!'),
                'required' => false,
                'data' => (bool)isset($this->modVars['useExtendedFeatures']) ? $this->modVars['useExtendedFeatures'] : '',
                'attr' => [
                    'title' => $this->__('The use extended features option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for slideshows fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addSlideshowsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('slide1Interval', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Slide 1 interval') . ':',
                'required' => false,
                'data' => isset($this->modVars['slide1Interval']) ? $this->modVars['slide1Interval'] : '',
                'empty_data' => intval('4000'),
                'attr' => [
                    'title' => $this->__('Enter the slide 1 interval. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('slide1Speed', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Slide 1 speed') . ':',
                'required' => false,
                'data' => isset($this->modVars['slide1Speed']) ? $this->modVars['slide1Speed'] : '',
                'empty_data' => intval('1000'),
                'attr' => [
                    'title' => $this->__('Enter the slide 1 speed. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
        ;
    }

    /**
     * Adds fields for upload handler fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addUploadHandlerFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('fileSizeForPictures', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('File size for pictures') . ':',
                'required' => false,
                'data' => isset($this->modVars['fileSizeForPictures']) ? $this->modVars['fileSizeForPictures'] : '',
                'empty_data' => intval('102400'),
                'attr' => [
                    'title' => $this->__('Enter the file size for pictures. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('fileSizeForAvatars', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('File size for avatars') . ':',
                'required' => false,
                'data' => isset($this->modVars['fileSizeForAvatars']) ? $this->modVars['fileSizeForAvatars'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the file size for avatars. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('minWidthForPictures', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Min width for pictures') . ':',
                'required' => false,
                'data' => isset($this->modVars['minWidthForPictures']) ? $this->modVars['minWidthForPictures'] : '',
                'empty_data' => intval('400'),
                'attr' => [
                    'title' => $this->__('Enter the min width for pictures. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('maxWidthForPictures', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Max width for pictures') . ':',
                'required' => false,
                'data' => isset($this->modVars['maxWidthForPictures']) ? $this->modVars['maxWidthForPictures'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the max width for pictures. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('maxHeightForPictures', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Max height for pictures') . ':',
                'required' => false,
                'data' => isset($this->modVars['maxHeightForPictures']) ? $this->modVars['maxHeightForPictures'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the max height for pictures. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('minWidthForAvatars', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Min width for avatars') . ':',
                'required' => false,
                'data' => isset($this->modVars['minWidthForAvatars']) ? $this->modVars['minWidthForAvatars'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the min width for avatars. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('maxWidthForAvatars', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Max width for avatars') . ':',
                'required' => false,
                'data' => isset($this->modVars['maxWidthForAvatars']) ? $this->modVars['maxWidthForAvatars'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the max width for avatars. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('maxHeightForAvatars', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Max height for avatars') . ':',
                'required' => false,
                'data' => isset($this->modVars['maxHeightForAvatars']) ? $this->modVars['maxHeightForAvatars'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the max height for avatars. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('firstWidth', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('First width') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Width for the first additional picure')
                ],
                'help' => $this->__('Width for the first additional picure'),
                'required' => false,
                'data' => isset($this->modVars['firstWidth']) ? $this->modVars['firstWidth'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the first width. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('firstHeight', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('First height') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Height for the first additional picure')
                ],
                'help' => $this->__('Height for the first additional picure'),
                'required' => false,
                'data' => isset($this->modVars['firstHeight']) ? $this->modVars['firstHeight'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the first height. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('secondWidth', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Second width') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Width for the second additional picure')
                ],
                'help' => $this->__('Width for the second additional picure'),
                'required' => false,
                'data' => isset($this->modVars['secondWidth']) ? $this->modVars['secondWidth'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the second width. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('secondHeight', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Second height') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Height for the second additional picure')
                ],
                'help' => $this->__('Height for the second additional picure'),
                'required' => false,
                'data' => isset($this->modVars['secondHeight']) ? $this->modVars['secondHeight'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the second height. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('thirdWidth', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Third width') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Width for the third additional picure')
                ],
                'help' => $this->__('Width for the third additional picure'),
                'required' => false,
                'data' => isset($this->modVars['thirdWidth']) ? $this->modVars['thirdWidth'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the third width. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('thirdHeight', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Third height') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Height for the third additional picure')
                ],
                'help' => $this->__('Height for the third additional picure'),
                'required' => false,
                'data' => isset($this->modVars['thirdHeight']) ? $this->modVars['thirdHeight'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the third height. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
        ;
    }

    /**
     * Adds fields for avatars fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addAvatarsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('numberHeightAndNameOfAvatars', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
                'label' => $this->__('Number height and name of avatars') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Here you can set, how many avatar sizes with which name you wish.')
                ],
                'help' => $this->__('Here you can set, how many avatar sizes with which name you wish.'),
                'required' => false,
                'data' => isset($this->modVars['numberHeightAndNameOfAvatars']) ? $this->modVars['numberHeightAndNameOfAvatars'] : '',
                'empty_data' => '200,thumb;400,view;600,normal',
                'attr' => [
                    'title' => $this->__('Enter the number height and name of avatars.')
                ],'max_length' => 255
            ])
            ->add('shrink', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Shrink') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['shrink']) ? $this->modVars['shrink'] : '',
                'attr' => [
                    'title' => $this->__('The shrink option.')
                ],
            ])
        ;
    }

    /**
     * Adds fields for display settings fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addDisplaySettingsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('albumEntriesPerPageInBackend', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Album entries per page in backend') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of albums shown per page in the backend')
                ],
                'help' => $this->__('The amount of albums shown per page in the backend'),
                'required' => false,
                'data' => isset($this->modVars['albumEntriesPerPageInBackend']) ? $this->modVars['albumEntriesPerPageInBackend'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the album entries per page in backend. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('pictureEntriesPerPageInBackend', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Picture entries per page in backend') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of pictures shown per page in the backend')
                ],
                'help' => $this->__('The amount of pictures shown per page in the backend'),
                'required' => false,
                'data' => isset($this->modVars['pictureEntriesPerPageInBackend']) ? $this->modVars['pictureEntriesPerPageInBackend'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the picture entries per page in backend. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('avatarEntriesPerPageInBackend', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Avatar entries per page in backend') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of avatars shown per page in the backend')
                ],
                'help' => $this->__('The amount of avatars shown per page in the backend'),
                'required' => false,
                'data' => isset($this->modVars['avatarEntriesPerPageInBackend']) ? $this->modVars['avatarEntriesPerPageInBackend'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the avatar entries per page in backend. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('countImageView', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Count image view') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['countImageView']) ? $this->modVars['countImageView'] : '',
                'attr' => [
                    'title' => $this->__('The count image view option.')
                ],
            ])
            ->add('numberParentAlbums', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Number parent albums') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('How many main albums may a user create')
                ],
                'help' => $this->__('How many main albums may a user create'),
                'required' => false,
                'data' => isset($this->modVars['numberParentAlbums']) ? $this->modVars['numberParentAlbums'] : '',
                'empty_data' => intval('1'),
                'attr' => [
                    'title' => $this->__('Enter the number parent albums. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('numberSubAlbums', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Number sub albums') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('How many sub albums may a user create')
                ],
                'help' => $this->__('How many sub albums may a user create'),
                'required' => false,
                'data' => isset($this->modVars['numberSubAlbums']) ? $this->modVars['numberSubAlbums'] : '',
                'empty_data' => intval('2'),
                'attr' => [
                    'title' => $this->__('Enter the number sub albums. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('numberPictures', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Number pictures') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('How many pictures may a user create')
                ],
                'help' => $this->__('How many pictures may a user create'),
                'required' => false,
                'data' => isset($this->modVars['numberPictures']) ? $this->modVars['numberPictures'] : '',
                'empty_data' => intval('20'),
                'attr' => [
                    'title' => $this->__('Enter the number pictures. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('groupForCommonAlbums', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Group for common albums') . ':',
                'required' => false,
                'data' => isset($this->modVars['groupForCommonAlbums']) ? $this->modVars['groupForCommonAlbums'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the group for common albums.')
                ],'choices' => [
                    $this->__('None') => 'none'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('kindOfShowSubAlbums', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Kind of show sub albums') . ':',
                'required' => false,
                'data' => isset($this->modVars['kindOfShowSubAlbums']) ? $this->modVars['kindOfShowSubAlbums'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Choose the kind of show sub albums.')
                ],'choices' => [
                    $this->__('Links') => 'links'
                    ,$this->__('Panel') => 'panel'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('breadcrumbsInFrontend', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Breadcrumbs in frontend') . ':',
                'required' => false,
                'data' => (bool)isset($this->modVars['breadcrumbsInFrontend']) ? $this->modVars['breadcrumbsInFrontend'] : '',
                'attr' => [
                    'title' => $this->__('The breadcrumbs in frontend option.')
                ],
            ])
            ->add('ending', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
                'label' => $this->__('Ending') . ':',
                'required' => false,
                'data' => isset($this->modVars['ending']) ? $this->modVars['ending'] : '',
                'empty_data' => 'html',
                'attr' => [
                    'title' => $this->__('Enter the ending.')
                ],'max_length' => 255
            ])
        ;
    }

    /**
     * Adds fields for watermark fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addWatermarkFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('watermark', 'Symfony\Component\Form\Extension\Core\Type\TextType', [
                'label' => $this->__('Watermark') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Path to the image that is for the watermark')
                ],
                'help' => $this->__('Path to the image that is for the watermark'),
                'required' => false,
                'data' => isset($this->modVars['watermark']) ? $this->modVars['watermark'] : '',
                'empty_data' => '',
                'attr' => [
                    'title' => $this->__('Enter the watermark.')
                ],'max_length' => 255
            ])
            ->add('bottom', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Bottom') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('If top is set, bottom has no effect')
                ],
                'help' => $this->__('If top is set, bottom has no effect'),
                'required' => false,
                'data' => isset($this->modVars['bottom']) ? $this->modVars['bottom'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the bottom. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('left', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Left') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('If left is set, right has no effect')
                ],
                'help' => $this->__('If left is set, right has no effect'),
                'required' => false,
                'data' => isset($this->modVars['left']) ? $this->modVars['left'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the left. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('right', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Right') . ':',
                'required' => false,
                'data' => isset($this->modVars['right']) ? $this->modVars['right'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the right. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('top', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Top') . ':',
                'required' => false,
                'data' => isset($this->modVars['top']) ? $this->modVars['top'] : '',
                'empty_data' => intval(''),
                'attr' => [
                    'title' => $this->__('Enter the top. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
        ;
    }

    /**
     * Adds fields for moderation fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addModerationFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('moderationGroupForAvatars', 'Symfony\Bridge\Doctrine\Form\Type\EntityType', [
                'label' => $this->__('Moderation group for avatars') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Used to determine moderator user accounts for sending email notifications.')
                ],
                'help' => $this->__('Used to determine moderator user accounts for sending email notifications.'),
                'data' => isset($this->modVars['moderationGroupForAvatars']) ? $this->modVars['moderationGroupForAvatars'] : '',
                'attr' => [
                    'title' => $this->__('Choose the moderation group for avatars.')
                ],'max_length' => 255,
                // Zikula core should provide a form type for this to hide entity details
                'class' => 'ZikulaGroupsModule:GroupEntity',
                'choice_label' => 'name',
                'choice_value' => 'gid'
            ])
        ;
    }

    /**
     * Adds fields for listviews fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addListviewsFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('albumEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Album entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of albums shown per page')
                ],
                'help' => $this->__('The amount of albums shown per page'),
                'required' => false,
                'data' => isset($this->modVars['albumEntriesPerPage']) ? $this->modVars['albumEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the album entries per page. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('pictureEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Picture entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of pictures shown per page')
                ],
                'help' => $this->__('The amount of pictures shown per page'),
                'required' => false,
                'data' => isset($this->modVars['pictureEntriesPerPage']) ? $this->modVars['pictureEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the picture entries per page. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
            ->add('avatarEntriesPerPage', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Avatar entries per page') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The amount of avatars shown per page')
                ],
                'help' => $this->__('The amount of avatars shown per page'),
                'required' => false,
                'data' => isset($this->modVars['avatarEntriesPerPage']) ? $this->modVars['avatarEntriesPerPage'] : '',
                'empty_data' => intval('10'),
                'attr' => [
                    'title' => $this->__('Enter the avatar entries per page. Only digits are allowed.')
                ],'max_length' => 255,
                'scale' => 0
            ])
        ;
    }

    /**
     * Adds fields for images fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addImagesFields(FormBuilderInterface $builder, array $options)
    {
        $builder
            ->add('enableShrinkingForPictureImageUpload', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Enable shrinking for picture image upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
                ],
                'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
                'required' => false,
                'data' => (bool)isset($this->modVars['enableShrinkingForPictureImageUpload']) ? $this->modVars['enableShrinkingForPictureImageUpload'] : '',
                'attr' => [
                    'title' => $this->__('The enable shrinking for picture image upload option.'),
                    'class' => 'shrink-enabler'
                ],
            ])
            ->add('shrinkWidthPictureImageUpload', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink width picture image upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image width in pixels.')
                ],
                'help' => $this->__('The maximum image width in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkWidthPictureImageUpload']) ? $this->modVars['shrinkWidthPictureImageUpload'] : '',
                'empty_data' => intval('800'),
                'attr' => [
                    'title' => $this->__('Enter the shrink width picture image upload. Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkwidthpictureimageupload'
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('shrinkHeightPictureImageUpload', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink height picture image upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image height in pixels.')
                ],
                'help' => $this->__('The maximum image height in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkHeightPictureImageUpload']) ? $this->modVars['shrinkHeightPictureImageUpload'] : '',
                'empty_data' => intval('600'),
                'attr' => [
                    'title' => $this->__('Enter the shrink height picture image upload. Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkheightpictureimageupload'
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailModePictureImageUpload', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Thumbnail mode picture image upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail mode (inset or outbound).')
                ],
                'help' => $this->__('Thumbnail mode (inset or outbound).'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailModePictureImageUpload']) ? $this->modVars['thumbnailModePictureImageUpload'] : '',
                'empty_data' => 'inset',
                'attr' => [
                    'title' => $this->__('Choose the thumbnail mode picture image upload.')
                ],'choices' => [
                    $this->__('Inset') => 'inset'
                    ,$this->__('Outbound') => 'outbound'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('thumbnailWidthPictureImageUploadView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width picture image upload view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthPictureImageUploadView']) ? $this->modVars['thumbnailWidthPictureImageUploadView'] : '',
                'empty_data' => intval('32'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail width picture image upload view. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightPictureImageUploadView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height picture image upload view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightPictureImageUploadView']) ? $this->modVars['thumbnailHeightPictureImageUploadView'] : '',
                'empty_data' => intval('24'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail height picture image upload view. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthPictureImageUploadDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width picture image upload display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthPictureImageUploadDisplay']) ? $this->modVars['thumbnailWidthPictureImageUploadDisplay'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail width picture image upload display. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightPictureImageUploadDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height picture image upload display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightPictureImageUploadDisplay']) ? $this->modVars['thumbnailHeightPictureImageUploadDisplay'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail height picture image upload display. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthPictureImageUploadEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width picture image upload edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthPictureImageUploadEdit']) ? $this->modVars['thumbnailWidthPictureImageUploadEdit'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail width picture image upload edit. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightPictureImageUploadEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height picture image upload edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightPictureImageUploadEdit']) ? $this->modVars['thumbnailHeightPictureImageUploadEdit'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail height picture image upload edit. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('enableShrinkingForAvatarAvatarUpload', 'Symfony\Component\Form\Extension\Core\Type\CheckboxType', [
                'label' => $this->__('Enable shrinking for avatar avatar upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.')
                ],
                'help' => $this->__('Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.'),
                'required' => false,
                'data' => (bool)isset($this->modVars['enableShrinkingForAvatarAvatarUpload']) ? $this->modVars['enableShrinkingForAvatarAvatarUpload'] : '',
                'attr' => [
                    'title' => $this->__('The enable shrinking for avatar avatar upload option.'),
                    'class' => 'shrink-enabler'
                ],
            ])
            ->add('shrinkWidthAvatarAvatarUpload', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink width avatar avatar upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image width in pixels.')
                ],
                'help' => $this->__('The maximum image width in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkWidthAvatarAvatarUpload']) ? $this->modVars['shrinkWidthAvatarAvatarUpload'] : '',
                'empty_data' => intval('800'),
                'attr' => [
                    'title' => $this->__('Enter the shrink width avatar avatar upload. Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkwidthavataravatarupload'
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('shrinkHeightAvatarAvatarUpload', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Shrink height avatar avatar upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('The maximum image height in pixels.')
                ],
                'help' => $this->__('The maximum image height in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['shrinkHeightAvatarAvatarUpload']) ? $this->modVars['shrinkHeightAvatarAvatarUpload'] : '',
                'empty_data' => intval('600'),
                'attr' => [
                    'title' => $this->__('Enter the shrink height avatar avatar upload. Only digits are allowed.'),
                    'class' => 'shrinkdimension-shrinkheightavataravatarupload'
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailModeAvatarAvatarUpload', 'Symfony\Component\Form\Extension\Core\Type\ChoiceType', [
                'label' => $this->__('Thumbnail mode avatar avatar upload') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail mode (inset or outbound).')
                ],
                'help' => $this->__('Thumbnail mode (inset or outbound).'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailModeAvatarAvatarUpload']) ? $this->modVars['thumbnailModeAvatarAvatarUpload'] : '',
                'empty_data' => 'inset',
                'attr' => [
                    'title' => $this->__('Choose the thumbnail mode avatar avatar upload.')
                ],'choices' => [
                    $this->__('Inset') => 'inset'
                    ,$this->__('Outbound') => 'outbound'
                ],
                'choices_as_values' => true,
                'multiple' => false
            ])
            ->add('thumbnailWidthAvatarAvatarUploadView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width avatar avatar upload view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthAvatarAvatarUploadView']) ? $this->modVars['thumbnailWidthAvatarAvatarUploadView'] : '',
                'empty_data' => intval('32'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail width avatar avatar upload view. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightAvatarAvatarUploadView', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height avatar avatar upload view') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on view pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on view pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightAvatarAvatarUploadView']) ? $this->modVars['thumbnailHeightAvatarAvatarUploadView'] : '',
                'empty_data' => intval('24'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail height avatar avatar upload view. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthAvatarAvatarUploadDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width avatar avatar upload display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthAvatarAvatarUploadDisplay']) ? $this->modVars['thumbnailWidthAvatarAvatarUploadDisplay'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail width avatar avatar upload display. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightAvatarAvatarUploadDisplay', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height avatar avatar upload display') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on display pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on display pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightAvatarAvatarUploadDisplay']) ? $this->modVars['thumbnailHeightAvatarAvatarUploadDisplay'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail height avatar avatar upload display. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailWidthAvatarAvatarUploadEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail width avatar avatar upload edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail width on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail width on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailWidthAvatarAvatarUploadEdit']) ? $this->modVars['thumbnailWidthAvatarAvatarUploadEdit'] : '',
                'empty_data' => intval('240'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail width avatar avatar upload edit. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
            ->add('thumbnailHeightAvatarAvatarUploadEdit', 'Symfony\Component\Form\Extension\Core\Type\IntegerType', [
                'label' => $this->__('Thumbnail height avatar avatar upload edit') . ':',
                'label_attr' => [
                    'class' => 'tooltips',
                    'title' => $this->__('Thumbnail height on edit pages in pixels.')
                ],
                'help' => $this->__('Thumbnail height on edit pages in pixels.'),
                'required' => false,
                'data' => isset($this->modVars['thumbnailHeightAvatarAvatarUploadEdit']) ? $this->modVars['thumbnailHeightAvatarAvatarUploadEdit'] : '',
                'empty_data' => intval('180'),
                'attr' => [
                    'title' => $this->__('Enter the thumbnail height avatar avatar upload edit. Only digits are allowed.')
                ],'max_length' => 4,
                'scale' => 0,
                'input_group' => ['right' => $this->__('pixels')]
            ])
        ;
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return 'muimagemodule_appsettings';
    }
}
