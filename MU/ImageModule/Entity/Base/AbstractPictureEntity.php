<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ImageModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\HttpFoundation\File\File;
use Symfony\Component\Validator\Constraints as Assert;
use Zikula\Core\Doctrine\EntityAccess;
use MU\ImageModule\Traits\StandardFieldsTrait;
use MU\ImageModule\Validator\Constraints as ImageAssert;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for picture entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 */
abstract class AbstractPictureEntity extends EntityAccess
{
    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'picture';
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @ImageAssert\ListEntry(entityName="picture", propertyName="workflowState", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * Image upload meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageUploadMeta
     */
    protected $imageUploadMeta = [];
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @Assert\File(
     *    maxSize = "200k",
     *    mimeTypes = {"image/*"}
     * )
     * @Assert\Image(
     *    minWidth = 400,
     *    maxWidth = 1000,
     *    minHeight = 400,
     *    maxHeight = 1000
     * )
     * @var string $imageUpload
     */
    protected $imageUpload = null;
    
    /**
     * Full image upload path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUploadUrl
     */
    protected $imageUploadUrl = '';
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $imageView
     */
    protected $imageView = 0;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $albumImage
     */
    protected $albumImage = false;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $pos
     */
    protected $pos = 1;
    
    
    /**
     * Bidirectional - Many pictures [pictures] are linked by one album [album] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\ImageModule\Entity\AlbumEntity", inversedBy="pictures")
     * @ORM\JoinTable(name="mu_muimage_album")
     * @Assert\Type(type="MU\ImageModule\Entity\AlbumEntity")
     * @var \MU\ImageModule\Entity\AlbumEntity $album
     */
    protected $album;
    
    
    /**
     * PictureEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     */
    public function __construct()
    {
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        if ($this->_objectType != $_objectType) {
            $this->_objectType = $_objectType;
        }
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        if (intval($this->id) !== intval($id)) {
            $this->id = intval($id);
        }
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        if ($this->workflowState !== $workflowState) {
            $this->workflowState = isset($workflowState) ? $workflowState : '';
        }
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        if ($this->title !== $title) {
            $this->title = isset($title) ? $title : '';
        }
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        if ($this->description !== $description) {
            $this->description = isset($description) ? $description : '';
        }
    }
    
    /**
     * Returns the image upload.
     *
     * @return string
     */
    public function getImageUpload()
    {
        return $this->imageUpload;
    }
    
    /**
     * Sets the image upload.
     *
     * @param string $imageUpload
     *
     * @return void
     */
    public function setImageUpload($imageUpload)
    {
        if ($this->imageUpload !== $imageUpload) {
            $this->imageUpload = isset($imageUpload) ? $imageUpload : '';
        }
    }
    
    /**
     * Returns the image upload url.
     *
     * @return string
     */
    public function getImageUploadUrl()
    {
        return $this->imageUploadUrl;
    }
    
    /**
     * Sets the image upload url.
     *
     * @param string $imageUploadUrl
     *
     * @return void
     */
    public function setImageUploadUrl($imageUploadUrl)
    {
        if ($this->imageUploadUrl !== $imageUploadUrl) {
            $this->imageUploadUrl = isset($imageUploadUrl) ? $imageUploadUrl : '';
        }
    }
    
    /**
     * Returns the image upload meta.
     *
     * @return array
     */
    public function getImageUploadMeta()
    {
        return $this->imageUploadMeta;
    }
    
    /**
     * Sets the image upload meta.
     *
     * @param array $imageUploadMeta
     *
     * @return void
     */
    public function setImageUploadMeta($imageUploadMeta = [])
    {
        if ($this->imageUploadMeta !== $imageUploadMeta) {
            $this->imageUploadMeta = isset($imageUploadMeta) ? $imageUploadMeta : '';
        }
    }
    
    /**
     * Returns the image view.
     *
     * @return integer
     */
    public function getImageView()
    {
        return $this->imageView;
    }
    
    /**
     * Sets the image view.
     *
     * @param integer $imageView
     *
     * @return void
     */
    public function setImageView($imageView)
    {
        if (intval($this->imageView) !== intval($imageView)) {
            $this->imageView = intval($imageView);
        }
    }
    
    /**
     * Returns the album image.
     *
     * @return boolean
     */
    public function getAlbumImage()
    {
        return $this->albumImage;
    }
    
    /**
     * Sets the album image.
     *
     * @param boolean $albumImage
     *
     * @return void
     */
    public function setAlbumImage($albumImage)
    {
        if (boolval($this->albumImage) !== boolval($albumImage)) {
            $this->albumImage = boolval($albumImage);
        }
    }
    
    /**
     * Returns the pos.
     *
     * @return integer
     */
    public function getPos()
    {
        return $this->pos;
    }
    
    /**
     * Sets the pos.
     *
     * @param integer $pos
     *
     * @return void
     */
    public function setPos($pos)
    {
        if (intval($this->pos) !== intval($pos)) {
            $this->pos = intval($pos);
        }
    }
    
    
    /**
     * Returns the album.
     *
     * @return \MU\ImageModule\Entity\AlbumEntity
     */
    public function getAlbum()
    {
        return $this->album;
    }
    
    /**
     * Sets the album.
     *
     * @param \MU\ImageModule\Entity\AlbumEntity $album
     *
     * @return void
     */
    public function setAlbum($album = null)
    {
        $this->album = $album;
    }
    
    
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        return [
            'id' => $this->getId()
        ];
    }
    
    /**
     * Returns the primary key.
     *
     * @return integer The identifier
     */
    public function getKey()
    {
        return $this->getId();
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muimagemodule.ui_hooks.pictures';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Picture ' . $this->getKey() . ': ' . $this->getTitle();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!$this->id) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifier
        $this->setId(0);
    
        // reset workflow
        $this->setWorkflowState('initial');
    
        // reset upload fields
        $this->setImageUpload(null);
        $this->setImageUploadMeta([]);
        $this->setImageUploadUrl('');
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    }
}
