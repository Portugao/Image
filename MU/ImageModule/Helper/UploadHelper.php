<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ImageModule\Helper;

require 'vendor/autoload.php';

use MU\ImageModule\Helper\Base\AbstractUploadHelper;
//use Imagine\Gd\Imagine;
use Imagine\Imagick;
use Imagine\Imagick\Imagine;
use Imagine\Image\Box;
use Imagine\Image\Point;
use Psr\Log\LoggerInterface;

use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use Symfony\Component\HttpFoundation\Session\SessionInterface;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\UsersModule\Api\ApiInterface\CurrentUserApiInterface;

/**
 * Helper implementation class for upload handling.
 */
class UploadHelper extends AbstractUploadHelper
{		
	/**
	 * Process a file upload.
	 *
	 * @param string       $objectType Currently treated entity type
	 * @param UploadedFile $file       The uploaded file
	 * @param string       $fieldName  Name of upload field
	 *
	 * @return array Resulting file name and collected meta data
	 */
	public function performFileUpload($objectType, $file, $fieldName)
	{
		$result = parent::performFileUpload($objectType, $file, $fieldName);

		if ($this->moduleVars['createSeveralPictures'] == true && $objectType == 'picture')
		{
			$success = $this->createSeveralPictures($objectType, $fieldName, $result['fileName']);
		}
		if ($this->moduleVars['useWatermark'] == true && $objectType == 'picture')
		{
			$this->createWatermark($objectType, $fieldName, $fileName);
		}
	
		return $result;
	}
	
	/**
	 * 
	 */
    public function createSeveralPictures($objectType, $fieldName, $fileName)
    {
    		// retrieve the final file name
    		$fileNameParts = explode('.', $fileName);
    		$fileNamePartsWithoutExtension = array_slice($fileNameParts, 0, count($fileNameParts) - 1);
    		$fileNameWithoutExtension = implode('.', $fileNamePartsWithoutExtension);
    		
    		$basePath = $this->getFileBaseFolder($objectType, $fieldName);
    	
    		$imagine = new Imagine();
    		// we create the thumnail
    		$widthFirst = $this->moduleVars['firstWidth'];
    		$heightFirst = $this->moduleVars['firstHeight'];
    		if ($widthFirst > 0 && $heightFirst > 0) {
    			$nameForThumb = $fileNameWithoutExtension . '_tmb.jpg';
    			$imagine->open($basePath . $fileName)->thumbnail(new Box($widthFirst, $heightFirst), 'inset')->save($basePath . $nameForThumb);
    		}
    		if ($this->moduleVars['useWatermark'] == true)
    		{
    			$this->createWatermark($objectType, $fieldName, $nameForThumb);
    		}
    		// we create the preview
    		$widthSecond = $this->moduleVars['secondWidth'];
    		$heightSecond = $this->moduleVars['secondHeight'];
    		if ($widthSecond > 0 && $heightSecond > 0) {
    			$nameForThumb = $fileNameWithoutExtension . '_pre.jpg';
    			$imagine->open($basePath . $fileName)->thumbnail(new Box($widthSecond, $heightSecond), 'inset')->save($basePath . $nameForThumb);
    		}
    		if ($this->moduleVars['useWatermark'] == true)
    		{
    			$this->createWatermark($objectType, $fieldName, $nameForThumb);
    		}
    		// we create the full image
    		$widthThird = $this->moduleVars['thirdWidth'];
    		$heightThird = $this->moduleVars['thirdHeight'];
    		if ($widthThird > 0 && $heightThird > 0) {
    			$nameForThumb = $fileNameWithoutExtension . '_full.jpg';
    			$imagine->open($basePath . $fileName)->thumbnail(new Box($widthThird, $heightThird), 'inset')->save($basePath . $nameForThumb);
    		}
    		if ($this->moduleVars['useWatermark'] == true)
    		{
    			$this->createWatermark($objectType, $fieldName, $nameForThumb);
    		}

    	// collect data to return
    	//$result['fileName'] = $fileName;
    	//$result['metaData'] = $this->readMetaDataForFile($fileName, $basePath . $fileName);
    	return true;
    }
    
    protected function createWatermark($objectType, $fieldName, $fileName)
    {
    	$watermarkImage = $this->moduleVars['watermark'];
    	$basePath = $this->getFileBaseFolder($objectType, $fieldName);
    	
    	$imagine2 = new Imagine\Imagick\Imagine();
    	$watermark = $imagine2->open('http://zik15' . $watermarkImage);
    	$image     = $imagine2->open($basePath . $fileName);
    	$size      = $image->getSize();
    	$wSize     = $watermark->getSize();
    	
    	$bottomRight = new Imagine\Image\Point($size->getWidth() - $wSize->getWidth(), $size->getHeight() - $wSize->getHeight());
    	
    	$image->paste($watermark, $bottomRight);
    	
    	return true;

    }
}
