<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link https://ziku.la
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ImageModule\Base;

use Symfony\Component\Validator\Constraints as Assert;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use MU\ImageModule\Validator\Constraints as ImageAssert;

/**
 * Application settings class for handling module variables.
 */
abstract class AbstractAppSettings
{
    /**
     * @var VariableApiInterface
     */
    protected $variableApi;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $supportCategoriesForAlbums
     */
    protected $supportCategoriesForAlbums = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $supportCategoriesForAvatars
     */
    protected $supportCategoriesForAvatars = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $supportSubAlbums
     */
    protected $supportSubAlbums = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $userDeletePictures
     */
    protected $userDeletePictures = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $slideshow1
     */
    protected $slideshow1 = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $useAvatars
     */
    protected $useAvatars = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $useWatermark
     */
    protected $useWatermark = false;
    
    /**
     * Do you want to support sub albums?
     Do you want to limit creating of albums, subalbums or pictures?
     Do you want to set a group for common albums?
     Do you want to give the option to rule the access to albums?
     Do you want to use Categories for Albums or Avatars?
     
     Then you can enable these features here!
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $useExtendedFeatures
     */
    protected $useExtendedFeatures = false;
    
    /**
     * The amount of albums shown per page in the backend
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $albumEntriesPerPageInBackend
     */
    protected $albumEntriesPerPageInBackend = 10;
    
    /**
     * The amount of pictures shown per page in the backend
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $pictureEntriesPerPageInBackend
     */
    protected $pictureEntriesPerPageInBackend = 10;
    
    /**
     * The amount of avatars shown per page in the backend
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $avatarEntriesPerPageInBackend
     */
    protected $avatarEntriesPerPageInBackend = 10;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $countImageView
     */
    protected $countImageView = false;
    
    /**
     * @Assert\NotBlank()
     * @ImageAssert\ListEntry(entityName="appSettings", propertyName="groupForCommonAlbums", multiple=false)
     * @var string $groupForCommonAlbums
     */
    protected $groupForCommonAlbums = 'None';
    
    /**
     * @Assert\NotBlank()
     * @ImageAssert\ListEntry(entityName="appSettings", propertyName="kindOfShowSubAlbums", multiple=false)
     * @var string $kindOfShowSubAlbums
     */
    protected $kindOfShowSubAlbums = 'Panel';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $breadcrumbsInFrontend
     */
    protected $breadcrumbsInFrontend = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $endingOfUrl
     */
    protected $endingOfUrl = 'html';
    
    /**
     * How many main albums may a user create
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $numberParentAlbums
     */
    protected $numberParentAlbums = 1;
    
    /**
     * How many sub albums may a user create
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $numberSubAlbums
     */
    protected $numberSubAlbums = 2;
    
    /**
     * How many pictures may a user create
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $numberPictures
     */
    protected $numberPictures = 20;
    
    /**
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fileSizeForPictures
     */
    protected $fileSizeForPictures = '200k';
    
    /**
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fileSizeForAvatars
     */
    protected $fileSizeForAvatars = '200k';
    
    /**
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $fileSizesForZip
     */
    protected $fileSizesForZip = '2M';
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $minWidthForPictures
     */
    protected $minWidthForPictures = 400;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $maxWidthForPictures
     */
    protected $maxWidthForPictures = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $maxHeightForPictures
     */
    protected $maxHeightForPictures = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $minWidthForAvatars
     */
    protected $minWidthForAvatars = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $maxWidthForAvatars
     */
    protected $maxWidthForAvatars = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $maxHeightForAvatars
     */
    protected $maxHeightForAvatars = 0;
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $createSeveralPictures
     */
    protected $createSeveralPictures = false;
    
    /**
     * Width for the first additional picture
     *
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $firstWidth
     */
    protected $firstWidth = 0;
    
    /**
     * Height for the first additional picture
     *
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $firstHeight
     */
    protected $firstHeight = 0;
    
    /**
     * Width for the second additional picture
     *
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $secondWidth
     */
    protected $secondWidth = 0;
    
    /**
     * Height for the second additional picture
     *
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $secondHeight
     */
    protected $secondHeight = 0;
    
    /**
     * Width for the third additional picture
     *
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $thirdWidth
     */
    protected $thirdWidth = 0;
    
    /**
     * Height for the third additional picture
     *
     * @Assert\Type(type="integer")
     * @Assert\LessThan(value=100000000000)
     * @var integer $thirdHeight
     */
    protected $thirdHeight = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $slide1Interval
     */
    protected $slide1Interval = 4000;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $slide1Speed
     */
    protected $slide1Speed = 1000;
    
    /**
     * Here you can set, how many avatar sizes with which name you wish.
     *
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $numberWidthAndNameOfAvatars
     */
    protected $numberWidthAndNameOfAvatars = '200,thumb;400,view;600,normal';
    
    /**
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $shrink
     */
    protected $shrink = false;
    
    /**
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $watermark
     */
    protected $watermark = '';
    
    /**
     * If top is set, bottom has no effect
     *
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $bottomOfImage
     */
    protected $bottomOfImage = 0;
    
    /**
     * If left is set, right has no effect
     *
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $leftSide
     */
    protected $leftSide = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $rightSide
     */
    protected $rightSide = 0;
    
    /**
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=100000000000)
     * @var integer $topOfImage
     */
    protected $topOfImage = 0;
    
    /**
     * The amount of albums shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $albumEntriesPerPage
     */
    protected $albumEntriesPerPage = 10;
    
    /**
     * Whether to add a link to albums of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnAlbumsOnAccountPage
     */
    protected $linkOwnAlbumsOnAccountPage = true;
    
    /**
     * The amount of pictures shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $pictureEntriesPerPage
     */
    protected $pictureEntriesPerPage = 10;
    
    /**
     * Whether to add a link to pictures of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnPicturesOnAccountPage
     */
    protected $linkOwnPicturesOnAccountPage = true;
    
    /**
     * The amount of avatars shown per page
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $avatarEntriesPerPage
     */
    protected $avatarEntriesPerPage = 10;
    
    /**
     * Whether to add a link to avatars of the current user on his account page
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $linkOwnAvatarsOnAccountPage
     */
    protected $linkOwnAvatarsOnAccountPage = true;
    
    /**
     * Whether only own entries should be shown on view pages by default or not
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showOnlyOwnEntries
     */
    protected $showOnlyOwnEntries = false;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForPictureImageUpload
     */
    protected $enableShrinkingForPictureImageUpload = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthPictureImageUpload
     */
    protected $shrinkWidthPictureImageUpload = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightPictureImageUpload
     */
    protected $shrinkHeightPictureImageUpload = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @ImageAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModePictureImageUpload", multiple=false)
     * @var string $thumbnailModePictureImageUpload
     */
    protected $thumbnailModePictureImageUpload = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPictureImageUploadView
     */
    protected $thumbnailWidthPictureImageUploadView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPictureImageUploadView
     */
    protected $thumbnailHeightPictureImageUploadView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPictureImageUploadDisplay
     */
    protected $thumbnailWidthPictureImageUploadDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPictureImageUploadDisplay
     */
    protected $thumbnailHeightPictureImageUploadDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthPictureImageUploadEdit
     */
    protected $thumbnailWidthPictureImageUploadEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightPictureImageUploadEdit
     */
    protected $thumbnailHeightPictureImageUploadEdit = 180;
    
    /**
     * Whether to enable shrinking huge images to maximum dimensions. Stores downscaled version of the original image.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $enableShrinkingForAvatarAvatarUpload
     */
    protected $enableShrinkingForAvatarAvatarUpload = false;
    
    /**
     * The maximum image width in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkWidthAvatarAvatarUpload
     */
    protected $shrinkWidthAvatarAvatarUpload = 800;
    
    /**
     * The maximum image height in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $shrinkHeightAvatarAvatarUpload
     */
    protected $shrinkHeightAvatarAvatarUpload = 600;
    
    /**
     * Thumbnail mode (inset or outbound).
     *
     * @Assert\NotBlank()
     * @ImageAssert\ListEntry(entityName="appSettings", propertyName="thumbnailModeAvatarAvatarUpload", multiple=false)
     * @var string $thumbnailModeAvatarAvatarUpload
     */
    protected $thumbnailModeAvatarAvatarUpload = 'inset';
    
    /**
     * Thumbnail width on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthAvatarAvatarUploadView
     */
    protected $thumbnailWidthAvatarAvatarUploadView = 32;
    
    /**
     * Thumbnail height on view pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightAvatarAvatarUploadView
     */
    protected $thumbnailHeightAvatarAvatarUploadView = 24;
    
    /**
     * Thumbnail width on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthAvatarAvatarUploadDisplay
     */
    protected $thumbnailWidthAvatarAvatarUploadDisplay = 240;
    
    /**
     * Thumbnail height on display pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightAvatarAvatarUploadDisplay
     */
    protected $thumbnailHeightAvatarAvatarUploadDisplay = 180;
    
    /**
     * Thumbnail width on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailWidthAvatarAvatarUploadEdit
     */
    protected $thumbnailWidthAvatarAvatarUploadEdit = 240;
    
    /**
     * Thumbnail height on edit pages in pixels.
     *
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=100000000000)
     * @var integer $thumbnailHeightAvatarAvatarUploadEdit
     */
    protected $thumbnailHeightAvatarAvatarUploadEdit = 180;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForAlbum
     */
    protected $allowModerationSpecificCreatorForAlbum = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForAlbum
     */
    protected $allowModerationSpecificCreationDateForAlbum = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForPicture
     */
    protected $allowModerationSpecificCreatorForPicture = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForPicture
     */
    protected $allowModerationSpecificCreationDateForPicture = false;
    
    /**
     * Whether to allow moderators choosing a user which will be set as creator.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreatorForAvatar
     */
    protected $allowModerationSpecificCreatorForAvatar = false;
    
    /**
     * Whether to allow moderators choosing a custom creation date.
     *
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $allowModerationSpecificCreationDateForAvatar
     */
    protected $allowModerationSpecificCreationDateForAvatar = false;
    
    /**
     * Which sections are supported in the Finder component (used by Scribite plug-ins).
     *
     * @Assert\NotNull()
     * @ImageAssert\ListEntry(entityName="appSettings", propertyName="enabledFinderTypes", multiple=true)
     * @var string $enabledFinderTypes
     */
    protected $enabledFinderTypes = 'album###picture###avatar';
    
    
    /**
     * AppSettings constructor.
     *
     * @param VariableApiInterface $variableApi VariableApi service instance
     */
    public function __construct(
        VariableApiInterface $variableApi
    ) {
        $this->variableApi = $variableApi;
    
        $this->load();
    }
    
    /**
     * Returns the support categories for albums.
     *
     * @return boolean
     */
    public function getSupportCategoriesForAlbums()
    {
        return $this->supportCategoriesForAlbums;
    }
    
    /**
     * Sets the support categories for albums.
     *
     * @param boolean $supportCategoriesForAlbums
     *
     * @return void
     */
    public function setSupportCategoriesForAlbums($supportCategoriesForAlbums)
    {
        if (boolval($this->supportCategoriesForAlbums) !== boolval($supportCategoriesForAlbums)) {
            $this->supportCategoriesForAlbums = boolval($supportCategoriesForAlbums);
        }
    }
    
    /**
     * Returns the support categories for avatars.
     *
     * @return boolean
     */
    public function getSupportCategoriesForAvatars()
    {
        return $this->supportCategoriesForAvatars;
    }
    
    /**
     * Sets the support categories for avatars.
     *
     * @param boolean $supportCategoriesForAvatars
     *
     * @return void
     */
    public function setSupportCategoriesForAvatars($supportCategoriesForAvatars)
    {
        if (boolval($this->supportCategoriesForAvatars) !== boolval($supportCategoriesForAvatars)) {
            $this->supportCategoriesForAvatars = boolval($supportCategoriesForAvatars);
        }
    }
    
    /**
     * Returns the support sub albums.
     *
     * @return boolean
     */
    public function getSupportSubAlbums()
    {
        return $this->supportSubAlbums;
    }
    
    /**
     * Sets the support sub albums.
     *
     * @param boolean $supportSubAlbums
     *
     * @return void
     */
    public function setSupportSubAlbums($supportSubAlbums)
    {
        if (boolval($this->supportSubAlbums) !== boolval($supportSubAlbums)) {
            $this->supportSubAlbums = boolval($supportSubAlbums);
        }
    }
    
    /**
     * Returns the user delete pictures.
     *
     * @return boolean
     */
    public function getUserDeletePictures()
    {
        return $this->userDeletePictures;
    }
    
    /**
     * Sets the user delete pictures.
     *
     * @param boolean $userDeletePictures
     *
     * @return void
     */
    public function setUserDeletePictures($userDeletePictures)
    {
        if (boolval($this->userDeletePictures) !== boolval($userDeletePictures)) {
            $this->userDeletePictures = boolval($userDeletePictures);
        }
    }
    
    /**
     * Returns the slideshow 1.
     *
     * @return boolean
     */
    public function getSlideshow1()
    {
        return $this->slideshow1;
    }
    
    /**
     * Sets the slideshow 1.
     *
     * @param boolean $slideshow1
     *
     * @return void
     */
    public function setSlideshow1($slideshow1)
    {
        if (boolval($this->slideshow1) !== boolval($slideshow1)) {
            $this->slideshow1 = boolval($slideshow1);
        }
    }
    
    /**
     * Returns the use avatars.
     *
     * @return boolean
     */
    public function getUseAvatars()
    {
        return $this->useAvatars;
    }
    
    /**
     * Sets the use avatars.
     *
     * @param boolean $useAvatars
     *
     * @return void
     */
    public function setUseAvatars($useAvatars)
    {
        if (boolval($this->useAvatars) !== boolval($useAvatars)) {
            $this->useAvatars = boolval($useAvatars);
        }
    }
    
    /**
     * Returns the use watermark.
     *
     * @return boolean
     */
    public function getUseWatermark()
    {
        return $this->useWatermark;
    }
    
    /**
     * Sets the use watermark.
     *
     * @param boolean $useWatermark
     *
     * @return void
     */
    public function setUseWatermark($useWatermark)
    {
        if (boolval($this->useWatermark) !== boolval($useWatermark)) {
            $this->useWatermark = boolval($useWatermark);
        }
    }
    
    /**
     * Returns the use extended features.
     *
     * @return boolean
     */
    public function getUseExtendedFeatures()
    {
        return $this->useExtendedFeatures;
    }
    
    /**
     * Sets the use extended features.
     *
     * @param boolean $useExtendedFeatures
     *
     * @return void
     */
    public function setUseExtendedFeatures($useExtendedFeatures)
    {
        if (boolval($this->useExtendedFeatures) !== boolval($useExtendedFeatures)) {
            $this->useExtendedFeatures = boolval($useExtendedFeatures);
        }
    }
    
    /**
     * Returns the album entries per page in backend.
     *
     * @return integer
     */
    public function getAlbumEntriesPerPageInBackend()
    {
        return $this->albumEntriesPerPageInBackend;
    }
    
    /**
     * Sets the album entries per page in backend.
     *
     * @param integer $albumEntriesPerPageInBackend
     *
     * @return void
     */
    public function setAlbumEntriesPerPageInBackend($albumEntriesPerPageInBackend)
    {
        if (intval($this->albumEntriesPerPageInBackend) !== intval($albumEntriesPerPageInBackend)) {
            $this->albumEntriesPerPageInBackend = intval($albumEntriesPerPageInBackend);
        }
    }
    
    /**
     * Returns the picture entries per page in backend.
     *
     * @return integer
     */
    public function getPictureEntriesPerPageInBackend()
    {
        return $this->pictureEntriesPerPageInBackend;
    }
    
    /**
     * Sets the picture entries per page in backend.
     *
     * @param integer $pictureEntriesPerPageInBackend
     *
     * @return void
     */
    public function setPictureEntriesPerPageInBackend($pictureEntriesPerPageInBackend)
    {
        if (intval($this->pictureEntriesPerPageInBackend) !== intval($pictureEntriesPerPageInBackend)) {
            $this->pictureEntriesPerPageInBackend = intval($pictureEntriesPerPageInBackend);
        }
    }
    
    /**
     * Returns the avatar entries per page in backend.
     *
     * @return integer
     */
    public function getAvatarEntriesPerPageInBackend()
    {
        return $this->avatarEntriesPerPageInBackend;
    }
    
    /**
     * Sets the avatar entries per page in backend.
     *
     * @param integer $avatarEntriesPerPageInBackend
     *
     * @return void
     */
    public function setAvatarEntriesPerPageInBackend($avatarEntriesPerPageInBackend)
    {
        if (intval($this->avatarEntriesPerPageInBackend) !== intval($avatarEntriesPerPageInBackend)) {
            $this->avatarEntriesPerPageInBackend = intval($avatarEntriesPerPageInBackend);
        }
    }
    
    /**
     * Returns the count image view.
     *
     * @return boolean
     */
    public function getCountImageView()
    {
        return $this->countImageView;
    }
    
    /**
     * Sets the count image view.
     *
     * @param boolean $countImageView
     *
     * @return void
     */
    public function setCountImageView($countImageView)
    {
        if (boolval($this->countImageView) !== boolval($countImageView)) {
            $this->countImageView = boolval($countImageView);
        }
    }
    
    /**
     * Returns the group for common albums.
     *
     * @return string
     */
    public function getGroupForCommonAlbums()
    {
        return $this->groupForCommonAlbums;
    }
    
    /**
     * Sets the group for common albums.
     *
     * @param string $groupForCommonAlbums
     *
     * @return void
     */
    public function setGroupForCommonAlbums($groupForCommonAlbums)
    {
        if ($this->groupForCommonAlbums !== $groupForCommonAlbums) {
            $this->groupForCommonAlbums = isset($groupForCommonAlbums) ? $groupForCommonAlbums : '';
        }
    }
    
    /**
     * Returns the kind of show sub albums.
     *
     * @return string
     */
    public function getKindOfShowSubAlbums()
    {
        return $this->kindOfShowSubAlbums;
    }
    
    /**
     * Sets the kind of show sub albums.
     *
     * @param string $kindOfShowSubAlbums
     *
     * @return void
     */
    public function setKindOfShowSubAlbums($kindOfShowSubAlbums)
    {
        if ($this->kindOfShowSubAlbums !== $kindOfShowSubAlbums) {
            $this->kindOfShowSubAlbums = isset($kindOfShowSubAlbums) ? $kindOfShowSubAlbums : '';
        }
    }
    
    /**
     * Returns the breadcrumbs in frontend.
     *
     * @return boolean
     */
    public function getBreadcrumbsInFrontend()
    {
        return $this->breadcrumbsInFrontend;
    }
    
    /**
     * Sets the breadcrumbs in frontend.
     *
     * @param boolean $breadcrumbsInFrontend
     *
     * @return void
     */
    public function setBreadcrumbsInFrontend($breadcrumbsInFrontend)
    {
        if (boolval($this->breadcrumbsInFrontend) !== boolval($breadcrumbsInFrontend)) {
            $this->breadcrumbsInFrontend = boolval($breadcrumbsInFrontend);
        }
    }
    
    /**
     * Returns the ending of url.
     *
     * @return string
     */
    public function getEndingOfUrl()
    {
        return $this->endingOfUrl;
    }
    
    /**
     * Sets the ending of url.
     *
     * @param string $endingOfUrl
     *
     * @return void
     */
    public function setEndingOfUrl($endingOfUrl)
    {
        if ($this->endingOfUrl !== $endingOfUrl) {
            $this->endingOfUrl = isset($endingOfUrl) ? $endingOfUrl : '';
        }
    }
    
    /**
     * Returns the number parent albums.
     *
     * @return integer
     */
    public function getNumberParentAlbums()
    {
        return $this->numberParentAlbums;
    }
    
    /**
     * Sets the number parent albums.
     *
     * @param integer $numberParentAlbums
     *
     * @return void
     */
    public function setNumberParentAlbums($numberParentAlbums)
    {
        if (intval($this->numberParentAlbums) !== intval($numberParentAlbums)) {
            $this->numberParentAlbums = intval($numberParentAlbums);
        }
    }
    
    /**
     * Returns the number sub albums.
     *
     * @return integer
     */
    public function getNumberSubAlbums()
    {
        return $this->numberSubAlbums;
    }
    
    /**
     * Sets the number sub albums.
     *
     * @param integer $numberSubAlbums
     *
     * @return void
     */
    public function setNumberSubAlbums($numberSubAlbums)
    {
        if (intval($this->numberSubAlbums) !== intval($numberSubAlbums)) {
            $this->numberSubAlbums = intval($numberSubAlbums);
        }
    }
    
    /**
     * Returns the number pictures.
     *
     * @return integer
     */
    public function getNumberPictures()
    {
        return $this->numberPictures;
    }
    
    /**
     * Sets the number pictures.
     *
     * @param integer $numberPictures
     *
     * @return void
     */
    public function setNumberPictures($numberPictures)
    {
        if (intval($this->numberPictures) !== intval($numberPictures)) {
            $this->numberPictures = intval($numberPictures);
        }
    }
    
    /**
     * Returns the file size for pictures.
     *
     * @return string
     */
    public function getFileSizeForPictures()
    {
        return $this->fileSizeForPictures;
    }
    
    /**
     * Sets the file size for pictures.
     *
     * @param string $fileSizeForPictures
     *
     * @return void
     */
    public function setFileSizeForPictures($fileSizeForPictures)
    {
        if ($this->fileSizeForPictures !== $fileSizeForPictures) {
            $this->fileSizeForPictures = isset($fileSizeForPictures) ? $fileSizeForPictures : '';
        }
    }
    
    /**
     * Returns the file size for avatars.
     *
     * @return string
     */
    public function getFileSizeForAvatars()
    {
        return $this->fileSizeForAvatars;
    }
    
    /**
     * Sets the file size for avatars.
     *
     * @param string $fileSizeForAvatars
     *
     * @return void
     */
    public function setFileSizeForAvatars($fileSizeForAvatars)
    {
        if ($this->fileSizeForAvatars !== $fileSizeForAvatars) {
            $this->fileSizeForAvatars = isset($fileSizeForAvatars) ? $fileSizeForAvatars : '';
        }
    }
    
    /**
     * Returns the file sizes for zip.
     *
     * @return string
     */
    public function getFileSizesForZip()
    {
        return $this->fileSizesForZip;
    }
    
    /**
     * Sets the file sizes for zip.
     *
     * @param string $fileSizesForZip
     *
     * @return void
     */
    public function setFileSizesForZip($fileSizesForZip)
    {
        if ($this->fileSizesForZip !== $fileSizesForZip) {
            $this->fileSizesForZip = isset($fileSizesForZip) ? $fileSizesForZip : '';
        }
    }
    
    /**
     * Returns the min width for pictures.
     *
     * @return integer
     */
    public function getMinWidthForPictures()
    {
        return $this->minWidthForPictures;
    }
    
    /**
     * Sets the min width for pictures.
     *
     * @param integer $minWidthForPictures
     *
     * @return void
     */
    public function setMinWidthForPictures($minWidthForPictures)
    {
        if (intval($this->minWidthForPictures) !== intval($minWidthForPictures)) {
            $this->minWidthForPictures = intval($minWidthForPictures);
        }
    }
    
    /**
     * Returns the max width for pictures.
     *
     * @return integer
     */
    public function getMaxWidthForPictures()
    {
        return $this->maxWidthForPictures;
    }
    
    /**
     * Sets the max width for pictures.
     *
     * @param integer $maxWidthForPictures
     *
     * @return void
     */
    public function setMaxWidthForPictures($maxWidthForPictures)
    {
        if (intval($this->maxWidthForPictures) !== intval($maxWidthForPictures)) {
            $this->maxWidthForPictures = intval($maxWidthForPictures);
        }
    }
    
    /**
     * Returns the max height for pictures.
     *
     * @return integer
     */
    public function getMaxHeightForPictures()
    {
        return $this->maxHeightForPictures;
    }
    
    /**
     * Sets the max height for pictures.
     *
     * @param integer $maxHeightForPictures
     *
     * @return void
     */
    public function setMaxHeightForPictures($maxHeightForPictures)
    {
        if (intval($this->maxHeightForPictures) !== intval($maxHeightForPictures)) {
            $this->maxHeightForPictures = intval($maxHeightForPictures);
        }
    }
    
    /**
     * Returns the min width for avatars.
     *
     * @return integer
     */
    public function getMinWidthForAvatars()
    {
        return $this->minWidthForAvatars;
    }
    
    /**
     * Sets the min width for avatars.
     *
     * @param integer $minWidthForAvatars
     *
     * @return void
     */
    public function setMinWidthForAvatars($minWidthForAvatars)
    {
        if (intval($this->minWidthForAvatars) !== intval($minWidthForAvatars)) {
            $this->minWidthForAvatars = intval($minWidthForAvatars);
        }
    }
    
    /**
     * Returns the max width for avatars.
     *
     * @return integer
     */
    public function getMaxWidthForAvatars()
    {
        return $this->maxWidthForAvatars;
    }
    
    /**
     * Sets the max width for avatars.
     *
     * @param integer $maxWidthForAvatars
     *
     * @return void
     */
    public function setMaxWidthForAvatars($maxWidthForAvatars)
    {
        if (intval($this->maxWidthForAvatars) !== intval($maxWidthForAvatars)) {
            $this->maxWidthForAvatars = intval($maxWidthForAvatars);
        }
    }
    
    /**
     * Returns the max height for avatars.
     *
     * @return integer
     */
    public function getMaxHeightForAvatars()
    {
        return $this->maxHeightForAvatars;
    }
    
    /**
     * Sets the max height for avatars.
     *
     * @param integer $maxHeightForAvatars
     *
     * @return void
     */
    public function setMaxHeightForAvatars($maxHeightForAvatars)
    {
        if (intval($this->maxHeightForAvatars) !== intval($maxHeightForAvatars)) {
            $this->maxHeightForAvatars = intval($maxHeightForAvatars);
        }
    }
    
    /**
     * Returns the create several pictures.
     *
     * @return boolean
     */
    public function getCreateSeveralPictures()
    {
        return $this->createSeveralPictures;
    }
    
    /**
     * Sets the create several pictures.
     *
     * @param boolean $createSeveralPictures
     *
     * @return void
     */
    public function setCreateSeveralPictures($createSeveralPictures)
    {
        if (boolval($this->createSeveralPictures) !== boolval($createSeveralPictures)) {
            $this->createSeveralPictures = boolval($createSeveralPictures);
        }
    }
    
    /**
     * Returns the first width.
     *
     * @return integer
     */
    public function getFirstWidth()
    {
        return $this->firstWidth;
    }
    
    /**
     * Sets the first width.
     *
     * @param integer $firstWidth
     *
     * @return void
     */
    public function setFirstWidth($firstWidth)
    {
        if (intval($this->firstWidth) !== intval($firstWidth)) {
            $this->firstWidth = intval($firstWidth);
        }
    }
    
    /**
     * Returns the first height.
     *
     * @return integer
     */
    public function getFirstHeight()
    {
        return $this->firstHeight;
    }
    
    /**
     * Sets the first height.
     *
     * @param integer $firstHeight
     *
     * @return void
     */
    public function setFirstHeight($firstHeight)
    {
        if (intval($this->firstHeight) !== intval($firstHeight)) {
            $this->firstHeight = intval($firstHeight);
        }
    }
    
    /**
     * Returns the second width.
     *
     * @return integer
     */
    public function getSecondWidth()
    {
        return $this->secondWidth;
    }
    
    /**
     * Sets the second width.
     *
     * @param integer $secondWidth
     *
     * @return void
     */
    public function setSecondWidth($secondWidth)
    {
        if (intval($this->secondWidth) !== intval($secondWidth)) {
            $this->secondWidth = intval($secondWidth);
        }
    }
    
    /**
     * Returns the second height.
     *
     * @return integer
     */
    public function getSecondHeight()
    {
        return $this->secondHeight;
    }
    
    /**
     * Sets the second height.
     *
     * @param integer $secondHeight
     *
     * @return void
     */
    public function setSecondHeight($secondHeight)
    {
        if (intval($this->secondHeight) !== intval($secondHeight)) {
            $this->secondHeight = intval($secondHeight);
        }
    }
    
    /**
     * Returns the third width.
     *
     * @return integer
     */
    public function getThirdWidth()
    {
        return $this->thirdWidth;
    }
    
    /**
     * Sets the third width.
     *
     * @param integer $thirdWidth
     *
     * @return void
     */
    public function setThirdWidth($thirdWidth)
    {
        if (intval($this->thirdWidth) !== intval($thirdWidth)) {
            $this->thirdWidth = intval($thirdWidth);
        }
    }
    
    /**
     * Returns the third height.
     *
     * @return integer
     */
    public function getThirdHeight()
    {
        return $this->thirdHeight;
    }
    
    /**
     * Sets the third height.
     *
     * @param integer $thirdHeight
     *
     * @return void
     */
    public function setThirdHeight($thirdHeight)
    {
        if (intval($this->thirdHeight) !== intval($thirdHeight)) {
            $this->thirdHeight = intval($thirdHeight);
        }
    }
    
    /**
     * Returns the slide 1 interval.
     *
     * @return integer
     */
    public function getSlide1Interval()
    {
        return $this->slide1Interval;
    }
    
    /**
     * Sets the slide 1 interval.
     *
     * @param integer $slide1Interval
     *
     * @return void
     */
    public function setSlide1Interval($slide1Interval)
    {
        if (intval($this->slide1Interval) !== intval($slide1Interval)) {
            $this->slide1Interval = intval($slide1Interval);
        }
    }
    
    /**
     * Returns the slide 1 speed.
     *
     * @return integer
     */
    public function getSlide1Speed()
    {
        return $this->slide1Speed;
    }
    
    /**
     * Sets the slide 1 speed.
     *
     * @param integer $slide1Speed
     *
     * @return void
     */
    public function setSlide1Speed($slide1Speed)
    {
        if (intval($this->slide1Speed) !== intval($slide1Speed)) {
            $this->slide1Speed = intval($slide1Speed);
        }
    }
    
    /**
     * Returns the number width and name of avatars.
     *
     * @return string
     */
    public function getNumberWidthAndNameOfAvatars()
    {
        return $this->numberWidthAndNameOfAvatars;
    }
    
    /**
     * Sets the number width and name of avatars.
     *
     * @param string $numberWidthAndNameOfAvatars
     *
     * @return void
     */
    public function setNumberWidthAndNameOfAvatars($numberWidthAndNameOfAvatars)
    {
        if ($this->numberWidthAndNameOfAvatars !== $numberWidthAndNameOfAvatars) {
            $this->numberWidthAndNameOfAvatars = isset($numberWidthAndNameOfAvatars) ? $numberWidthAndNameOfAvatars : '';
        }
    }
    
    /**
     * Returns the shrink.
     *
     * @return boolean
     */
    public function getShrink()
    {
        return $this->shrink;
    }
    
    /**
     * Sets the shrink.
     *
     * @param boolean $shrink
     *
     * @return void
     */
    public function setShrink($shrink)
    {
        if (boolval($this->shrink) !== boolval($shrink)) {
            $this->shrink = boolval($shrink);
        }
    }
    
    /**
     * Returns the watermark.
     *
     * @return string
     */
    public function getWatermark()
    {
        return $this->watermark;
    }
    
    /**
     * Sets the watermark.
     *
     * @param string $watermark
     *
     * @return void
     */
    public function setWatermark($watermark)
    {
        if ($this->watermark !== $watermark) {
            $this->watermark = isset($watermark) ? $watermark : '';
        }
    }
    
    /**
     * Returns the bottom of image.
     *
     * @return integer
     */
    public function getBottomOfImage()
    {
        return $this->bottomOfImage;
    }
    
    /**
     * Sets the bottom of image.
     *
     * @param integer $bottomOfImage
     *
     * @return void
     */
    public function setBottomOfImage($bottomOfImage)
    {
        if (intval($this->bottomOfImage) !== intval($bottomOfImage)) {
            $this->bottomOfImage = intval($bottomOfImage);
        }
    }
    
    /**
     * Returns the left side.
     *
     * @return integer
     */
    public function getLeftSide()
    {
        return $this->leftSide;
    }
    
    /**
     * Sets the left side.
     *
     * @param integer $leftSide
     *
     * @return void
     */
    public function setLeftSide($leftSide)
    {
        if (intval($this->leftSide) !== intval($leftSide)) {
            $this->leftSide = intval($leftSide);
        }
    }
    
    /**
     * Returns the right side.
     *
     * @return integer
     */
    public function getRightSide()
    {
        return $this->rightSide;
    }
    
    /**
     * Sets the right side.
     *
     * @param integer $rightSide
     *
     * @return void
     */
    public function setRightSide($rightSide)
    {
        if (intval($this->rightSide) !== intval($rightSide)) {
            $this->rightSide = intval($rightSide);
        }
    }
    
    /**
     * Returns the top of image.
     *
     * @return integer
     */
    public function getTopOfImage()
    {
        return $this->topOfImage;
    }
    
    /**
     * Sets the top of image.
     *
     * @param integer $topOfImage
     *
     * @return void
     */
    public function setTopOfImage($topOfImage)
    {
        if (intval($this->topOfImage) !== intval($topOfImage)) {
            $this->topOfImage = intval($topOfImage);
        }
    }
    
    /**
     * Returns the album entries per page.
     *
     * @return integer
     */
    public function getAlbumEntriesPerPage()
    {
        return $this->albumEntriesPerPage;
    }
    
    /**
     * Sets the album entries per page.
     *
     * @param integer $albumEntriesPerPage
     *
     * @return void
     */
    public function setAlbumEntriesPerPage($albumEntriesPerPage)
    {
        if (intval($this->albumEntriesPerPage) !== intval($albumEntriesPerPage)) {
            $this->albumEntriesPerPage = intval($albumEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own albums on account page.
     *
     * @return boolean
     */
    public function getLinkOwnAlbumsOnAccountPage()
    {
        return $this->linkOwnAlbumsOnAccountPage;
    }
    
    /**
     * Sets the link own albums on account page.
     *
     * @param boolean $linkOwnAlbumsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnAlbumsOnAccountPage($linkOwnAlbumsOnAccountPage)
    {
        if (boolval($this->linkOwnAlbumsOnAccountPage) !== boolval($linkOwnAlbumsOnAccountPage)) {
            $this->linkOwnAlbumsOnAccountPage = boolval($linkOwnAlbumsOnAccountPage);
        }
    }
    
    /**
     * Returns the picture entries per page.
     *
     * @return integer
     */
    public function getPictureEntriesPerPage()
    {
        return $this->pictureEntriesPerPage;
    }
    
    /**
     * Sets the picture entries per page.
     *
     * @param integer $pictureEntriesPerPage
     *
     * @return void
     */
    public function setPictureEntriesPerPage($pictureEntriesPerPage)
    {
        if (intval($this->pictureEntriesPerPage) !== intval($pictureEntriesPerPage)) {
            $this->pictureEntriesPerPage = intval($pictureEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own pictures on account page.
     *
     * @return boolean
     */
    public function getLinkOwnPicturesOnAccountPage()
    {
        return $this->linkOwnPicturesOnAccountPage;
    }
    
    /**
     * Sets the link own pictures on account page.
     *
     * @param boolean $linkOwnPicturesOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnPicturesOnAccountPage($linkOwnPicturesOnAccountPage)
    {
        if (boolval($this->linkOwnPicturesOnAccountPage) !== boolval($linkOwnPicturesOnAccountPage)) {
            $this->linkOwnPicturesOnAccountPage = boolval($linkOwnPicturesOnAccountPage);
        }
    }
    
    /**
     * Returns the avatar entries per page.
     *
     * @return integer
     */
    public function getAvatarEntriesPerPage()
    {
        return $this->avatarEntriesPerPage;
    }
    
    /**
     * Sets the avatar entries per page.
     *
     * @param integer $avatarEntriesPerPage
     *
     * @return void
     */
    public function setAvatarEntriesPerPage($avatarEntriesPerPage)
    {
        if (intval($this->avatarEntriesPerPage) !== intval($avatarEntriesPerPage)) {
            $this->avatarEntriesPerPage = intval($avatarEntriesPerPage);
        }
    }
    
    /**
     * Returns the link own avatars on account page.
     *
     * @return boolean
     */
    public function getLinkOwnAvatarsOnAccountPage()
    {
        return $this->linkOwnAvatarsOnAccountPage;
    }
    
    /**
     * Sets the link own avatars on account page.
     *
     * @param boolean $linkOwnAvatarsOnAccountPage
     *
     * @return void
     */
    public function setLinkOwnAvatarsOnAccountPage($linkOwnAvatarsOnAccountPage)
    {
        if (boolval($this->linkOwnAvatarsOnAccountPage) !== boolval($linkOwnAvatarsOnAccountPage)) {
            $this->linkOwnAvatarsOnAccountPage = boolval($linkOwnAvatarsOnAccountPage);
        }
    }
    
    /**
     * Returns the show only own entries.
     *
     * @return boolean
     */
    public function getShowOnlyOwnEntries()
    {
        return $this->showOnlyOwnEntries;
    }
    
    /**
     * Sets the show only own entries.
     *
     * @param boolean $showOnlyOwnEntries
     *
     * @return void
     */
    public function setShowOnlyOwnEntries($showOnlyOwnEntries)
    {
        if (boolval($this->showOnlyOwnEntries) !== boolval($showOnlyOwnEntries)) {
            $this->showOnlyOwnEntries = boolval($showOnlyOwnEntries);
        }
    }
    
    /**
     * Returns the enable shrinking for picture image upload.
     *
     * @return boolean
     */
    public function getEnableShrinkingForPictureImageUpload()
    {
        return $this->enableShrinkingForPictureImageUpload;
    }
    
    /**
     * Sets the enable shrinking for picture image upload.
     *
     * @param boolean $enableShrinkingForPictureImageUpload
     *
     * @return void
     */
    public function setEnableShrinkingForPictureImageUpload($enableShrinkingForPictureImageUpload)
    {
        if (boolval($this->enableShrinkingForPictureImageUpload) !== boolval($enableShrinkingForPictureImageUpload)) {
            $this->enableShrinkingForPictureImageUpload = boolval($enableShrinkingForPictureImageUpload);
        }
    }
    
    /**
     * Returns the shrink width picture image upload.
     *
     * @return integer
     */
    public function getShrinkWidthPictureImageUpload()
    {
        return $this->shrinkWidthPictureImageUpload;
    }
    
    /**
     * Sets the shrink width picture image upload.
     *
     * @param integer $shrinkWidthPictureImageUpload
     *
     * @return void
     */
    public function setShrinkWidthPictureImageUpload($shrinkWidthPictureImageUpload)
    {
        if (intval($this->shrinkWidthPictureImageUpload) !== intval($shrinkWidthPictureImageUpload)) {
            $this->shrinkWidthPictureImageUpload = intval($shrinkWidthPictureImageUpload);
        }
    }
    
    /**
     * Returns the shrink height picture image upload.
     *
     * @return integer
     */
    public function getShrinkHeightPictureImageUpload()
    {
        return $this->shrinkHeightPictureImageUpload;
    }
    
    /**
     * Sets the shrink height picture image upload.
     *
     * @param integer $shrinkHeightPictureImageUpload
     *
     * @return void
     */
    public function setShrinkHeightPictureImageUpload($shrinkHeightPictureImageUpload)
    {
        if (intval($this->shrinkHeightPictureImageUpload) !== intval($shrinkHeightPictureImageUpload)) {
            $this->shrinkHeightPictureImageUpload = intval($shrinkHeightPictureImageUpload);
        }
    }
    
    /**
     * Returns the thumbnail mode picture image upload.
     *
     * @return string
     */
    public function getThumbnailModePictureImageUpload()
    {
        return $this->thumbnailModePictureImageUpload;
    }
    
    /**
     * Sets the thumbnail mode picture image upload.
     *
     * @param string $thumbnailModePictureImageUpload
     *
     * @return void
     */
    public function setThumbnailModePictureImageUpload($thumbnailModePictureImageUpload)
    {
        if ($this->thumbnailModePictureImageUpload !== $thumbnailModePictureImageUpload) {
            $this->thumbnailModePictureImageUpload = isset($thumbnailModePictureImageUpload) ? $thumbnailModePictureImageUpload : '';
        }
    }
    
    /**
     * Returns the thumbnail width picture image upload view.
     *
     * @return integer
     */
    public function getThumbnailWidthPictureImageUploadView()
    {
        return $this->thumbnailWidthPictureImageUploadView;
    }
    
    /**
     * Sets the thumbnail width picture image upload view.
     *
     * @param integer $thumbnailWidthPictureImageUploadView
     *
     * @return void
     */
    public function setThumbnailWidthPictureImageUploadView($thumbnailWidthPictureImageUploadView)
    {
        if (intval($this->thumbnailWidthPictureImageUploadView) !== intval($thumbnailWidthPictureImageUploadView)) {
            $this->thumbnailWidthPictureImageUploadView = intval($thumbnailWidthPictureImageUploadView);
        }
    }
    
    /**
     * Returns the thumbnail height picture image upload view.
     *
     * @return integer
     */
    public function getThumbnailHeightPictureImageUploadView()
    {
        return $this->thumbnailHeightPictureImageUploadView;
    }
    
    /**
     * Sets the thumbnail height picture image upload view.
     *
     * @param integer $thumbnailHeightPictureImageUploadView
     *
     * @return void
     */
    public function setThumbnailHeightPictureImageUploadView($thumbnailHeightPictureImageUploadView)
    {
        if (intval($this->thumbnailHeightPictureImageUploadView) !== intval($thumbnailHeightPictureImageUploadView)) {
            $this->thumbnailHeightPictureImageUploadView = intval($thumbnailHeightPictureImageUploadView);
        }
    }
    
    /**
     * Returns the thumbnail width picture image upload display.
     *
     * @return integer
     */
    public function getThumbnailWidthPictureImageUploadDisplay()
    {
        return $this->thumbnailWidthPictureImageUploadDisplay;
    }
    
    /**
     * Sets the thumbnail width picture image upload display.
     *
     * @param integer $thumbnailWidthPictureImageUploadDisplay
     *
     * @return void
     */
    public function setThumbnailWidthPictureImageUploadDisplay($thumbnailWidthPictureImageUploadDisplay)
    {
        if (intval($this->thumbnailWidthPictureImageUploadDisplay) !== intval($thumbnailWidthPictureImageUploadDisplay)) {
            $this->thumbnailWidthPictureImageUploadDisplay = intval($thumbnailWidthPictureImageUploadDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height picture image upload display.
     *
     * @return integer
     */
    public function getThumbnailHeightPictureImageUploadDisplay()
    {
        return $this->thumbnailHeightPictureImageUploadDisplay;
    }
    
    /**
     * Sets the thumbnail height picture image upload display.
     *
     * @param integer $thumbnailHeightPictureImageUploadDisplay
     *
     * @return void
     */
    public function setThumbnailHeightPictureImageUploadDisplay($thumbnailHeightPictureImageUploadDisplay)
    {
        if (intval($this->thumbnailHeightPictureImageUploadDisplay) !== intval($thumbnailHeightPictureImageUploadDisplay)) {
            $this->thumbnailHeightPictureImageUploadDisplay = intval($thumbnailHeightPictureImageUploadDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width picture image upload edit.
     *
     * @return integer
     */
    public function getThumbnailWidthPictureImageUploadEdit()
    {
        return $this->thumbnailWidthPictureImageUploadEdit;
    }
    
    /**
     * Sets the thumbnail width picture image upload edit.
     *
     * @param integer $thumbnailWidthPictureImageUploadEdit
     *
     * @return void
     */
    public function setThumbnailWidthPictureImageUploadEdit($thumbnailWidthPictureImageUploadEdit)
    {
        if (intval($this->thumbnailWidthPictureImageUploadEdit) !== intval($thumbnailWidthPictureImageUploadEdit)) {
            $this->thumbnailWidthPictureImageUploadEdit = intval($thumbnailWidthPictureImageUploadEdit);
        }
    }
    
    /**
     * Returns the thumbnail height picture image upload edit.
     *
     * @return integer
     */
    public function getThumbnailHeightPictureImageUploadEdit()
    {
        return $this->thumbnailHeightPictureImageUploadEdit;
    }
    
    /**
     * Sets the thumbnail height picture image upload edit.
     *
     * @param integer $thumbnailHeightPictureImageUploadEdit
     *
     * @return void
     */
    public function setThumbnailHeightPictureImageUploadEdit($thumbnailHeightPictureImageUploadEdit)
    {
        if (intval($this->thumbnailHeightPictureImageUploadEdit) !== intval($thumbnailHeightPictureImageUploadEdit)) {
            $this->thumbnailHeightPictureImageUploadEdit = intval($thumbnailHeightPictureImageUploadEdit);
        }
    }
    
    /**
     * Returns the enable shrinking for avatar avatar upload.
     *
     * @return boolean
     */
    public function getEnableShrinkingForAvatarAvatarUpload()
    {
        return $this->enableShrinkingForAvatarAvatarUpload;
    }
    
    /**
     * Sets the enable shrinking for avatar avatar upload.
     *
     * @param boolean $enableShrinkingForAvatarAvatarUpload
     *
     * @return void
     */
    public function setEnableShrinkingForAvatarAvatarUpload($enableShrinkingForAvatarAvatarUpload)
    {
        if (boolval($this->enableShrinkingForAvatarAvatarUpload) !== boolval($enableShrinkingForAvatarAvatarUpload)) {
            $this->enableShrinkingForAvatarAvatarUpload = boolval($enableShrinkingForAvatarAvatarUpload);
        }
    }
    
    /**
     * Returns the shrink width avatar avatar upload.
     *
     * @return integer
     */
    public function getShrinkWidthAvatarAvatarUpload()
    {
        return $this->shrinkWidthAvatarAvatarUpload;
    }
    
    /**
     * Sets the shrink width avatar avatar upload.
     *
     * @param integer $shrinkWidthAvatarAvatarUpload
     *
     * @return void
     */
    public function setShrinkWidthAvatarAvatarUpload($shrinkWidthAvatarAvatarUpload)
    {
        if (intval($this->shrinkWidthAvatarAvatarUpload) !== intval($shrinkWidthAvatarAvatarUpload)) {
            $this->shrinkWidthAvatarAvatarUpload = intval($shrinkWidthAvatarAvatarUpload);
        }
    }
    
    /**
     * Returns the shrink height avatar avatar upload.
     *
     * @return integer
     */
    public function getShrinkHeightAvatarAvatarUpload()
    {
        return $this->shrinkHeightAvatarAvatarUpload;
    }
    
    /**
     * Sets the shrink height avatar avatar upload.
     *
     * @param integer $shrinkHeightAvatarAvatarUpload
     *
     * @return void
     */
    public function setShrinkHeightAvatarAvatarUpload($shrinkHeightAvatarAvatarUpload)
    {
        if (intval($this->shrinkHeightAvatarAvatarUpload) !== intval($shrinkHeightAvatarAvatarUpload)) {
            $this->shrinkHeightAvatarAvatarUpload = intval($shrinkHeightAvatarAvatarUpload);
        }
    }
    
    /**
     * Returns the thumbnail mode avatar avatar upload.
     *
     * @return string
     */
    public function getThumbnailModeAvatarAvatarUpload()
    {
        return $this->thumbnailModeAvatarAvatarUpload;
    }
    
    /**
     * Sets the thumbnail mode avatar avatar upload.
     *
     * @param string $thumbnailModeAvatarAvatarUpload
     *
     * @return void
     */
    public function setThumbnailModeAvatarAvatarUpload($thumbnailModeAvatarAvatarUpload)
    {
        if ($this->thumbnailModeAvatarAvatarUpload !== $thumbnailModeAvatarAvatarUpload) {
            $this->thumbnailModeAvatarAvatarUpload = isset($thumbnailModeAvatarAvatarUpload) ? $thumbnailModeAvatarAvatarUpload : '';
        }
    }
    
    /**
     * Returns the thumbnail width avatar avatar upload view.
     *
     * @return integer
     */
    public function getThumbnailWidthAvatarAvatarUploadView()
    {
        return $this->thumbnailWidthAvatarAvatarUploadView;
    }
    
    /**
     * Sets the thumbnail width avatar avatar upload view.
     *
     * @param integer $thumbnailWidthAvatarAvatarUploadView
     *
     * @return void
     */
    public function setThumbnailWidthAvatarAvatarUploadView($thumbnailWidthAvatarAvatarUploadView)
    {
        if (intval($this->thumbnailWidthAvatarAvatarUploadView) !== intval($thumbnailWidthAvatarAvatarUploadView)) {
            $this->thumbnailWidthAvatarAvatarUploadView = intval($thumbnailWidthAvatarAvatarUploadView);
        }
    }
    
    /**
     * Returns the thumbnail height avatar avatar upload view.
     *
     * @return integer
     */
    public function getThumbnailHeightAvatarAvatarUploadView()
    {
        return $this->thumbnailHeightAvatarAvatarUploadView;
    }
    
    /**
     * Sets the thumbnail height avatar avatar upload view.
     *
     * @param integer $thumbnailHeightAvatarAvatarUploadView
     *
     * @return void
     */
    public function setThumbnailHeightAvatarAvatarUploadView($thumbnailHeightAvatarAvatarUploadView)
    {
        if (intval($this->thumbnailHeightAvatarAvatarUploadView) !== intval($thumbnailHeightAvatarAvatarUploadView)) {
            $this->thumbnailHeightAvatarAvatarUploadView = intval($thumbnailHeightAvatarAvatarUploadView);
        }
    }
    
    /**
     * Returns the thumbnail width avatar avatar upload display.
     *
     * @return integer
     */
    public function getThumbnailWidthAvatarAvatarUploadDisplay()
    {
        return $this->thumbnailWidthAvatarAvatarUploadDisplay;
    }
    
    /**
     * Sets the thumbnail width avatar avatar upload display.
     *
     * @param integer $thumbnailWidthAvatarAvatarUploadDisplay
     *
     * @return void
     */
    public function setThumbnailWidthAvatarAvatarUploadDisplay($thumbnailWidthAvatarAvatarUploadDisplay)
    {
        if (intval($this->thumbnailWidthAvatarAvatarUploadDisplay) !== intval($thumbnailWidthAvatarAvatarUploadDisplay)) {
            $this->thumbnailWidthAvatarAvatarUploadDisplay = intval($thumbnailWidthAvatarAvatarUploadDisplay);
        }
    }
    
    /**
     * Returns the thumbnail height avatar avatar upload display.
     *
     * @return integer
     */
    public function getThumbnailHeightAvatarAvatarUploadDisplay()
    {
        return $this->thumbnailHeightAvatarAvatarUploadDisplay;
    }
    
    /**
     * Sets the thumbnail height avatar avatar upload display.
     *
     * @param integer $thumbnailHeightAvatarAvatarUploadDisplay
     *
     * @return void
     */
    public function setThumbnailHeightAvatarAvatarUploadDisplay($thumbnailHeightAvatarAvatarUploadDisplay)
    {
        if (intval($this->thumbnailHeightAvatarAvatarUploadDisplay) !== intval($thumbnailHeightAvatarAvatarUploadDisplay)) {
            $this->thumbnailHeightAvatarAvatarUploadDisplay = intval($thumbnailHeightAvatarAvatarUploadDisplay);
        }
    }
    
    /**
     * Returns the thumbnail width avatar avatar upload edit.
     *
     * @return integer
     */
    public function getThumbnailWidthAvatarAvatarUploadEdit()
    {
        return $this->thumbnailWidthAvatarAvatarUploadEdit;
    }
    
    /**
     * Sets the thumbnail width avatar avatar upload edit.
     *
     * @param integer $thumbnailWidthAvatarAvatarUploadEdit
     *
     * @return void
     */
    public function setThumbnailWidthAvatarAvatarUploadEdit($thumbnailWidthAvatarAvatarUploadEdit)
    {
        if (intval($this->thumbnailWidthAvatarAvatarUploadEdit) !== intval($thumbnailWidthAvatarAvatarUploadEdit)) {
            $this->thumbnailWidthAvatarAvatarUploadEdit = intval($thumbnailWidthAvatarAvatarUploadEdit);
        }
    }
    
    /**
     * Returns the thumbnail height avatar avatar upload edit.
     *
     * @return integer
     */
    public function getThumbnailHeightAvatarAvatarUploadEdit()
    {
        return $this->thumbnailHeightAvatarAvatarUploadEdit;
    }
    
    /**
     * Sets the thumbnail height avatar avatar upload edit.
     *
     * @param integer $thumbnailHeightAvatarAvatarUploadEdit
     *
     * @return void
     */
    public function setThumbnailHeightAvatarAvatarUploadEdit($thumbnailHeightAvatarAvatarUploadEdit)
    {
        if (intval($this->thumbnailHeightAvatarAvatarUploadEdit) !== intval($thumbnailHeightAvatarAvatarUploadEdit)) {
            $this->thumbnailHeightAvatarAvatarUploadEdit = intval($thumbnailHeightAvatarAvatarUploadEdit);
        }
    }
    
    /**
     * Returns the allow moderation specific creator for album.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForAlbum()
    {
        return $this->allowModerationSpecificCreatorForAlbum;
    }
    
    /**
     * Sets the allow moderation specific creator for album.
     *
     * @param boolean $allowModerationSpecificCreatorForAlbum
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForAlbum($allowModerationSpecificCreatorForAlbum)
    {
        if (boolval($this->allowModerationSpecificCreatorForAlbum) !== boolval($allowModerationSpecificCreatorForAlbum)) {
            $this->allowModerationSpecificCreatorForAlbum = boolval($allowModerationSpecificCreatorForAlbum);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for album.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForAlbum()
    {
        return $this->allowModerationSpecificCreationDateForAlbum;
    }
    
    /**
     * Sets the allow moderation specific creation date for album.
     *
     * @param boolean $allowModerationSpecificCreationDateForAlbum
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForAlbum($allowModerationSpecificCreationDateForAlbum)
    {
        if (boolval($this->allowModerationSpecificCreationDateForAlbum) !== boolval($allowModerationSpecificCreationDateForAlbum)) {
            $this->allowModerationSpecificCreationDateForAlbum = boolval($allowModerationSpecificCreationDateForAlbum);
        }
    }
    
    /**
     * Returns the allow moderation specific creator for picture.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForPicture()
    {
        return $this->allowModerationSpecificCreatorForPicture;
    }
    
    /**
     * Sets the allow moderation specific creator for picture.
     *
     * @param boolean $allowModerationSpecificCreatorForPicture
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForPicture($allowModerationSpecificCreatorForPicture)
    {
        if (boolval($this->allowModerationSpecificCreatorForPicture) !== boolval($allowModerationSpecificCreatorForPicture)) {
            $this->allowModerationSpecificCreatorForPicture = boolval($allowModerationSpecificCreatorForPicture);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for picture.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForPicture()
    {
        return $this->allowModerationSpecificCreationDateForPicture;
    }
    
    /**
     * Sets the allow moderation specific creation date for picture.
     *
     * @param boolean $allowModerationSpecificCreationDateForPicture
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForPicture($allowModerationSpecificCreationDateForPicture)
    {
        if (boolval($this->allowModerationSpecificCreationDateForPicture) !== boolval($allowModerationSpecificCreationDateForPicture)) {
            $this->allowModerationSpecificCreationDateForPicture = boolval($allowModerationSpecificCreationDateForPicture);
        }
    }
    
    /**
     * Returns the allow moderation specific creator for avatar.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreatorForAvatar()
    {
        return $this->allowModerationSpecificCreatorForAvatar;
    }
    
    /**
     * Sets the allow moderation specific creator for avatar.
     *
     * @param boolean $allowModerationSpecificCreatorForAvatar
     *
     * @return void
     */
    public function setAllowModerationSpecificCreatorForAvatar($allowModerationSpecificCreatorForAvatar)
    {
        if (boolval($this->allowModerationSpecificCreatorForAvatar) !== boolval($allowModerationSpecificCreatorForAvatar)) {
            $this->allowModerationSpecificCreatorForAvatar = boolval($allowModerationSpecificCreatorForAvatar);
        }
    }
    
    /**
     * Returns the allow moderation specific creation date for avatar.
     *
     * @return boolean
     */
    public function getAllowModerationSpecificCreationDateForAvatar()
    {
        return $this->allowModerationSpecificCreationDateForAvatar;
    }
    
    /**
     * Sets the allow moderation specific creation date for avatar.
     *
     * @param boolean $allowModerationSpecificCreationDateForAvatar
     *
     * @return void
     */
    public function setAllowModerationSpecificCreationDateForAvatar($allowModerationSpecificCreationDateForAvatar)
    {
        if (boolval($this->allowModerationSpecificCreationDateForAvatar) !== boolval($allowModerationSpecificCreationDateForAvatar)) {
            $this->allowModerationSpecificCreationDateForAvatar = boolval($allowModerationSpecificCreationDateForAvatar);
        }
    }
    
    /**
     * Returns the enabled finder types.
     *
     * @return string
     */
    public function getEnabledFinderTypes()
    {
        return $this->enabledFinderTypes;
    }
    
    /**
     * Sets the enabled finder types.
     *
     * @param string $enabledFinderTypes
     *
     * @return void
     */
    public function setEnabledFinderTypes($enabledFinderTypes)
    {
        if ($this->enabledFinderTypes !== $enabledFinderTypes) {
            $this->enabledFinderTypes = isset($enabledFinderTypes) ? $enabledFinderTypes : '';
        }
    }
    
    
    /**
     * Loads module variables from the database.
     */
    protected function load()
    {
        $moduleVars = $this->variableApi->getAll('MUImageModule');
    
        if (isset($moduleVars['supportCategoriesForAlbums'])) {
            $this->setSupportCategoriesForAlbums($moduleVars['supportCategoriesForAlbums']);
        }
        if (isset($moduleVars['supportCategoriesForAvatars'])) {
            $this->setSupportCategoriesForAvatars($moduleVars['supportCategoriesForAvatars']);
        }
        if (isset($moduleVars['supportSubAlbums'])) {
            $this->setSupportSubAlbums($moduleVars['supportSubAlbums']);
        }
        if (isset($moduleVars['userDeletePictures'])) {
            $this->setUserDeletePictures($moduleVars['userDeletePictures']);
        }
        if (isset($moduleVars['slideshow1'])) {
            $this->setSlideshow1($moduleVars['slideshow1']);
        }
        if (isset($moduleVars['useAvatars'])) {
            $this->setUseAvatars($moduleVars['useAvatars']);
        }
        if (isset($moduleVars['useWatermark'])) {
            $this->setUseWatermark($moduleVars['useWatermark']);
        }
        if (isset($moduleVars['useExtendedFeatures'])) {
            $this->setUseExtendedFeatures($moduleVars['useExtendedFeatures']);
        }
        if (isset($moduleVars['albumEntriesPerPageInBackend'])) {
            $this->setAlbumEntriesPerPageInBackend($moduleVars['albumEntriesPerPageInBackend']);
        }
        if (isset($moduleVars['pictureEntriesPerPageInBackend'])) {
            $this->setPictureEntriesPerPageInBackend($moduleVars['pictureEntriesPerPageInBackend']);
        }
        if (isset($moduleVars['avatarEntriesPerPageInBackend'])) {
            $this->setAvatarEntriesPerPageInBackend($moduleVars['avatarEntriesPerPageInBackend']);
        }
        if (isset($moduleVars['countImageView'])) {
            $this->setCountImageView($moduleVars['countImageView']);
        }
        if (isset($moduleVars['groupForCommonAlbums'])) {
            $this->setGroupForCommonAlbums($moduleVars['groupForCommonAlbums']);
        }
        if (isset($moduleVars['kindOfShowSubAlbums'])) {
            $this->setKindOfShowSubAlbums($moduleVars['kindOfShowSubAlbums']);
        }
        if (isset($moduleVars['breadcrumbsInFrontend'])) {
            $this->setBreadcrumbsInFrontend($moduleVars['breadcrumbsInFrontend']);
        }
        if (isset($moduleVars['endingOfUrl'])) {
            $this->setEndingOfUrl($moduleVars['endingOfUrl']);
        }
        if (isset($moduleVars['numberParentAlbums'])) {
            $this->setNumberParentAlbums($moduleVars['numberParentAlbums']);
        }
        if (isset($moduleVars['numberSubAlbums'])) {
            $this->setNumberSubAlbums($moduleVars['numberSubAlbums']);
        }
        if (isset($moduleVars['numberPictures'])) {
            $this->setNumberPictures($moduleVars['numberPictures']);
        }
        if (isset($moduleVars['fileSizeForPictures'])) {
            $this->setFileSizeForPictures($moduleVars['fileSizeForPictures']);
        }
        if (isset($moduleVars['fileSizeForAvatars'])) {
            $this->setFileSizeForAvatars($moduleVars['fileSizeForAvatars']);
        }
        if (isset($moduleVars['fileSizesForZip'])) {
            $this->setFileSizesForZip($moduleVars['fileSizesForZip']);
        }
        if (isset($moduleVars['minWidthForPictures'])) {
            $this->setMinWidthForPictures($moduleVars['minWidthForPictures']);
        }
        if (isset($moduleVars['maxWidthForPictures'])) {
            $this->setMaxWidthForPictures($moduleVars['maxWidthForPictures']);
        }
        if (isset($moduleVars['maxHeightForPictures'])) {
            $this->setMaxHeightForPictures($moduleVars['maxHeightForPictures']);
        }
        if (isset($moduleVars['minWidthForAvatars'])) {
            $this->setMinWidthForAvatars($moduleVars['minWidthForAvatars']);
        }
        if (isset($moduleVars['maxWidthForAvatars'])) {
            $this->setMaxWidthForAvatars($moduleVars['maxWidthForAvatars']);
        }
        if (isset($moduleVars['maxHeightForAvatars'])) {
            $this->setMaxHeightForAvatars($moduleVars['maxHeightForAvatars']);
        }
        if (isset($moduleVars['createSeveralPictures'])) {
            $this->setCreateSeveralPictures($moduleVars['createSeveralPictures']);
        }
        if (isset($moduleVars['firstWidth'])) {
            $this->setFirstWidth($moduleVars['firstWidth']);
        }
        if (isset($moduleVars['firstHeight'])) {
            $this->setFirstHeight($moduleVars['firstHeight']);
        }
        if (isset($moduleVars['secondWidth'])) {
            $this->setSecondWidth($moduleVars['secondWidth']);
        }
        if (isset($moduleVars['secondHeight'])) {
            $this->setSecondHeight($moduleVars['secondHeight']);
        }
        if (isset($moduleVars['thirdWidth'])) {
            $this->setThirdWidth($moduleVars['thirdWidth']);
        }
        if (isset($moduleVars['thirdHeight'])) {
            $this->setThirdHeight($moduleVars['thirdHeight']);
        }
        if (isset($moduleVars['slide1Interval'])) {
            $this->setSlide1Interval($moduleVars['slide1Interval']);
        }
        if (isset($moduleVars['slide1Speed'])) {
            $this->setSlide1Speed($moduleVars['slide1Speed']);
        }
        if (isset($moduleVars['numberWidthAndNameOfAvatars'])) {
            $this->setNumberWidthAndNameOfAvatars($moduleVars['numberWidthAndNameOfAvatars']);
        }
        if (isset($moduleVars['shrink'])) {
            $this->setShrink($moduleVars['shrink']);
        }
        if (isset($moduleVars['watermark'])) {
            $this->setWatermark($moduleVars['watermark']);
        }
        if (isset($moduleVars['bottomOfImage'])) {
            $this->setBottomOfImage($moduleVars['bottomOfImage']);
        }
        if (isset($moduleVars['leftSide'])) {
            $this->setLeftSide($moduleVars['leftSide']);
        }
        if (isset($moduleVars['rightSide'])) {
            $this->setRightSide($moduleVars['rightSide']);
        }
        if (isset($moduleVars['topOfImage'])) {
            $this->setTopOfImage($moduleVars['topOfImage']);
        }
        if (isset($moduleVars['albumEntriesPerPage'])) {
            $this->setAlbumEntriesPerPage($moduleVars['albumEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnAlbumsOnAccountPage'])) {
            $this->setLinkOwnAlbumsOnAccountPage($moduleVars['linkOwnAlbumsOnAccountPage']);
        }
        if (isset($moduleVars['pictureEntriesPerPage'])) {
            $this->setPictureEntriesPerPage($moduleVars['pictureEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnPicturesOnAccountPage'])) {
            $this->setLinkOwnPicturesOnAccountPage($moduleVars['linkOwnPicturesOnAccountPage']);
        }
        if (isset($moduleVars['avatarEntriesPerPage'])) {
            $this->setAvatarEntriesPerPage($moduleVars['avatarEntriesPerPage']);
        }
        if (isset($moduleVars['linkOwnAvatarsOnAccountPage'])) {
            $this->setLinkOwnAvatarsOnAccountPage($moduleVars['linkOwnAvatarsOnAccountPage']);
        }
        if (isset($moduleVars['showOnlyOwnEntries'])) {
            $this->setShowOnlyOwnEntries($moduleVars['showOnlyOwnEntries']);
        }
        if (isset($moduleVars['enableShrinkingForPictureImageUpload'])) {
            $this->setEnableShrinkingForPictureImageUpload($moduleVars['enableShrinkingForPictureImageUpload']);
        }
        if (isset($moduleVars['shrinkWidthPictureImageUpload'])) {
            $this->setShrinkWidthPictureImageUpload($moduleVars['shrinkWidthPictureImageUpload']);
        }
        if (isset($moduleVars['shrinkHeightPictureImageUpload'])) {
            $this->setShrinkHeightPictureImageUpload($moduleVars['shrinkHeightPictureImageUpload']);
        }
        if (isset($moduleVars['thumbnailModePictureImageUpload'])) {
            $this->setThumbnailModePictureImageUpload($moduleVars['thumbnailModePictureImageUpload']);
        }
        if (isset($moduleVars['thumbnailWidthPictureImageUploadView'])) {
            $this->setThumbnailWidthPictureImageUploadView($moduleVars['thumbnailWidthPictureImageUploadView']);
        }
        if (isset($moduleVars['thumbnailHeightPictureImageUploadView'])) {
            $this->setThumbnailHeightPictureImageUploadView($moduleVars['thumbnailHeightPictureImageUploadView']);
        }
        if (isset($moduleVars['thumbnailWidthPictureImageUploadDisplay'])) {
            $this->setThumbnailWidthPictureImageUploadDisplay($moduleVars['thumbnailWidthPictureImageUploadDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightPictureImageUploadDisplay'])) {
            $this->setThumbnailHeightPictureImageUploadDisplay($moduleVars['thumbnailHeightPictureImageUploadDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthPictureImageUploadEdit'])) {
            $this->setThumbnailWidthPictureImageUploadEdit($moduleVars['thumbnailWidthPictureImageUploadEdit']);
        }
        if (isset($moduleVars['thumbnailHeightPictureImageUploadEdit'])) {
            $this->setThumbnailHeightPictureImageUploadEdit($moduleVars['thumbnailHeightPictureImageUploadEdit']);
        }
        if (isset($moduleVars['enableShrinkingForAvatarAvatarUpload'])) {
            $this->setEnableShrinkingForAvatarAvatarUpload($moduleVars['enableShrinkingForAvatarAvatarUpload']);
        }
        if (isset($moduleVars['shrinkWidthAvatarAvatarUpload'])) {
            $this->setShrinkWidthAvatarAvatarUpload($moduleVars['shrinkWidthAvatarAvatarUpload']);
        }
        if (isset($moduleVars['shrinkHeightAvatarAvatarUpload'])) {
            $this->setShrinkHeightAvatarAvatarUpload($moduleVars['shrinkHeightAvatarAvatarUpload']);
        }
        if (isset($moduleVars['thumbnailModeAvatarAvatarUpload'])) {
            $this->setThumbnailModeAvatarAvatarUpload($moduleVars['thumbnailModeAvatarAvatarUpload']);
        }
        if (isset($moduleVars['thumbnailWidthAvatarAvatarUploadView'])) {
            $this->setThumbnailWidthAvatarAvatarUploadView($moduleVars['thumbnailWidthAvatarAvatarUploadView']);
        }
        if (isset($moduleVars['thumbnailHeightAvatarAvatarUploadView'])) {
            $this->setThumbnailHeightAvatarAvatarUploadView($moduleVars['thumbnailHeightAvatarAvatarUploadView']);
        }
        if (isset($moduleVars['thumbnailWidthAvatarAvatarUploadDisplay'])) {
            $this->setThumbnailWidthAvatarAvatarUploadDisplay($moduleVars['thumbnailWidthAvatarAvatarUploadDisplay']);
        }
        if (isset($moduleVars['thumbnailHeightAvatarAvatarUploadDisplay'])) {
            $this->setThumbnailHeightAvatarAvatarUploadDisplay($moduleVars['thumbnailHeightAvatarAvatarUploadDisplay']);
        }
        if (isset($moduleVars['thumbnailWidthAvatarAvatarUploadEdit'])) {
            $this->setThumbnailWidthAvatarAvatarUploadEdit($moduleVars['thumbnailWidthAvatarAvatarUploadEdit']);
        }
        if (isset($moduleVars['thumbnailHeightAvatarAvatarUploadEdit'])) {
            $this->setThumbnailHeightAvatarAvatarUploadEdit($moduleVars['thumbnailHeightAvatarAvatarUploadEdit']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForAlbum'])) {
            $this->setAllowModerationSpecificCreatorForAlbum($moduleVars['allowModerationSpecificCreatorForAlbum']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForAlbum'])) {
            $this->setAllowModerationSpecificCreationDateForAlbum($moduleVars['allowModerationSpecificCreationDateForAlbum']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForPicture'])) {
            $this->setAllowModerationSpecificCreatorForPicture($moduleVars['allowModerationSpecificCreatorForPicture']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForPicture'])) {
            $this->setAllowModerationSpecificCreationDateForPicture($moduleVars['allowModerationSpecificCreationDateForPicture']);
        }
        if (isset($moduleVars['allowModerationSpecificCreatorForAvatar'])) {
            $this->setAllowModerationSpecificCreatorForAvatar($moduleVars['allowModerationSpecificCreatorForAvatar']);
        }
        if (isset($moduleVars['allowModerationSpecificCreationDateForAvatar'])) {
            $this->setAllowModerationSpecificCreationDateForAvatar($moduleVars['allowModerationSpecificCreationDateForAvatar']);
        }
        if (isset($moduleVars['enabledFinderTypes'])) {
            $this->setEnabledFinderTypes($moduleVars['enabledFinderTypes']);
        }
    }
    
    /**
     * Saves module variables into the database.
     */
    public function save()
    {
        $this->variableApi->set('MUImageModule', 'supportCategoriesForAlbums', $this->getSupportCategoriesForAlbums());
        $this->variableApi->set('MUImageModule', 'supportCategoriesForAvatars', $this->getSupportCategoriesForAvatars());
        $this->variableApi->set('MUImageModule', 'supportSubAlbums', $this->getSupportSubAlbums());
        $this->variableApi->set('MUImageModule', 'userDeletePictures', $this->getUserDeletePictures());
        $this->variableApi->set('MUImageModule', 'slideshow1', $this->getSlideshow1());
        $this->variableApi->set('MUImageModule', 'useAvatars', $this->getUseAvatars());
        $this->variableApi->set('MUImageModule', 'useWatermark', $this->getUseWatermark());
        $this->variableApi->set('MUImageModule', 'useExtendedFeatures', $this->getUseExtendedFeatures());
        $this->variableApi->set('MUImageModule', 'albumEntriesPerPageInBackend', $this->getAlbumEntriesPerPageInBackend());
        $this->variableApi->set('MUImageModule', 'pictureEntriesPerPageInBackend', $this->getPictureEntriesPerPageInBackend());
        $this->variableApi->set('MUImageModule', 'avatarEntriesPerPageInBackend', $this->getAvatarEntriesPerPageInBackend());
        $this->variableApi->set('MUImageModule', 'countImageView', $this->getCountImageView());
        $this->variableApi->set('MUImageModule', 'groupForCommonAlbums', $this->getGroupForCommonAlbums());
        $this->variableApi->set('MUImageModule', 'kindOfShowSubAlbums', $this->getKindOfShowSubAlbums());
        $this->variableApi->set('MUImageModule', 'breadcrumbsInFrontend', $this->getBreadcrumbsInFrontend());
        $this->variableApi->set('MUImageModule', 'endingOfUrl', $this->getEndingOfUrl());
        $this->variableApi->set('MUImageModule', 'numberParentAlbums', $this->getNumberParentAlbums());
        $this->variableApi->set('MUImageModule', 'numberSubAlbums', $this->getNumberSubAlbums());
        $this->variableApi->set('MUImageModule', 'numberPictures', $this->getNumberPictures());
        $this->variableApi->set('MUImageModule', 'fileSizeForPictures', $this->getFileSizeForPictures());
        $this->variableApi->set('MUImageModule', 'fileSizeForAvatars', $this->getFileSizeForAvatars());
        $this->variableApi->set('MUImageModule', 'fileSizesForZip', $this->getFileSizesForZip());
        $this->variableApi->set('MUImageModule', 'minWidthForPictures', $this->getMinWidthForPictures());
        $this->variableApi->set('MUImageModule', 'maxWidthForPictures', $this->getMaxWidthForPictures());
        $this->variableApi->set('MUImageModule', 'maxHeightForPictures', $this->getMaxHeightForPictures());
        $this->variableApi->set('MUImageModule', 'minWidthForAvatars', $this->getMinWidthForAvatars());
        $this->variableApi->set('MUImageModule', 'maxWidthForAvatars', $this->getMaxWidthForAvatars());
        $this->variableApi->set('MUImageModule', 'maxHeightForAvatars', $this->getMaxHeightForAvatars());
        $this->variableApi->set('MUImageModule', 'createSeveralPictures', $this->getCreateSeveralPictures());
        $this->variableApi->set('MUImageModule', 'firstWidth', $this->getFirstWidth());
        $this->variableApi->set('MUImageModule', 'firstHeight', $this->getFirstHeight());
        $this->variableApi->set('MUImageModule', 'secondWidth', $this->getSecondWidth());
        $this->variableApi->set('MUImageModule', 'secondHeight', $this->getSecondHeight());
        $this->variableApi->set('MUImageModule', 'thirdWidth', $this->getThirdWidth());
        $this->variableApi->set('MUImageModule', 'thirdHeight', $this->getThirdHeight());
        $this->variableApi->set('MUImageModule', 'slide1Interval', $this->getSlide1Interval());
        $this->variableApi->set('MUImageModule', 'slide1Speed', $this->getSlide1Speed());
        $this->variableApi->set('MUImageModule', 'numberWidthAndNameOfAvatars', $this->getNumberWidthAndNameOfAvatars());
        $this->variableApi->set('MUImageModule', 'shrink', $this->getShrink());
        $this->variableApi->set('MUImageModule', 'watermark', $this->getWatermark());
        $this->variableApi->set('MUImageModule', 'bottomOfImage', $this->getBottomOfImage());
        $this->variableApi->set('MUImageModule', 'leftSide', $this->getLeftSide());
        $this->variableApi->set('MUImageModule', 'rightSide', $this->getRightSide());
        $this->variableApi->set('MUImageModule', 'topOfImage', $this->getTopOfImage());
        $this->variableApi->set('MUImageModule', 'albumEntriesPerPage', $this->getAlbumEntriesPerPage());
        $this->variableApi->set('MUImageModule', 'linkOwnAlbumsOnAccountPage', $this->getLinkOwnAlbumsOnAccountPage());
        $this->variableApi->set('MUImageModule', 'pictureEntriesPerPage', $this->getPictureEntriesPerPage());
        $this->variableApi->set('MUImageModule', 'linkOwnPicturesOnAccountPage', $this->getLinkOwnPicturesOnAccountPage());
        $this->variableApi->set('MUImageModule', 'avatarEntriesPerPage', $this->getAvatarEntriesPerPage());
        $this->variableApi->set('MUImageModule', 'linkOwnAvatarsOnAccountPage', $this->getLinkOwnAvatarsOnAccountPage());
        $this->variableApi->set('MUImageModule', 'showOnlyOwnEntries', $this->getShowOnlyOwnEntries());
        $this->variableApi->set('MUImageModule', 'enableShrinkingForPictureImageUpload', $this->getEnableShrinkingForPictureImageUpload());
        $this->variableApi->set('MUImageModule', 'shrinkWidthPictureImageUpload', $this->getShrinkWidthPictureImageUpload());
        $this->variableApi->set('MUImageModule', 'shrinkHeightPictureImageUpload', $this->getShrinkHeightPictureImageUpload());
        $this->variableApi->set('MUImageModule', 'thumbnailModePictureImageUpload', $this->getThumbnailModePictureImageUpload());
        $this->variableApi->set('MUImageModule', 'thumbnailWidthPictureImageUploadView', $this->getThumbnailWidthPictureImageUploadView());
        $this->variableApi->set('MUImageModule', 'thumbnailHeightPictureImageUploadView', $this->getThumbnailHeightPictureImageUploadView());
        $this->variableApi->set('MUImageModule', 'thumbnailWidthPictureImageUploadDisplay', $this->getThumbnailWidthPictureImageUploadDisplay());
        $this->variableApi->set('MUImageModule', 'thumbnailHeightPictureImageUploadDisplay', $this->getThumbnailHeightPictureImageUploadDisplay());
        $this->variableApi->set('MUImageModule', 'thumbnailWidthPictureImageUploadEdit', $this->getThumbnailWidthPictureImageUploadEdit());
        $this->variableApi->set('MUImageModule', 'thumbnailHeightPictureImageUploadEdit', $this->getThumbnailHeightPictureImageUploadEdit());
        $this->variableApi->set('MUImageModule', 'enableShrinkingForAvatarAvatarUpload', $this->getEnableShrinkingForAvatarAvatarUpload());
        $this->variableApi->set('MUImageModule', 'shrinkWidthAvatarAvatarUpload', $this->getShrinkWidthAvatarAvatarUpload());
        $this->variableApi->set('MUImageModule', 'shrinkHeightAvatarAvatarUpload', $this->getShrinkHeightAvatarAvatarUpload());
        $this->variableApi->set('MUImageModule', 'thumbnailModeAvatarAvatarUpload', $this->getThumbnailModeAvatarAvatarUpload());
        $this->variableApi->set('MUImageModule', 'thumbnailWidthAvatarAvatarUploadView', $this->getThumbnailWidthAvatarAvatarUploadView());
        $this->variableApi->set('MUImageModule', 'thumbnailHeightAvatarAvatarUploadView', $this->getThumbnailHeightAvatarAvatarUploadView());
        $this->variableApi->set('MUImageModule', 'thumbnailWidthAvatarAvatarUploadDisplay', $this->getThumbnailWidthAvatarAvatarUploadDisplay());
        $this->variableApi->set('MUImageModule', 'thumbnailHeightAvatarAvatarUploadDisplay', $this->getThumbnailHeightAvatarAvatarUploadDisplay());
        $this->variableApi->set('MUImageModule', 'thumbnailWidthAvatarAvatarUploadEdit', $this->getThumbnailWidthAvatarAvatarUploadEdit());
        $this->variableApi->set('MUImageModule', 'thumbnailHeightAvatarAvatarUploadEdit', $this->getThumbnailHeightAvatarAvatarUploadEdit());
        $this->variableApi->set('MUImageModule', 'allowModerationSpecificCreatorForAlbum', $this->getAllowModerationSpecificCreatorForAlbum());
        $this->variableApi->set('MUImageModule', 'allowModerationSpecificCreationDateForAlbum', $this->getAllowModerationSpecificCreationDateForAlbum());
        $this->variableApi->set('MUImageModule', 'allowModerationSpecificCreatorForPicture', $this->getAllowModerationSpecificCreatorForPicture());
        $this->variableApi->set('MUImageModule', 'allowModerationSpecificCreationDateForPicture', $this->getAllowModerationSpecificCreationDateForPicture());
        $this->variableApi->set('MUImageModule', 'allowModerationSpecificCreatorForAvatar', $this->getAllowModerationSpecificCreatorForAvatar());
        $this->variableApi->set('MUImageModule', 'allowModerationSpecificCreationDateForAvatar', $this->getAllowModerationSpecificCreationDateForAvatar());
        $this->variableApi->set('MUImageModule', 'enabledFinderTypes', $this->getEnabledFinderTypes());
    }
}
