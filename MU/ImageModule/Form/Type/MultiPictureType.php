<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ImageModule\Form\Type;

use MU\ImageModule\Form\Type\Base\AbstractMultiPictureType;

use Symfony\Component\Form\FormEvent;
use Symfony\Component\Form\FormEvents;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\HttpFoundation\File\File;
use MU\ImageModule\Form\Type\Field\UploadType;


/**
 * Picture editing form type implementation class.
 */
class MultiPictureType extends AbstractMultiPictureType
{
    /**
     * @inheritDoc
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $this->addEntityFields($builder, $options);
        $this->addIncomingRelationshipFields($builder, $options);
        //$this->addModerationFields($builder, $options);
        //$this->addReturnControlField($builder, $options);
        $this->addSubmitButtons($builder, $options);

        $builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {
            $entity = $event->getData();
            foreach (['imageUpload'] as $uploadFieldName) {
                $entity[$uploadFieldName] = [
                    $uploadFieldName => $entity[$uploadFieldName] instanceof File ? $entity[$uploadFieldName]->getPathname() : null
                ];
            }
        });
        $builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
            $entity = $event->getData();
            foreach (['imageUpload'] as $uploadFieldName) {
                if (is_array($entity[$uploadFieldName])) {
                    $entity[$uploadFieldName] = $entity[$uploadFieldName][$uploadFieldName];
                }
            }
        });
        	$builder->addEventListener(FormEvents::PRE_SET_DATA, function (FormEvent $event) {
        		$entity = $event->getData();
        		foreach (['imageUpload2'] as $uploadFieldName) {
        			$entity[$uploadFieldName] = [
        					$uploadFieldName => $entity[$uploadFieldName] instanceof File ? $entity[$uploadFieldName]->getPathname() : null
        			];
        		}
        	});
        		$builder->addEventListener(FormEvents::SUBMIT, function (FormEvent $event) {
        			$entity = $event->getData();
        			foreach (['imageUpload2'] as $uploadFieldName) {
        				if (is_array($entity[$uploadFieldName])) {
        					$entity[$uploadFieldName] = $entity[$uploadFieldName][$uploadFieldName];
        				}
        			}
        		});
    }
    
    /**
     * Adds basic entity fields.
     *
     * @param FormBuilderInterface $builder The form builder
     * @param array                $options The options
     */
    public function addEntityFields(FormBuilderInterface $builder, array $options = [])
    {    
    	$builder->add('imageUpload', UploadType::class, [
    			'label' => $this->__('Image upload') . ':',
    			'help' => [$this->__f('Note: the image must have a width between %min% and %max% pixels.', ['%min%' => 400, '%max%' => 1000]), $this->__f('Note: the image must have a height between %min% and %max% pixels.', ['%min%' => 400, '%max%' => 1000])],
    			'attr' => [
    					'class' => ' validate-upload',
    					'title' => $this->__('Enter the image upload of the picture')
    			],
    			'required' => true && $options['mode'] == 'create',
    			'entity' => $options['entity'],
    			'allowed_extensions' => 'gif, jpeg, jpg, png',
    			'allowed_size' => '200k',
    			'mapped' => false
    	]);
    	
    	$builder->add('imageUpload2', UploadType::class, [
    			'label' => $this->__('Image upload') . ':',
    			'help' => [$this->__f('Note: the image must have a width between %min% and %max% pixels.', ['%min%' => 400, '%max%' => 1000]), $this->__f('Note: the image must have a height between %min% and %max% pixels.', ['%min%' => 400, '%max%' => 1000])],
    			'attr' => [
    					'class' => ' validate-upload',
    					'title' => $this->__('Enter the image upload of the picture')
    			],
    			'required' => false && $options['mode'] == 'create',
    			'entity' => $options['entity'],
    			'allowed_extensions' => 'gif, jpeg, jpg, png',
    			'allowed_size' => '200k',
    			'mapped' => false
    	]);
    

    }
}
