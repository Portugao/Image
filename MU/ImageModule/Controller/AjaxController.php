<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <info@homepages-mit-zikula.de>.
 * @link https://homepages-mit-zikula.de
 * @link http://zikula.org
 * @version Generated by ModuleStudio (https://modulestudio.de).
 */

namespace MU\ImageModule\Controller;

use MU\ImageModule\Controller\Base\AbstractAjaxController;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Method;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Security\Core\Exception\AccessDeniedException;

/**
 * Ajax controller implementation class.
 *
 * @Route("/ajax")
 */
class AjaxController extends AbstractAjaxController
{
    
    /**
     * Retrieve item list for finder selections in Forms, Content type plugin and Scribite.
     *
     * @Route("/getItemListFinder", options={"expose"=true})
     * @Method("GET")
     *
     * @param string $ot      Name of currently used object type
     * @param string $sort    Sorting field
     * @param string $sortdir Sorting direction
     *
     * @return JsonResponse
     */
    public function getItemListFinderAction(Request $request)
    {
        return parent::getItemListFinderAction($request);
    }
    
    /**
     * Checks whether a field value is a duplicate or not.
     *
     * @Route("/checkForDuplicate", options={"expose"=true})
     * @Method("GET")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function checkForDuplicateAction(Request $request)
    {
        return parent::checkForDuplicateAction($request);
    }
    
    /**
     * Changes a given flag (boolean field) by switching between true and false.
     *
     * @Route("/toggleFlag", options={"expose"=true})
     * @Method("POST")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function toggleFlagAction(Request $request)
    {
        return parent::toggleFlagAction($request);
    }
    
    /**
     * Changes a given state (boolean field) by switching between true and false.
     *
     * @Route("/savePicturePosition", options={"expose"=true})
     * @Method("GET")
     *
     * @param Request $request Current request instance
     *
     * @return JsonResponse
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function savePicturePositionAction(Request $request)
    {
    	return $this->savePicturePosition($request);
    }
    
    public function savePicturePosition($request)
    {
    	if (!$this->hasPermission('MUImageModule::Ajax', '::', ACCESS_EDIT)) {
    		throw new AccessDeniedException();
    	}
    
    	$pictures = $request->query->get('pictures');
    	$pictures = explode(',', $pictures);
    
    	if ($pictures == '') {
    		$result = $this->__('Error: invalid input.');
    	}
    
    	// select data from data source
    	$entityFactory = $this->get('mu_image_module.entity_factory');
    	$repository = $entityFactory->getRepository('picture');
    
    	$index = 0;
    	foreach ($pictures as $picture) {
    		 
    		$index = $index + 1;
    		$thisPicture = $repository->selectById($picture);
    		$thisPicture->setPos($index);
    		//$entityManager->flush();
    		/*$thisalbum = $thispicture->getAlbum();
    		 $thisAlbumId = $thisalbum['id'];*/
    		 
    		// save entity back to database
    		$entityFactory->getObjectManager()->flush();
    	}
    
    	// return response
    	return new JsonResponse([
    			'message' => $this->__('The setting has been successfully changed.')
    	]);
    }

    // feel free to add your own ajax controller methods here
}
