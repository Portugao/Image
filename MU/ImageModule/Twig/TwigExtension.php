<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\ImageModule\Twig;

use MU\ImageModule\Twig\Base\AbstractTwigExtension;
use Zikula\Common\Translator\TranslatorInterface;
use Zikula\ExtensionsModule\Api\ApiInterface\VariableApiInterface;
use MU\ImageModule\Helper\ListEntriesHelper;
use MU\ImageModule\Helper\EntityDisplayHelper;
use MU\ImageModule\Helper\WorkflowHelper;
use MU\ImageModule\Helper\ControllerHelper;

/**
 * Twig extension implementation class.
 */
class TwigExtension extends AbstractTwigExtension
{
	/**
	 * @var ControllerHelper
	 */
	protected $controllerHelper;
	

	/**
	 * TwigExtension constructor.
	 *
	 * @param TranslatorInterface $translator     Translator service instance
	 * @param VariableApiInterface $variableApi    VariableApi service instance
	 * @param EntityDisplayHelper $entityDisplayHelper EntityDisplayHelper service instance
	 * @param WorkflowHelper      $workflowHelper WorkflowHelper service instance
	 * @param ListEntriesHelper   $listHelper     ListEntriesHelper service instance
	 * @param ControllerHelper    $controllerHelper ControllerHelper service instance
	 */
	public function __construct(
			TranslatorInterface $translator,
			VariableApiInterface $variableApi,
			EntityDisplayHelper $entityDisplayHelper,
			WorkflowHelper $workflowHelper,
			ListEntriesHelper $listHelper,
			ControllerHelper $controllerHelper)
	{
		$this->setTranslator($translator);
		$this->variableApi = $variableApi;
		$this->entityDisplayHelper = $entityDisplayHelper;
		$this->workflowHelper = $workflowHelper;
		$this->listHelper = $listHelper;
		$this->controllerHelper = $controllerHelper;
	}
	
    /**
     * Returns a list of custom Twig functions.
     *
     * @return array
     */
    public function getFunctions()
    {
        $functions = parent::getFunctions();
        $functions[] = new \Twig_SimpleFunction('muimagemodule_checkGroupMember', [$this, 'checkGroupMember']);
        $functions[] = new \Twig_SimpleFunction('muimagemodule_checkAlbumAccess', [$this, 'checkAlbumAccess']);
        $functions[] = new \Twig_SimpleFunction('muimagemodule_giveImageOfAlbum', [$this, 'giveImageOfAlbum']);
        $functions[] = new \Twig_SimpleFunction('muimagemodule_breadcrumb', [$this, 'breadcrumb']);
        
        return $functions;
    }
    
    /**
     * The muimagemodule_checkGroupMember function checks if an user is in the the group of the creator.
     *
     * @return string The output of the plugin
     */
    public function checkGroupMember($created)
    {
    	$out = $this->controllerHelper->checkGroupMember($created);
    
    	return $out;
    }
    
    /**
     * The muimagemodule_checkAlbumAccess function checks if an user has access to an album.
     *
     * @return string The output of the plugin
     */
    public function checkAlbumAccess($albumId)
    {
    	$out = $this->controllerHelper->checkAlbumAccess($albumId);
    
    	return $out;
    }

    /**
     * The muimagemodule_giveImageOfAlbum function checks if an user has access to an album.
     *
     * @return string The output of the plugin
     */
    public function giveImageOfAlbum($albumId)
    {
    	$out = $this->controllerHelper->giveImageOfAlbum($albumId);
    
    	return $out;
    }
    
    /**
     * The muimagemodule_breadcrumb function gives breadcrumb for the actual album.
     *
     * @return string The output of the plugin
     */
    public function breadcrumb($albumId)
    {
    	$out = $this->controllerHelper->breadcrumb($albumId);
    
    	return $out;
    }

}
