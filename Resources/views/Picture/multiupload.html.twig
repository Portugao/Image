{# purpose of this template: build the form to edit an instance of picture #}
{% extends routeArea == 'admin' ? 'MUImageModule::adminBase.html.twig' : 'MUImageModule::base.html.twig' %}

{% block header %}
    {{ parent() }}
    {{ pageAddAsset('javascript', zasset('@MUImageModule:js/MUImageModule.Validation.js', 98)) }}
    {{ pageAddAsset('javascript', zasset('@MUImageModule:js/MUImageModule.EditFunctions.js', 99)) }}
    {{ pageAddAsset('javascript', pagevars.homepath ~ 'vendor/twitter/typeahead.js/dist/typeahead.bundle.min.js') }}
    
    <!-- The Load Image plugin is included for the preview images and image resizing functionality -->
    <script src="//blueimp.github.io/JavaScript-Load-Image/js/load-image.all.min.js"></script>
    <!-- The Canvas to Blob plugin is included for image resizing functionality -->
    <script src="//blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>

    {{ pageAddAsset('javascript', pagevars.homepath ~ 'modules/MU/ImageModule/Resources/vendor/jQueryFileUpload/js/load-image.all.min.js') }}
    {{ pageAddAsset('javascript', pagevars.homepath ~ 'modules/MU/ImageModule/Resources/vendor/jQueryFileUpload/js/jquery.iframe-transport.js') }}
    {{ pageAddAsset('javascript', pagevars.homepath ~ 'modules/MU/ImageModule/Resources/vendor/jQueryFileUpload/js/jquery.fileupload.js') }}
    {{ pageAddAsset('javascript', pagevars.homepath ~ 'modules/MU/ImageModule/Resources/vendor/jQueryFileUpload/js/jquery.fileupload-process.js') }}
    {{ pageAddAsset('javascript', pagevars.homepath ~ 'modules/MU/ImageModule/Resources/vendor/jQueryFileUpload/js/jquery.fileupload-image.js') }}
{% endblock %}

{% block title mode == 'create' ? __('Create picture') : __('Edit picture') %}
{% block admin_page_icon mode == 'create' ? 'plus' : 'pencil-square-o' %}
{% block content %}
    <div class="muimagemodule-picture muimagemodule-edit">
{#% form_theme form with [
    '@MUImageModule/Form/bootstrap_3.html.twig',
    'ZikulaFormExtensionBundle:Form:form_div_layout.html.twig'
] %}
{{ form_start(form, {attr: {id: 'pictureMultiUploadForm', class: 'muimage-edit-form'}}) }}
{{ form_errors(form) }}
<fieldset>
    <legend>{{ __('Content') }}</legend>
    <div class="hidden">
    {{ form_row(form.title) }}
    
    {{ form_row(form.description) }}
    </div>
    {{ form_row(form.multipleUpload) }}
    
    <div id="progress" class="progress">
        <div class="progress-bar progress-bar-success"></div>
    </div>
    <!-- The container for the uploaded files -->
    <div id="files" class="files"></div>
    
    <div class="hidden">
        {{ form_row(form.imageView) }}
    
    
    {{ form_row(form.albumImage) }}
    </div>
    <div class="hidden">
        {{ form_row(form.pos) }}
    </div>
</fieldset>#}

   <span class="btn btn-success fileinput-button">
        <i class="glyphicon glyphicon-plus"></i>
        <span>Add files...</span>
        <!-- The file input field used as target for the file upload widget -->
        <input id="fileupload" type="file" name="files[]" multiple>
    </span>
    <br>
    <br>
    <!-- The global progress bar -->
    <div id="progress" class="progress">
        <div class="progress-bar progress-bar-success"></div>
    </div>
    <!-- The container for the uploaded files -->
    <div id="files" class="files"></div>

{{ include(
    '@MUImageModule/Album/includeSelectOne.html.twig',
    { group: 'picture', alias: 'album', aliasReverse: 'pictures', mandatory: false, idPrefix: 'muimagePicture_Album', linkingItem: picture, displayMode: 'choices', allowEditing: false }
) }}
{% if mode != 'create' %}
    {{ include('@MUImageModule/Helper/includeStandardFieldsEdit.html.twig', { obj: picture }) }}
{% endif %}

{# include display hooks #}
{% set hookId = mode != 'create' ? picture.id : null %}
{% set hooks = notifyDisplayHooks(eventName='muimagemodule.ui_hooks.pictures.form_edit', id=hookId) %}
{% if hooks is iterable and hooks|length > 0 %}
    {% for providerArea, hook in hooks %}
        {% if providerArea != 'provider.scribite.ui_hooks.editor' %}{# fix for #664 #}
            <fieldset>
                {{ hook }}
            </fieldset>
        {% endif %}
    {% endfor %}
{% endif %}

<div class="hidden">
{# include return control #}
{% if mode == 'create' %}
    <fieldset>
        <legend>{{ __('Return control') }}</legend>
        {{ form_row(form.repeatCreation) }}
    </fieldset>
{% endif %}
</div>

{# include possible submit actions #}
<div class="form-group form-buttons">
    <div class="col-sm-offset-3 col-sm-9">
        {% for action in actions %}
            {{ form_widget(attribute(form, action.id)) }}
        {% endfor %}
        {{ form_widget(form.reset) }}
        {{ form_widget(form.cancel) }}
    </div>
</div>
{#{ form_end(form) }#}
</div>
{% endblock %}
{% block footer %}
    {{ parent() }}

    {% set editImage = '<span class="fa fa-pencil-square-o"></span>' %}
    {% set deleteImage = '<span class="fa fa-trash-o"></span>' %}
    
    <script type="text/javascript">
    /* <![CDATA[ */
        
        
        ( function($) {
            $(document).ready(function() {
                mUImageInitEditForm('{{ mode }}', '{% if mode != 'create' %}{{ picture.id }}{% endif %}');
                mUImageInitUploadField('muimagemodule_picture_imageUpload_imageUpload');
            });
        })(jQuery);
    /* ]]> */
    </script>
 
<!-- The Load Image plugin is included for the preview images and image resizing functionality -->
<script src="//blueimp.github.io/JavaScript-Load-Image/js/load-image.all.min.js"></script>
<!-- The Canvas to Blob plugin is included for image resizing functionality -->
<script src="//blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>   

<script type="text/javascript">
/* <![CDATA[ */
/*jslint unparam: true, regexp: true */
/*global window, $ */
$(function () {
    'use strict';
    // Change this to the location of your server-side upload handler:
    var url = window.location.hostname === 'blueimp.github.io' ?
                '//jquery-file-upload.appspot.com/' : 'server/php/',
        uploadButton = $('<button/>')
            .addClass('btn btn-primary')
            .prop('disabled', true)
            .text('Processing...')
            .on('click', function () {
                var $this = $(this),
                    data = $this.data();
                $this
                    .off('click')
                    .text('Abort')
                    .on('click', function () {
                        $this.remove();
                        data.abort();
                    });
                data.submit().always(function () {
                    $this.remove();
                });
            });
    $('#fileupload').fileupload({
        url: url,
        dataType: 'json',
        autoUpload: false,
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
        maxFileSize: 999000,
        // Enable image resizing, except for Android and Opera,
        // which actually support image resizing, but fail to
        // send Blob objects via XHR requests:
        disableImageResize: /Android(?!.*Chrome)|Opera/
            .test(window.navigator.userAgent),
        previewMaxWidth: 100,
        previewMaxHeight: 100,
        previewCrop: true
    }).on('fileuploadadd', function (e, data) {
        data.context = $('<div/>').appendTo('#files');
        $.each(data.files, function (index, file) {
            var node = $('<p/>')
                    .append($('<span/>').text(file.name));
            if (!index) {
                node
                    .append('<br>')
                    .append(uploadButton.clone(true).data(data));
            }
            node.appendTo(data.context);
        });
    }).on('fileuploadprocessalways', function (e, data) {
        var index = data.index,
            file = data.files[index],
            node = $(data.context.children()[index]);
        if (file.preview) {
            node
                .prepend('<br>')
                .prepend(file.preview);
        }
        if (file.error) {
            node
                .append('<br>')
                .append($('<span class="text-danger"/>').text(file.error));
        }
        if (index + 1 === data.files.length) {
            data.context.find('button')
                .text('Upload')
                .prop('disabled', !!data.files.error);
        }
    }).on('fileuploadprogressall', function (e, data) {
        var progress = parseInt(data.loaded / data.total * 100, 10);
        $('#progress .progress-bar').css(
            'width',
            progress + '%'
        );
    }).on('fileuploaddone', function (e, data) {
        $.each(data.result.files, function (index, file) {
            if (file.url) {
                var link = $('<a>')
                    .attr('target', '_blank')
                    .prop('href', file.url);
                $(data.context.children()[index])
                    .wrap(link);
            } else if (file.error) {
                var error = $('<span class="text-danger"/>').text(file.error);
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            }
        });
    }).on('fileuploadfail', function (e, data) {
        $.each(data.files, function (index) {
            var error = $('<span class="text-danger"/>').text('File upload failed.');
            $(data.context.children()[index])
                .append('<br>')
                .append(error);
        });
    }).prop('disabled', !$.support.fileInput)
        .parent().addClass($.support.fileInput ? undefined : 'disabled');
});
/* ]]> */
</script>
{% endblock %}


