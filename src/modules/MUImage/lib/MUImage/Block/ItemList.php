<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu Feb 23 22:43:24 CET 2012.
 */

/**
 * Generic item list block implementation class
 */
class MUImage_Block_ItemList extends MUImage_Block_Base_ItemList
{
	/**
	 * Modify block settings
	 *
	 * @param        array       $blockinfo a blockinfo structure
	 * @return       output      the block form
	 */
	public function modify($blockinfo)
	{
		// Get current content
		$vars = BlockUtil::varsFromContent($blockinfo['content']);

		// set default values for all params which are not properly set
		if (!isset($vars['objectType']) || empty($vars['objectType'])) {
			$vars['objectType'] = 'album';
		}
		if (!isset($vars['selectalbum']) || !is_numeric($vars['selectalbum'])) {
			$vars['selectalbum'] = 0;
		}
		if (!isset($vars['sorting']) || empty($vars['sorting'])) {
			$vars['sorting'] = 'default';
		}
		if (!isset($vars['amount']) || !is_numeric($vars['amount'])) {
			$vars['amount'] = 5;
		}
		if (!isset($vars['template'])) {
			$vars['template'] = 'itemlist_' . $vars['objectType'] . '_display.tpl';
		}
		/*if (!isset($vars['filter'])) {
		 $vars['filter'] = '';
		 }*/

		// we take all albums for a dropdownlist
		$albums = MUImage_Util_View::getAlbums();

		$this->view->setCaching(false);

		// assign the approriate values
		$this->view->assign($vars);
		$this->view->assign('albums', $albums);

		// clear the block cache
		$this->view->clear_cache('block/itemlist_display.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_display.tpl');
		$this->view->clear_cache('block/itemlist_display_description.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_display_description.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_Thumbs_display.tpl');
        $this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_Slideshow_display.tpl');	
		// Return the output that has been generated by this function
		return $this->view->fetch('block/itemlist_modify.tpl');
	}

	/**
	 * Display the block
	 *
	 * @param        array       $blockinfo a blockinfo structure
	 * @return       output      the rendered block
	 */
	public function display($blockinfo)
	{
		// only show block content if the user has the required permissions
		if (!SecurityUtil::checkPermission('MUImage:ItemListBlock:', "$blockinfo[bid]::", ACCESS_OVERVIEW)) {
			return false;
		}

		// check if the module is available at all
		if (!ModUtil::available('MUImage')) {
			return false;
		}

		// get current block content
		$vars = BlockUtil::varsFromContent($blockinfo['content']);
		$vars['bid'] = $blockinfo['bid'];

		// set default values for all params which are not properly set
		if (!isset($vars['objectType']) || empty($vars['objectType'])) {
			$vars['objectType'] = 'album';
		}
		if (!isset($vars['selectalbum']) || !is_numeric($vars['selectalbum'])) {
			$vars['selectalbum'] = '';
		}
		if (!isset($vars['sorting']) || empty($vars['sorting'])) {
			$vars['sorting'] = 'default';
		}
		if (!isset($vars['amount']) || !is_numeric($vars['amount'])) {
			$vars['amount'] = 5;
		}
		if (!isset($vars['template'])) {
			$vars['template'] = 'itemlist_' . ucwords($vars['objectType']) . '_display.tpl';
		}
		if (!isset($vars['filter'])) {
			$vars['filter'] = '';
		}

		ModUtil::initOOModule('MUImage');

		if (!isset($vars['objectType']) || !in_array($vars['objectType'], MUImage_Util_Controller::getObjectTypes('block'))) {
			$vars['objectType'] = MUImage_Util_Controller::getDefaultObjectType('block');
		}

		$objectType = $vars['objectType'];

		$serviceManager = ServiceUtil::getManager();
		$entityManager = $serviceManager->getService('doctrine.entitymanager');
		$repository = $entityManager->getRepository('MUImage_Entity_' . ucfirst($objectType));

		$idFields = ModUtil::apiFunc('MUImage', 'selection', 'getIdFields', array('ot' => $objectType));

		$sortParam = '';
		if ($vars['sorting'] == 'random') {
			$sortParam = 'RAND()';
		} elseif ($vars['sorting'] == 'newest') {
			if (count($idFields) == 1) {
				$sortParam = $idFields[0] . ' DESC';
			} else {
				foreach ($idFields as $idField) {
					if (!empty($sortParam)) {
						$sortParam .= ', ';
					}
					$sortParam .= $idField . ' ASC';
				}
			}
		} elseif ($vars['sorting'] == 'default') {
			$sortParam = $repository->getDefaultSortingField() . ' ASC';
		}

		// get objects from database
		$selectionArgs = array(
            'ot'             => $objectType,
            'where'          => $vars['filter'],
            'orderBy'        => $sortParam,
            'currentPage'    => 1,
            'resultsPerPage' => $vars['amount']
		);

		if ($objectType == 'picture' && $vars['selectalbum'] > 0) {
			$selectionArgs['where'] .= 'tbl.album = \'' . DataUtil::formatForStore($vars['selectalbum']) . '\'';
		}

		list($entities, $objectCount) = ModUtil::apiFunc('MUImage', 'selection', 'getEntitiesPaginated', $selectionArgs);

		//$this->view->setCaching(true);

		// assign block vars and fetched data
		$this->view->assign('vars', $vars)
		->assign('objectType', $objectType)
		->assign('items', $entities)
		->assign($repository->getAdditionalTemplateParameters('block'));

		// set a block title
		if (empty($blockinfo['title'])) {
			$blockinfo['title'] = $this->__('MUImage items');
		}

		$output = '';
		$templateForObjectType = str_replace('itemlist_', 'itemlist_' . ucwords($objectType) . '_', $vars['template']);
		if ($this->view->template_exists('contenttype/' . $templateForObjectType)) {
			$output = $this->view->fetch('contenttype/' . $templateForObjectType);
		} elseif ($this->view->template_exists('contenttype/' . $vars['template'])) {
			$output = $this->view->fetch('contenttype/' . $vars['template']);
		} elseif ($this->view->template_exists('block/' . $templateForObjectType)) {
			$output = $this->view->fetch('block/' . $templateForObjectType);
		} elseif ($this->view->template_exists('block/' . $vars['template'])) {
			$output = $this->view->fetch('block/' . $vars['template']);
		} else {
			$output = $this->view->fetch('block/itemlist.tpl');
		}

		$blockinfo['content'] = $output;

		// return the block to the theme
		return BlockUtil::themeBlock($blockinfo);
	}

	/**
	 * Update block settings
	 *
	 * @param        array       $blockinfo a blockinfo structure
	 * @return       $blockinfo  the modified blockinfo structure
	 */
	public function update($blockinfo)
	{
		// Get current content
		$vars = BlockUtil::varsFromContent($blockinfo['content']);

		$vars['objectType'] = $this->request->getPost()->filter('objecttype', 'album', FILTER_SANITIZE_STRING);
		$vars['selectalbum'] = (int)$this->request->getPost()->filter('selectalbum', 0, FILTER_VALIDATE_INT);
		$vars['sorting'] = $this->request->getPost()->filter('sorting', 'default', FILTER_SANITIZE_STRING);
		$vars['amount'] = (int)$this->request->getPost()->filter('amount', 5, FILTER_VALIDATE_INT);
		$vars['template'] = $this->request->getPost()->get('template', '');
		$vars['filter'] = $this->request->getPost()->get('filter', '');

		if (!in_array($vars['objectType'], MUImage_Util_Controller::getObjectTypes('block'))) {
			$vars['objectType'] = MUImage_Util_Controller::getDefaultObjectType('block');
		}

		// write back the new contents
		$blockinfo['content'] = BlockUtil::varsToContent($vars);

		// clear the block cache
		$this->view->clear_cache('block/itemlist_display.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_display.tpl');
		$this->view->clear_cache('block/itemlist_display_description.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_display_description.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_Thumbs_display.tpl');
		$this->view->clear_cache('block/itemlist_' . ucwords($vars['objectType']) . '_Slideshow_display.tpl');	

		return $blockinfo;
	}

}
