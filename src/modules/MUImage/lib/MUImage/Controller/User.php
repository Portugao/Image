<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Sun Feb 19 15:20:07 CET 2012.
 */

/**
 * This is the User controller class providing navigation and interaction functionality.
 */
class MUImage_Controller_User extends MUImage_Controller_Base_User
{
	    /**
     * This method provides a generic item detail view.
     *
     * @param string  $ot           Treated object type.
     * @param string  $tpl          Name of alternative template (for alternative display options, feeds and xml output)
     * @param boolean $raw          Optional way to display a template instead of fetching it (needed for standalone output)
     * @return mixed Output.
     */
    public function display($args)
    {
    	$view = new Zikula_Request_Http();
    	$id = $view->getGet()->filter('id', 0 , FILTER_SANITIZE_STRING);
    	// DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUImage:Album:', $id.'::', ACCESS_READ));
        // DEBUG: permission check aspect ends
    	
    	if ($id != 0) {

    		$count = MUImage_Util_View::countPictures();
    		$count2 = MUImage_Util_View::countAlbums();
    		
    		$image = MUImage_Util_View::getImage();
    		
    		$this->view->assign('numpictures', $count);
    		$this->view->assign('numalbums', $count2);
    		$this->view->assign('image', $image);
    	}
    	
    	return parent::display($args);
    	
    }
    
    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     *
     * @return mixed Output.
     */
    public function zipUpload($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUImage::', '::', ACCESS_OVERVIEW));
        // DEBUG: permission check aspect ends

        // parameter specifying which type of objects we are treating
        $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->getGet()->filter('ot', 'album', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'multiUpload');
        if (!in_array($objectType, MUImage_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = MUImage_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
       // create new Form reference
        $view = FormUtil::newForm($this->name, $this);

        // build form handler class name
        $handlerClass = 'MUImage_Form_Handler_User_' . ucfirst($objectType) . '_ZipUpload';

        // execute form using supplied template and page event handler
        return $view->execute('user/' . $objectType . '/zipUpload.tpl', new $handlerClass());
    }

    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     *
     * @return mixed Output.
     */
    public function multiUpload($args)
    {
        // DEBUG: permission check aspect starts
        $this->throwForbiddenUnless(SecurityUtil::checkPermission('MUImage::', '::', ACCESS_OVERVIEW));
        // DEBUG: permission check aspect ends
            // parameter specifying which type of objects we are treating
        $objectType = (isset($args['ot']) && !empty($args['ot'])) ? $args['ot'] : $this->request->getGet()->filter('ot', 'picture', FILTER_SANITIZE_STRING);
        $utilArgs = array('controller' => 'user', 'action' => 'multiUpload');
        if (!in_array($objectType, MUImage_Util_Controller::getObjectTypes('controllerAction', $utilArgs))) {
            $objectType = MUImage_Util_Controller::getDefaultObjectType('controllerAction', $utilArgs);
        }
       // create new Form reference
        $view = FormUtil::newForm($this->name, $this);

        // build form handler class name
        $handlerClass = 'MUImage_Form_Handler_User_' . ucfirst($objectType) . '_MultiUpload';

        // execute form using supplied template and page event handler
        return $view->execute('user/' . $objectType . '/multiUpload.tpl', new $handlerClass());
    }
    
    /**
     * This is a custom method. Documentation for this will be improved in later versions.
     *
     * @return mixed Output.
     */
    public function editMulti($args)
    {

    	return ModUtil::func($this->name, 'user', 'view');
    }
}
