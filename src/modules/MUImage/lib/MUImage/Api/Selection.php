<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @package MUImage
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio 0.5.4 (http://modulestudio.de) at Thu Feb 23 22:43:24 CET 2012.
 */

/**
 * Selection api implementation class
 */
class MUImage_Api_Selection extends MUImage_Api_Base_Selection
{
	/**
	 * Select a list of parent entities by different criteria.
	 *
	 * @param string  $args['ot']             The object type to retrieve (optional)
	 * @param string  $args['where']          The where clause to use when retrieving the collection (optional) (default='').
	 * @param string  $args['orderBy']        The order-by clause to use when retrieving the collection (optional) (default='').
	 * @param integer $args['currentPage']    Where to start selection
	 * @param integer $args['resultsPerPage'] Amount of items to select
	 * @param boolean $args['useJoins']       Whether to include joining related objects (optional) (default=true).
	 *
	 * @return Array with retrieved collection and amount of total records affected by this query.
	 */
	public function getParentEntitiesPaginated($args)
	{
		$objectType = $this->determineObjectType($args, 'getEntitiesPaginated');
		$repository = $this->getRepository($objectType);
		
		$args['where'] = 'tbl.parent_id IS NULL';
	
		$where = isset($args['where']) ? $args['where'] : '';
		$orderBy = isset($args['orderBy']) ? $args['orderBy'] : '';
		$currentPage = isset($args['currentPage']) ? $args['currentPage'] : 1;
		$resultsPerPage = isset($args['resultsPerPage']) ? $args['resultsPerPage'] : 25;
		$useJoins = isset($args['useJoins']) ? ((bool)$args['useJoins']) : true;
	
		if ($orderBy == 'RAND()') {
			// random ordering is disabled for now, see https://github.com/Guite/MostGenerator/issues/143
			$orderBy = $repository->getDefaultSortingField();
		}
	
		return $repository->selectWherePaginated($where, $orderBy, $currentPage, $resultsPerPage, $useJoins);
	}    
}
