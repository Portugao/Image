<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\MUImageModule\Controller\Base;

use Symfony\Component\Security\Core\Exception\AccessDeniedException;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;

use ModUtil;
use PageUtil;
use ThemeUtil;
use UserUtil;
use Zikula\Core\Controller\AbstractController;
use Zikula\Core\Response\PlainResponse;

/**
 * Controller for external calls base class.
 */
class ExternalController extends AbstractController
{
    /**
     * List of object types allowing categorisation.
     *
     * @var array
     */
    protected $categorisableObjectTypes;


    /**
     * Displays one item of a certain object type using a separate template for external usages.
     *
     * @param string $ot          The currently treated object type
     * @param int    $id          Identifier of the entity to be shown
     * @param string $source      Source of this call (contentType or scribite)
     * @param string $displayMode Display mode (link or embed)
     *
     * @return string Desired data output
     */
    public function displayAction($ot, $id, $source, $displayMode)
    {
        $controllerHelper = $this->get('mu_muimage_module.controller_helper');
        
        $objectType = $ot;
        $utilArgs = ['controller' => 'external', 'action' => 'display'];
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }
        
        $component = $this->name . ':' . ucfirst($objectType) . ':';
        if (!$this->hasPermission($component, $id . '::', ACCESS_READ)) {
            return '';
        }
        
        $repository = $this->get('mu_muimage_module.' . $objectType . '_factory')->getRepository();
        $repository->setRequest($this->get('request_stack')->getCurrentRequest());
        $idFields = ModUtil::apiFunc('MUMUImageModule', 'selection', 'getIdFields', ['ot' => $objectType]);
        $idValues = ['id' => $id];
        
        $hasIdentifier = $controllerHelper->isValidIdentifier($idValues);
        if (!$hasIdentifier) {
            return $this->__('Error! Invalid identifier received.');
        }
        
        // assign object data fetched from the database
        $entity = $repository->selectById($idValues);
        if ((!is_array($entity) && !is_object($entity)) || !isset($entity[$idFields[0]])) {
            return $this->__('No such item.');
        }
        
        $entity->initWorkflow();
        
        $instance = $entity->createCompositeIdentifier() . '::';
        
        $templateParameters = [
            'objectType' => $objectType,
            'source' => $source,
            $objectType => $entity,
            'displayMode' => $displayMode
        ];
        
        return $this->render('@MUMUImageModule/External/' . ucfirst($objectType) . '/display.html.twig', $templateParameters);
    }
    
    /**
     * Popup selector for Scribite plugins.
     * Finds items of a certain object type.
     *
     * @param string $objectType The object type
     * @param string $editor     Name of used Scribite editor
     * @param string $sort       Sorting field
     * @param string $sortdir    Sorting direction
     * @param int    $pos        Current pager position
     * @param int    $num        Amount of entries to display
     *
     * @return output The external item finder page
     *
     * @throws AccessDeniedException Thrown if the user doesn't have required permissions
     */
    public function finderAction($objectType, $editor, $sort, $sortdir, $pos = 1, $num = 0)
    {
        PageUtil::addVar('stylesheet', '@MUMUImageModule/Resources/public/css/style.css');
        
        $getData = $this->request->query;
        $controllerHelper = $this->get('mu_muimage_module.controller_helper');
        
        $utilArgs = ['controller' => 'external', 'action' => 'finder'];
        if (!in_array($objectType, $controllerHelper->getObjectTypes('controller', $utilArgs))) {
            $objectType = $controllerHelper->getDefaultObjectType('controllerType', $utilArgs);
        }
        
        if (!$this->hasPermission('MUMUImageModule:' . ucfirst($objectType) . ':', '::', ACCESS_COMMENT)) {
            throw new AccessDeniedException();
        }
        
        $repository = $this->get('mu_muimage_module.' . $objectType . '_factory')->getRepository();
        $repository->setRequest($this->get('request_stack')->getCurrentRequest());
        
        if (empty($editor) || !in_array($editor, ['xinha', 'tinymce', 'ckeditor'])) {
            return $this->__('Error: Invalid editor context given for external controller action.');
        }
        
        // fetch selected categories to reselect them in the output
        // the actual filtering is done inside the repository class
        $categoryIds = ModUtil::apiFunc('MUMUImageModule', 'category', 'retrieveCategoriesFromRequest', ['ot' => $objectType, 'source' => 'GET']);
        if (empty($sort) || !in_array($sort, $repository->getAllowedSortingFields())) {
            $sort = $repository->getDefaultSortingField();
        }
        
        $sdir = strtolower($sortdir);
        if ($sdir != 'asc' && $sdir != 'desc') {
            $sdir = 'asc';
        }
        
        $sortParam = $sort . ' ' . $sdir;
        
        // the current offset which is used to calculate the pagination
        $currentPage = (int) $pos;
        
        // the number of items displayed on a page for pagination
        $resultsPerPage = (int) $num;
        if ($resultsPerPage == 0) {
            $resultsPerPage = $this->getVar('pageSize', 20);
        }
        $where = '';
        list($entities, $objectCount) = $repository->selectWherePaginated($where, $sortParam, $currentPage, $resultsPerPage);
        
        foreach ($entities as $k => $entity) {
            $entity->initWorkflow();
        }
        
        $templateParameters = [
            'editorName' => $editor,
            'objectType' => $objectType,
            'items' => $entities,
            'sort' => $sort,
            'sortdir' => $sdir,
            'currentPage' => $currentPage,
            'pager', ['numitems' => $objectCount, 'itemsperpage' => $resultsPerPage]
        ];
        
        $formOptions = [
            'objectType' => $objectType,
            'editorName' => $editor
        ];
        $form = $this->createForm('MU\MUImageModule\Form\Type\Finder\\' . ucfirst($objectType) . 'FinderType', $templateParameters, $formOptions);
        
        $templateParameters['finderForm'] = $form->createView();
        
        
        return $this->render('@MUMUImageModule/External/' . ucfirst($objectType) . '/find.html.twig', $templateParameters);
    }
}
