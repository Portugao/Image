<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\MUImageModule\Block\Base;

use ModUtil;
use Zikula\BlocksModule\AbstractBlockHandler;
use Zikula\Core\AbstractBundle;

/**
 * Generic item list block base class.
 */
class ItemListBlock extends AbstractBlockHandler
{
    /**
     * List of object types allowing categorisation.
     *
     * @var array
     */
    protected $categorisableObjectTypes;
    
    /**
     * Constructor.
     *
     * @param AbstractBundle $bundle An AbstractBundle instance
     *
     * @throws \InvalidArgumentException
     */
    public function __construct(AbstractBundle $bundle)
    {
        parent::__construct($bundle);
    
        $this->categorisableObjectTypes = ['album'];
    }
    
    /**
     * Display the block content.
     *
     * @param array $properties The block properties array
    
     * @return array|string
     */
    public function display(array $properties)
    {
        // only show block content if the user has the required permissions
        if (!$this->hasPermission('MUMUImageModule:ItemListBlock:', "$properties[title]::", ACCESS_OVERVIEW)) {
            return false;
        }
    
        // set default values for all params which are not properly set
        $defaults = $this->getDefaults();
        $properties = array_merge($defaults, $properties);
    
        $properties = $this->resolveCategoryIds($properties);
    
        $controllerHelper = $this->get('mu_muimage_module.controller_helper');
        $utilArgs = ['name' => 'list'];
        if (!isset($properties['objectType']) || !in_array($properties['objectType'], $controllerHelper->getObjectTypes('block', $utilArgs))) {
            $properties['objectType'] = $controllerHelper->getDefaultObjectType('block', $utilArgs);
        }
    
        $objectType = $properties['objectType'];
    
        $repository = $this->get('mu_muimage_module.' . $objectType . '_factory')->getRepository();
    
    
        // create query
        $where = $properties['filter'];
        $orderBy = $this->getSortParam($properties, $repository);
        $qb = $repository->genericBaseQuery($where, $orderBy);
    
        // fetch category registries
        $catProperties = null;
        if (in_array($objectType, $this->categorisableObjectTypes)) {
            $catProperties = ModUtil::apiFunc('MUMUImageModule', 'category', 'getAllProperties', ['ot' => $objectType]);
            // apply category filters
            if (is_array($properties['catIds']) && count($properties['catIds']) > 0) {
                $qb = ModUtil::apiFunc('MUMUImageModule', 'category', 'buildFilterClauses', ['qb' => $qb, 'ot' => $objectType, 'catids' => $properties['catIds']]);
            }
        }
    
        // get objects from database
        $currentPage = 1;
        $resultsPerPage = $properties['amount'];
        list($query, $count) = $repository->getSelectWherePaginatedQuery($qb, $currentPage, $resultsPerPage);
        $entities = $repository->retrieveCollectionResult($query, $orderBy, true);
    
        // set a block title
        if (empty($properties['title'])) {
            $properties['title'] = $this->__('MUMUImageModule items');
        }
    
        $template = $this->getDisplayTemplate($properties);
    
        $templateParameters = [
            'vars' => $properties,
            'objectType' => $objectType,
            'items' => $entities,
            'properties' => $properties
        ];
        $templateParameters = array_merge($templateParameters, $repository->getAdditionalTemplateParameters('block'));
    
        return $this->renderView($template, $templateParameters);
    }
    
    /**
     * Returns the template used for output.
     *
     * @param array $properties The block properties array
     *
     * @return string the template path
     */
    protected function getDisplayTemplate(array $properties)
    {
        $templateFile = $properties['template'];
        if ($templateFile == 'custom') {
            $templateFile = $properties['customTemplate'];
        }
    
        $templateForObjectType = str_replace('itemlist_', 'itemlist_' . $properties['objectType'] . '_', $templateFile);
    
        $template = '';
        if ($this->view->template_exists('ContentType/' . $templateForObjectType)) {
            $template = 'ContentType/' . $templateForObjectType;
        } elseif ($this->view->template_exists('Block/' . $templateForObjectType)) {
            $template = 'Block/' . $templateForObjectType;
        } elseif ($this->view->template_exists('ContentType/' . $templateFile)) {
            $template = 'ContentType/' . $templateFile;
        } elseif ($this->view->template_exists('Block/' . $templateFile)) {
            $template = 'Block/' . $templateFile;
        } else {
            $template = 'Block/itemlist.html.twig';
        }
        $template = '@MUMUImageModule/' . $template;
    
        return $template;
    }
    
    /**
     * Determines the order by parameter for item selection.
     *
     * @param array               $properties The block properties array
     * @param Doctrine_Repository $repository The repository used for data fetching
     *
     * @return string the sorting clause
     */
    protected function getSortParam(array $properties, $repository)
    {
        if ($properties['sorting'] == 'random') {
            return 'RAND()';
        }
    
        $sortParam = '';
        if ($properties['sorting'] == 'newest') {
            $idFields = ModUtil::apiFunc('MUMUImageModule', 'selection', 'getIdFields', ['ot' => $properties['objectType']]);
            if (count($idFields) == 1) {
                $sortParam = $idFields[0] . ' DESC';
            } else {
                foreach ($idFields as $idField) {
                    if (!empty($sortParam)) {
                        $sortParam .= ', ';
                    }
                    $sortParam .= $idField . ' DESC';
                }
            }
        } elseif ($properties['sorting'] == 'default') {
            $sortParam = $repository->getDefaultSortingField() . ' ASC';
        }
    
        return $sortParam;
    }
    
    /**
     * Returns the fully qualified class name of the block's form class.
     *
     * @return string Template path
     */
    public function getFormClassName()
    {
        return 'MU\MUImageModule\Block\Form\Type\ItemListBlockType';
    }
    
    /**
     * Returns any array of form options.
     *
     * @return array Options array
     */
    public function getFormOptions()
    {
        return [
            'objectType' => $properties['objectType'],
            'isCategorisable' => in_array($properties['objectType'], $this->categorisableObjectTypes)
        ];
    }
    
    /**
     * Returns the template used for rendering the editing form.
     *
     * @return string Template path
     */
    public function getFormTemplate()
    {
        return '@MUMUImageModule/Block/itemlist_modify.html.twig';
    }
    
    /**
     * Returns default settings for this block.
     *
     * @return array The default settings
     */
    protected function getDefaults()
    {
        $defaults = [
            'objectType' => 'album',
            'sorting' => 'default',
            'amount' => 5,
            'template' => 'itemlist_display.html.twig',
            'customTemplate' => '',
            'filter' => ''
        ];
    
        return $defaults;
    }
    
    
    /**
     * Resolves category filter ids.
     *
     * @param array $properties The block properties array
     *
     * @return array The updated block properties
     */
    protected function resolveCategoryIds(array $properties)
    {
        if (!isset($properties['catIds'])) {
            $primaryRegistry = ModUtil::apiFunc('MUMUImageModule', 'category', 'getPrimaryProperty', ['ot' => $properties['objectType']]);
            $properties['catIds'] = [$primaryRegistry => []];
        } elseif (!is_array($properties['catIds'])) {
            $properties['catIds'] = explode(',', $properties['catIds']);
        }
    
        return $properties;
    }
}
