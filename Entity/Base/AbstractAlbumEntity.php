<?php
/**
 * Image.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\ImageModule\Entity\Base;

use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Gedmo\Mapping\Annotation as Gedmo;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use MU\ImageModule\Traits\EntityWorkflowTrait;
use MU\ImageModule\Traits\StandardFieldsTrait;

use DataUtil;
use RuntimeException;
use ServiceUtil;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for album entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractAlbumEntity extends EntityAccess
{
    /**
     * Hook entity workflow field and behaviour.
     */
    use EntityWorkflowTrait;

    /**
     * Hook standard fields behaviour embedding createdBy, updatedBy, createdDate, updatedDate fields.
     */
    use StandardFieldsTrait;

    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'album';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255, unique=true)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * @ORM\Column(name="parent_id", type="integer", nullable=true)
     * @var integer $parent_id
     */
    protected $parent_id = 0;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getAlbumAccessAllowedValues", multiple=false)
     * @var string $albumAccess
     */
    protected $albumAccess = null;
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $passwordAccess
     */
    protected $passwordAccess = '';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $myFriends
     */
    protected $myFriends = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $notInFrontend
     */
    protected $notInFrontend = false;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=2147483647, message="Length of field value must not be higher than 11.")) {
     * @var integer $pos
     */
    protected $pos = 0;
    
    
    /**
     * @ORM\OneToMany(targetEntity="\MU\ImageModule\Entity\AlbumCategoryEntity", 
     *                mappedBy="entity", cascade={"all"}, 
     *                orphanRemoval=true)
     * @var \MU\ImageModule\Entity\AlbumCategoryEntity
     */
    protected $categories = null;
    
    /**
     * Bidirectional - Many albums [albums] are linked by one album [album] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\ImageModule\Entity\AlbumEntity", inversedBy="albums")
     * @ORM\JoinTable(name="mu_muimage_album",
     *      joinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" )},
     *      inverseJoinColumns={@ORM\JoinColumn(name="parent_id", referencedColumnName="id" )}
     * )
     * @Assert\Type(type="MU\ImageModule\Entity\AlbumEntity")
     * @Assert\Valid()
     * @var \MU\ImageModule\Entity\AlbumEntity $album
     */
    protected $album;
    
    /**
     * Bidirectional - One album [album] has many albums [albums] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\ImageModule\Entity\AlbumEntity", mappedBy="album")
     * @ORM\JoinTable(name="mu_muimage_albumalbums",
     *      joinColumns={@ORM\JoinColumn(name="parent_id", referencedColumnName="id" )},
     *      inverseJoinColumns={@ORM\JoinColumn(name="id", referencedColumnName="id" )}
     * )
     * @var \MU\ImageModule\Entity\AlbumEntity[] $albums
     */
    protected $albums = null;
    
    /**
     * Bidirectional - One album [album] has many pictures [pictures] (INVERSE SIDE).
     *
     * @ORM\OneToMany(targetEntity="MU\ImageModule\Entity\PictureEntity", mappedBy="album")
     * @ORM\JoinTable(name="mu_muimage_albumpictures")
     * @var \MU\ImageModule\Entity\PictureEntity[] $pictures
     */
    protected $pictures = null;
    
    
    /**
     * AlbumEntity constructor.
     *
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $serviceManager = ServiceUtil::getManager();
        $this->pos = 1;
        
        $listHelper = $serviceManager->get('mu_image_module.listentries_helper');
        
        $items = [];
        $listEntries = $listHelper->getAlbumAccessEntriesForAlbum();
        foreach ($listEntries as $listEntry) {
            if (true === $listEntry['default']) {
                $items[] = $listEntry['value'];
            }
        }
        $this->albumAccess = implode('###', $items);
        
        $this->initWorkflow();
        $this->albums = new ArrayCollection();
        $this->pictures = new ArrayCollection();
        $this->categories = new ArrayCollection();
    }
    
    /**
     * Returns the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Returns the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    
    /**
     * Returns the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = intval($id);
    }
    
    /**
     * Returns the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = isset($workflowState) ? $workflowState : '';
    }
    
    /**
     * Returns the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = isset($title) ? $title : '';
    }
    
    /**
     * Returns the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = isset($description) ? $description : '';
    }
    
    /**
     * Returns the parent_id.
     *
     * @return integer
     */
    public function getParent_id()
    {
        return $this->parent_id;
    }
    
    /**
     * Sets the parent_id.
     *
     * @param integer $parent_id
     *
     * @return void
     */
    public function setParent_id($parent_id)
    {
        $this->parent_id = intval($parent_id);
    }
    
    /**
     * Returns the album access.
     *
     * @return string
     */
    public function getAlbumAccess()
    {
        return $this->albumAccess;
    }
    
    /**
     * Sets the album access.
     *
     * @param string $albumAccess
     *
     * @return void
     */
    public function setAlbumAccess($albumAccess)
    {
        $this->albumAccess = isset($albumAccess) ? $albumAccess : '';
    }
    
    /**
     * Returns the password access.
     *
     * @return string
     */
    public function getPasswordAccess()
    {
        return $this->passwordAccess;
    }
    
    /**
     * Sets the password access.
     *
     * @param string $passwordAccess
     *
     * @return void
     */
    public function setPasswordAccess($passwordAccess)
    {
        $this->passwordAccess = isset($passwordAccess) ? $passwordAccess : '';
    }
    
    /**
     * Returns the my friends.
     *
     * @return string
     */
    public function getMyFriends()
    {
        return $this->myFriends;
    }
    
    /**
     * Sets the my friends.
     *
     * @param string $myFriends
     *
     * @return void
     */
    public function setMyFriends($myFriends)
    {
        $this->myFriends = isset($myFriends) ? $myFriends : '';
    }
    
    /**
     * Returns the not in frontend.
     *
     * @return boolean
     */
    public function getNotInFrontend()
    {
        return $this->notInFrontend;
    }
    
    /**
     * Sets the not in frontend.
     *
     * @param boolean $notInFrontend
     *
     * @return void
     */
    public function setNotInFrontend($notInFrontend)
    {
        if ($notInFrontend !== $this->notInFrontend) {
            $this->notInFrontend = (bool)$notInFrontend;
        }
    }
    
    /**
     * Returns the pos.
     *
     * @return integer
     */
    public function getPos()
    {
        return $this->pos;
    }
    
    /**
     * Sets the pos.
     *
     * @param integer $pos
     *
     * @return void
     */
    public function setPos($pos)
    {
        $this->pos = intval($pos);
    }
    
    /**
     * Returns the categories.
     *
     * @return ArrayCollection[]
     */
    public function getCategories()
    {
        return $this->categories;
    }
    
    
    /**
     * Sets the categories.
     *
     * @param ArrayCollection $categories
     *
     * @return void
     */
    public function setCategories(ArrayCollection $categories)
    {
        foreach ($this->categories as $category) {
            if (false === $key = $this->collectionContains($categories, $category)) {
                $this->categories->removeElement($category);
            } else {
                $categories->remove($key);
            }
        }
        foreach ($categories as $category) {
            $this->categories->add($category);
        }
    }
    
    /**
     * Checks if a collection contains an element based only on two criteria (categoryRegistryId, category).
     *
     * @param ArrayCollection $collection
     * @param \MU\ImageModule\Entity\AlbumCategoryEntity $element
     *
     * @return bool|int
     */
    private function collectionContains(ArrayCollection $collection, \MU\ImageModule\Entity\AlbumCategoryEntity $element)
    {
        foreach ($collection as $key => $category) {
            /** @var \MU\ImageModule\Entity\AlbumCategoryEntity $category */
            if ($category->getCategoryRegistryId() == $element->getCategoryRegistryId()
                && $category->getCategory() == $element->getCategory()
            ) {
                return $key;
            }
        }
    
        return false;
    }
    
    /**
     * Returns the album.
     *
     * @return \MU\ImageModule\Entity\AlbumEntity
     */
    public function getAlbum()
    {
        return $this->album;
    }
    
    /**
     * Sets the album.
     *
     * @param \MU\ImageModule\Entity\AlbumEntity $album
     *
     * @return void
     */
    public function setAlbum($album = null)
    {
        $this->album = $album;
    }
    
    /**
     * Returns the albums.
     *
     * @return \MU\ImageModule\Entity\AlbumEntity[]
     */
    public function getAlbums()
    {
        return $this->albums;
    }
    
    /**
     * Sets the albums.
     *
     * @param \MU\ImageModule\Entity\AlbumEntity[] $albums
     *
     * @return void
     */
    public function setAlbums($albums)
    {
        foreach ($albums as $albumSingle) {
            $this->addAlbums($albumSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\ImageModule\Entity\AlbumEntity to the list of albums.
     *
     * @param \MU\ImageModule\Entity\AlbumEntity $album The instance to be added to the collection
     *
     * @return void
     */
    public function addAlbums(\MU\ImageModule\Entity\AlbumEntity $album)
    {
        $this->albums->add($album);
        $album->setAlbum($this);
    }
    
    /**
     * Removes an instance of \MU\ImageModule\Entity\AlbumEntity from the list of albums.
     *
     * @param \MU\ImageModule\Entity\AlbumEntity $album The instance to be removed from the collection
     *
     * @return void
     */
    public function removeAlbums(\MU\ImageModule\Entity\AlbumEntity $album)
    {
        $this->albums->removeElement($album);
        $album->setAlbum(null);
    }
    
    /**
     * Returns the pictures.
     *
     * @return \MU\ImageModule\Entity\PictureEntity[]
     */
    public function getPictures()
    {
        return $this->pictures;
    }
    
    /**
     * Sets the pictures.
     *
     * @param \MU\ImageModule\Entity\PictureEntity[] $pictures
     *
     * @return void
     */
    public function setPictures($pictures)
    {
        foreach ($pictures as $pictureSingle) {
            $this->addPictures($pictureSingle);
        }
    }
    
    /**
     * Adds an instance of \MU\ImageModule\Entity\PictureEntity to the list of pictures.
     *
     * @param \MU\ImageModule\Entity\PictureEntity $picture The instance to be added to the collection
     *
     * @return void
     */
    public function addPictures(\MU\ImageModule\Entity\PictureEntity $picture)
    {
        $this->pictures->add($picture);
        $picture->setAlbum($this);
    }
    
    /**
     * Removes an instance of \MU\ImageModule\Entity\PictureEntity from the list of pictures.
     *
     * @param \MU\ImageModule\Entity\PictureEntity $picture The instance to be removed from the collection
     *
     * @return void
     */
    public function removePictures(\MU\ImageModule\Entity\PictureEntity $picture)
    {
        $this->pictures->removeElement($picture);
        $picture->setAlbum(null);
    }
    
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $listHelper = ServiceUtil::get('mu_image_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getTitle();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('mu_image_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForAlbum();
    
        $allowedValues = ['initial'];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Returns a list of possible choices for the albumAccess list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getAlbumAccessAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('mu_image_module.listentries_helper');
        $listEntries = $helper->getAlbumAccessEntriesForAlbum();
    
        $allowedValues = [];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if (true === $this->_bypassValidation) {
            return true;
        }
    
        
        $serviceManager = ServiceUtil::getManager();
    
        $validator = $serviceManager->get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $flashBag = $serviceManager->get('session')->getFlashBag();
            foreach ($errors as $error) {
                $flashBag->add('error', $error->getMessage());
            }
    
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'muimagemodule.ui_hooks.albums';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return 'Album ' . $this->createCompositeIdentifier() . ': ' . $this->getTitleFromDisplayPattern();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // if the entity has no identity do nothing, do NOT throw an exception
        if (!($this->id)) {
            return;
        }
    
        // otherwise proceed
    
        // unset identifiers
        $this->setId(0);
    
        // reset workflow
        $this->resetWorkflow();
    
        $this->setCreatedBy(null);
        $this->setCreatedDate(null);
        $this->setUpdatedBy(null);
        $this->setUpdatedDate(null);
    
    
        // clone categories
        $categories = $this->categories;
        $this->categories = new ArrayCollection();
        foreach ($categories as $c) {
            $newCat = clone $c;
            $this->categories->add($newCat);
            $newCat->setEntity($this);
        }
    }
}
