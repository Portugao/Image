<?php
/**
 * MUImage.
 *
 * @copyright Michael Ueberschaer (MU)
 * @license http://www.gnu.org/licenses/lgpl.html GNU Lesser General Public License
 * @author Michael Ueberschaer <kontakt@webdesign-in-bremen.com>.
 * @link http://www.webdesign-in-bremen.com
 * @link http://zikula.org
 * @version Generated by ModuleStudio (http://modulestudio.de).
 */

namespace MU\MUImageModule\Entity\Base;

use MU\MUImageModule\MUImageEvents;
use MU\MUImageModule\Event\FilterPictureEvent;
use Doctrine\ORM\Mapping as ORM;
use Gedmo\Mapping\Annotation as Gedmo;
use DoctrineExtensions\StandardFields\Mapping\Annotation as ZK;
use Symfony\Component\Validator\Constraints as Assert;

use DataUtil;
use FormUtil;
use RuntimeException;
use ServiceUtil;
use System;
use UserUtil;
use Zikula_Workflow_Util;
use Zikula\Core\Doctrine\EntityAccess;

/**
 * Entity class that defines the entity structure and behaviours.
 *
 * This is the base entity class for picture entities.
 * The following annotation marks it as a mapped superclass so subclasses
 * inherit orm properties.
 *
 * @ORM\MappedSuperclass
 *
 * @abstract
 */
abstract class AbstractPictureEntity extends EntityAccess
{
    /**
     * @var string The tablename this object maps to
     */
    protected $_objectType = 'picture';
    
    /**
     * @Assert\Type(type="bool")
     * @var boolean Option to bypass validation if needed
     */
    protected $_bypassValidation = false;
    
    /**
     * @Assert\Type(type="array")
     * @var array List of available item actions
     */
    protected $_actions = [];
    
    /**
     * @var array The current workflow data of this object
     */
    protected $__WORKFLOW__ = [];
    
    /**
     * @ORM\Id
     * @ORM\GeneratedValue(strategy="AUTO")
     * @ORM\Column(type="integer", unique=true)
     * @var integer $id
     */
    protected $id = 0;
    
    /**
     * the current workflow state
     * @ORM\Column(length=20)
     * @Assert\NotBlank()
     * @Assert\Choice(callback="getWorkflowStateAllowedValues", multiple=false)
     * @var string $workflowState
     */
    protected $workflowState = 'initial';
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="255")
     * @var string $title
     */
    protected $title = '';
    
    /**
     * @ORM\Column(type="text", length=2000)
     * @Assert\NotNull()
     * @Assert\Length(min="0", max="2000")
     * @var text $description
     */
    protected $description = '';
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showTitle
     */
    protected $showTitle = false;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $showDescription
     */
    protected $showDescription = false;
    
    /**
     * Image upload meta data array.
     *
     * @ORM\Column(type="array")
     * @Assert\Type(type="array")
     * @var array $imageUploadMeta
     */
    protected $imageUploadMeta = [];
    
    /**
     * @ORM\Column(length=255)
     * @Assert\NotBlank()
     * @Assert\Length(min="0", max="255")
     * @var string $imageUpload
     */
    protected $imageUpload = '';
    
    /**
     * The full path to the image upload.
     *
     * @Assert\Type(type="string")
     * @var string $imageUploadFullPath
     */
    protected $imageUploadFullPath = '';
    
    /**
     * Full image upload path as url.
     *
     * @Assert\Type(type="string")
     * @var string $imageUploadFullPathUrl
     */
    protected $imageUploadFullPathUrl = '';
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotNull()
     * @Assert\LessThan(value=2147483647, message="Length of field value must not be higher than 11.")) {
     * @var integer $imageView
     */
    protected $imageView = 0;
    
    /**
     * @ORM\Column(type="boolean")
     * @Assert\NotNull()
     * @Assert\Type(type="bool")
     * @var boolean $albumImage
     */
    protected $albumImage = false;
    
    /**
     * @ORM\Column(type="integer")
     * @Assert\Type(type="integer")
     * @Assert\NotBlank()
     * @Assert\NotEqualTo(value=0)
     * @Assert\LessThan(value=2147483647, message="Length of field value must not be higher than 11.")) {
     * @var integer $pos
     */
    protected $pos = 0;
    
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="create")
     * @Assert\Type(type="integer")
     * @var integer $createdUserId
     */
    protected $createdUserId;
    
    /**
     * @ORM\Column(type="integer")
     * @ZK\StandardFields(type="userid", on="update")
     * @Assert\Type(type="integer")
     * @var integer $updatedUserId
     */
    protected $updatedUserId;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="create")
     * @Assert\DateTime()
     * @var \DateTime $createdDate
     */
    protected $createdDate;
    
    /**
     * @ORM\Column(type="datetime")
     * @Gedmo\Timestampable(on="update")
     * @Assert\DateTime()
     * @var \DateTime $updatedDate
     */
    protected $updatedDate;
    
    /**
     * Bidirectional - Many picture [pictures] are linked by one album [album] (OWNING SIDE).
     *
     * @ORM\ManyToOne(targetEntity="MU\MUImageModule\Entity\AlbumEntity", inversedBy="picture")
     * @ORM\JoinTable(name="mu_muimage_album")
     * @Assert\Type(type="MU\MUImageModule\Entity\AlbumEntity")
     * @Assert\Valid()
     * @var \MU\MUImageModule\Entity\AlbumEntity $album
     */
    protected $album;
    
    
    /**
     * Constructor.
     * Will not be called by Doctrine and can therefore be used
     * for own implementation purposes. It is also possible to add
     * arbitrary arguments as with every other class method.
     *
     * @param TODO
     */
    public function __construct()
    {
        $this->pos = 1;
        $this->workflowState = 'initial';
        $this->initWorkflow();
    }
    
    /**
     * Gets the _object type.
     *
     * @return string
     */
    public function get_objectType()
    {
        return $this->_objectType;
    }
    
    /**
     * Sets the _object type.
     *
     * @param string $_objectType
     *
     * @return void
     */
    public function set_objectType($_objectType)
    {
        $this->_objectType = $_objectType;
    }
    
    /**
     * Gets the _bypass validation.
     *
     * @return boolean
     */
    public function get_bypassValidation()
    {
        return $this->_bypassValidation;
    }
    
    /**
     * Sets the _bypass validation.
     *
     * @param boolean $_bypassValidation
     *
     * @return void
     */
    public function set_bypassValidation($_bypassValidation)
    {
        $this->_bypassValidation = $_bypassValidation;
    }
    
    /**
     * Gets the _actions.
     *
     * @return array
     */
    public function get_actions()
    {
        return $this->_actions;
    }
    
    /**
     * Sets the _actions.
     *
     * @param array $_actions
     *
     * @return void
     */
    public function set_actions(array $_actions = [])
    {
        $this->_actions = $_actions;
    }
    
    /**
     * Gets the __ w o r k f l o w__.
     *
     * @return array
     */
    public function get__WORKFLOW__()
    {
        return $this->__WORKFLOW__;
    }
    
    /**
     * Sets the __ w o r k f l o w__.
     *
     * @param array $__WORKFLOW__
     *
     * @return void
     */
    public function set__WORKFLOW__(array $__WORKFLOW__ = [])
    {
        $this->__WORKFLOW__ = $__WORKFLOW__;
    }
    
    
    /**
     * Gets the id.
     *
     * @return integer
     */
    public function getId()
    {
        return $this->id;
    }
    
    /**
     * Sets the id.
     *
     * @param integer $id
     *
     * @return void
     */
    public function setId($id)
    {
        $this->id = $id;
    }
    
    /**
     * Gets the workflow state.
     *
     * @return string
     */
    public function getWorkflowState()
    {
        return $this->workflowState;
    }
    
    /**
     * Sets the workflow state.
     *
     * @param string $workflowState
     *
     * @return void
     */
    public function setWorkflowState($workflowState)
    {
        $this->workflowState = $workflowState;
    }
    
    /**
     * Gets the title.
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->title;
    }
    
    /**
     * Sets the title.
     *
     * @param string $title
     *
     * @return void
     */
    public function setTitle($title)
    {
        $this->title = $title;
    }
    
    /**
     * Gets the description.
     *
     * @return text
     */
    public function getDescription()
    {
        return $this->description;
    }
    
    /**
     * Sets the description.
     *
     * @param text $description
     *
     * @return void
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }
    
    /**
     * Gets the show title.
     *
     * @return boolean
     */
    public function getShowTitle()
    {
        return $this->showTitle;
    }
    
    /**
     * Sets the show title.
     *
     * @param boolean $showTitle
     *
     * @return void
     */
    public function setShowTitle($showTitle)
    {
        if ($showTitle !== $this->showTitle) {
            $this->showTitle = (bool)$showTitle;
        }
    }
    
    /**
     * Gets the show description.
     *
     * @return boolean
     */
    public function getShowDescription()
    {
        return $this->showDescription;
    }
    
    /**
     * Sets the show description.
     *
     * @param boolean $showDescription
     *
     * @return void
     */
    public function setShowDescription($showDescription)
    {
        if ($showDescription !== $this->showDescription) {
            $this->showDescription = (bool)$showDescription;
        }
    }
    
    /**
     * Gets the image upload.
     *
     * @return string
     */
    public function getImageUpload()
    {
        return $this->imageUpload;
    }
    
    /**
     * Sets the image upload.
     *
     * @param string $imageUpload
     *
     * @return void
     */
    public function setImageUpload($imageUpload)
    {
        $this->imageUpload = $imageUpload;
    }
    
    /**
     * Gets the image upload full path.
     *
     * @return string
     */
    public function getImageUploadFullPath()
    {
        return $this->imageUploadFullPath;
    }
    
    /**
     * Sets the image upload full path.
     *
     * @param string $imageUploadFullPath
     *
     * @return void
     */
    public function setImageUploadFullPath($imageUploadFullPath)
    {
        $this->imageUploadFullPath = $imageUploadFullPath;
    }
    
    /**
     * Gets the image upload full path url.
     *
     * @return string
     */
    public function getImageUploadFullPathUrl()
    {
        return $this->imageUploadFullPathUrl;
    }
    
    /**
     * Sets the image upload full path url.
     *
     * @param string $imageUploadFullPathUrl
     *
     * @return void
     */
    public function setImageUploadFullPathUrl($imageUploadFullPathUrl)
    {
        $this->imageUploadFullPathUrl = $imageUploadFullPathUrl;
    }
    
    /**
     * Gets the image upload meta.
     *
     * @return array
     */
    public function getImageUploadMeta()
    {
        return $this->imageUploadMeta;
    }
    
    /**
     * Sets the image upload meta.
     *
     * @param array $imageUploadMeta
     *
     * @return void
     */
    public function setImageUploadMeta($imageUploadMeta = [])
    {
        $this->imageUploadMeta = $imageUploadMeta;
    }
    
    /**
     * Gets the image view.
     *
     * @return integer
     */
    public function getImageView()
    {
        return $this->imageView;
    }
    
    /**
     * Sets the image view.
     *
     * @param integer $imageView
     *
     * @return void
     */
    public function setImageView($imageView)
    {
        $this->imageView = $imageView;
    }
    
    /**
     * Gets the album image.
     *
     * @return boolean
     */
    public function getAlbumImage()
    {
        return $this->albumImage;
    }
    
    /**
     * Sets the album image.
     *
     * @param boolean $albumImage
     *
     * @return void
     */
    public function setAlbumImage($albumImage)
    {
        if ($albumImage !== $this->albumImage) {
            $this->albumImage = (bool)$albumImage;
        }
    }
    
    /**
     * Gets the pos.
     *
     * @return integer
     */
    public function getPos()
    {
        return $this->pos;
    }
    
    /**
     * Sets the pos.
     *
     * @param integer $pos
     *
     * @return void
     */
    public function setPos($pos)
    {
        $this->pos = $pos;
    }
    
    /**
     * Gets the created user id.
     *
     * @return integer
     */
    public function getCreatedUserId()
    {
        return $this->createdUserId;
    }
    
    /**
     * Sets the created user id.
     *
     * @param integer $createdUserId
     *
     * @return void
     */
    public function setCreatedUserId($createdUserId)
    {
        $this->createdUserId = $createdUserId;
    }
    
    /**
     * Gets the updated user id.
     *
     * @return integer
     */
    public function getUpdatedUserId()
    {
        return $this->updatedUserId;
    }
    
    /**
     * Sets the updated user id.
     *
     * @param integer $updatedUserId
     *
     * @return void
     */
    public function setUpdatedUserId($updatedUserId)
    {
        $this->updatedUserId = $updatedUserId;
    }
    
    /**
     * Gets the created date.
     *
     * @return \DateTime
     */
    public function getCreatedDate()
    {
        return $this->createdDate;
    }
    
    /**
     * Sets the created date.
     *
     * @param \DateTime $createdDate
     *
     * @return void
     */
    public function setCreatedDate($createdDate)
    {
        $this->createdDate = $createdDate;
    }
    
    /**
     * Gets the updated date.
     *
     * @return \DateTime
     */
    public function getUpdatedDate()
    {
        return $this->updatedDate;
    }
    
    /**
     * Sets the updated date.
     *
     * @param \DateTime $updatedDate
     *
     * @return void
     */
    public function setUpdatedDate($updatedDate)
    {
        $this->updatedDate = $updatedDate;
    }
    
    
    /**
     * Gets the album.
     *
     * @return \MU\MUImageModule\Entity\AlbumEntity
     */
    public function getAlbum()
    {
        return $this->album;
    }
    
    /**
     * Sets the album.
     *
     * @param \MU\MUImageModule\Entity\AlbumEntity $album
     *
     * @return void
     */
    public function setAlbum(\MU\MUImageModule\Entity\AlbumEntity $album = null)
    {
        $this->album = $album;
    }
    
    
    protected $processedLoadCallback = false;
    
    /**
     * Post-Process the data after the entity has been constructed by the entity manager.
     * The event happens after the entity has been loaded from database or after a refresh call.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no access to associations (not initialised yet)
     *
     * @see MU\MUImageModule\Entity\PictureEntity::postLoadCallback()
     * @return boolean true if completed successfully else false
     *
     * @throws RuntimeException Thrown if upload file base path retrieval fails
     */
    protected function performPostLoadCallback()
    {
        // echo 'loaded a record ...';
        if ($this->processedLoadCallback) {
            return true;
        }
    
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $serviceManager = ServiceUtil::getManager();
        $requestStack = $serviceManager->get('request_stack');
        $usesCsvOutput = $requestStack->getCurrentRequest()->getRequestFormat() == 'csv' ? true : false;
        
        // initialise the upload handler
        $uploadManager = $serviceManager->get('mu_muimage_module.upload_handler');
        $controllerHelper = $serviceManager->get('mu_muimage_module.controller_helper');
        
        $this['id'] = (int) ((isset($this['id']) && !empty($this['id'])) ? DataUtil::formatForDisplay($this['id']) : 0);
        $this->formatTextualField('workflowState', $currentFunc, $usesCsvOutput, true);
        $this->formatTextualField('title', $currentFunc, $usesCsvOutput);
        $this->formatTextualField('description', $currentFunc, $usesCsvOutput);
        $this['showTitle'] = (bool) $this['showTitle'];
        $this['showDescription'] = (bool) $this['showDescription'];
        if (!empty($this['imageUpload'])) {
            try {
                $basePath = $controllerHelper->getFileBaseFolder('picture', 'imageUpload');
            } catch (\Exception $e) {
                $serviceManager = ServiceUtil::getManager();
                $session = $serviceManager->get('session');
                $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $e->getMessage());
                return false;
            }
        
            $fullPath = $basePath . $this['imageUpload'];
            $this['imageUploadFullPath'] = $fullPath;
            $this['imageUploadFullPathURL'] = System::getBaseUrl() . $fullPath;
        
            // just some backwards compatibility stuff
            /*if (!isset($this['imageUploadMeta']) || !is_array($this['imageUploadMeta']) || !count($this['imageUploadMeta'])) {
                // assign new meta data
                $this['imageUploadMeta'] = $uploadManager->readMetaDataForFile($this['imageUpload'], $fullPath);
            }*/
        }
        $this['imageView'] = (int) ((isset($this['imageView']) && !empty($this['imageView'])) ? DataUtil::formatForDisplay($this['imageView']) : 0);
        $this['albumImage'] = (bool) $this['albumImage'];
        $this['pos'] = (int) ((isset($this['pos']) && !empty($this['pos'])) ? DataUtil::formatForDisplay($this['pos']) : 0);
    
        $this->prepareItemActions();
    
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_POST_LOAD, $event);
    
        $this->processedLoadCallback = true;
    
        return true;
    }
    
    /**
     * Formats a given textual field depending on it's actual kind of content.
     *
     * @param string  $fieldName     Name of field to be formatted
     * @param string  $currentFunc   Name of current controller action
     * @param string  $usesCsvOutput Whether the output is CSV or not (defaults to false)
     * @param boolean $allowZero     Whether 0 values are allowed or not (defaults to false)
     */
    protected function formatTextualField($fieldName, $currentFunc, $usesCsvOutput = false, $allowZero = false)
    {
        if ($currentFunc == 'edit') {
            // apply no changes when editing the content
            return;
        }
    
        if ($usesCsvOutput == 1) {
            // apply no changes for CSV output
            return;
        }
    
        $string = '';
        if (isset($this[$fieldName])) {
            if (!empty($this[$fieldName]) || ($allowZero && $this[$fieldName] == 0)) {
                $string = $this[$fieldName];
                if ($this->containsHtml($string)) {
                    $string = DataUtil::formatForDisplayHTML($string);
                } else {
                    $string = DataUtil::formatForDisplay($string);
                    $string = nl2br($string);
                }
            }
        }
    
        // workaround for ampersand problem (#692)
        $string = str_replace('&amp;', '&', $string);
    
        $this[$fieldName] = $string;
    }
    
    /**
     * Checks whether any html tags are contained in the given string.
     * See http://stackoverflow.com/questions/10778035/how-to-check-if-string-contents-have-any-html-in-it for implementation details.
     *
     * @param $string string The given input string
     *
     * @return boolean Whether any html tags are found or not
     */
    protected function containsHtml($string)
    {
        return preg_match("/<[^<]+>/", $string, $m) != 0;
    }
    
    /**
     * Pre-Process the data prior to an insert operation.
     * The event happens before the entity managers persist operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - no identifiers available if using an identity generator like sequences
     *     - Doctrine won't recognize changes on relations which are done here
     *       if this method is called by cascade persist
     *     - no creation of other entities allowed
     *
     * @see MU\MUImageModule\Entity\PictureEntity::prePersistCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPrePersistCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_PRE_PERSIST, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after an insert operation.
     * The event happens after the entity has been made persistant.
     * Will be called after the database insert operations.
     * The generated primary key values are available.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *
     * @see MU\MUImageModule\Entity\PictureEntity::postPersistCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPostPersistCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $objectId = $this->createCompositeIdentifier();
        $logger = $serviceManager->get('logger');
        $logArgs = ['app' => 'MUMUImageModule', 'user' => $serviceManager->get('zikula_users_module.current_user')->get('uname'), 'entity' => 'picture', 'id' => $objectId];
        $logger->debug('{app}: User {user} created the {entity} with id {id}.', $logArgs);
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_POST_PERSIST, $event);
    
        return true;
    }
    
    /**
     * Pre-Process the data prior a delete operation.
     * The event happens before the entity managers remove operation is executed for this entity.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MU\MUImageModule\Entity\PictureEntity::preRemoveCallback()
     * @return boolean true if completed successfully else false
     *
     * @throws RuntimeException Thrown if workflow deletion fails
     */
    protected function performPreRemoveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_PRE_REMOVE, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        // delete workflow for this entity
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('mu_muimage_module.workflow_helper');
        $workflowHelper->normaliseWorkflowData($this);
        $workflow = $this['__WORKFLOW__'];
        if ($workflow['id'] > 0) {
            $entityManager = $serviceManager->get('doctrine.entitymanager');
            $result = true;
            try {
                $workflow = $entityManager->find('Zikula\Core\Doctrine\Entity\WorkflowEntity', $workflow['id']);
                $entityManager->remove($workflow);
                $entityManager->flush();
            } catch (\Exception $e) {
                $result = false;
            }
            if ($result === false) {
                $session = $serviceManager->get('session');
                $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error! Could not remove stored workflow. Deletion has been aborted.'));
    
                return false;
            }
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a delete.
     * The event happens after the entity has been deleted.
     * Will be called after the database delete operations.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL DELETE statement
     *
     * @see MU\MUImageModule\Entity\PictureEntity::postRemoveCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPostRemoveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
    
        $objectId = $this->createCompositeIdentifier();
    
        // retrieve the upload handler
        $uploadManager = $serviceManager->get('mu_muimage_module.upload_handler');
    
        $uploadFields = ['imageUpload'];
        foreach ($uploadFields as $uploadField) {
            if (empty($this->$uploadField)) {
                continue;
            }
    
            // remove upload file (and image thumbnails)
            $uploadManager->deleteUploadFile('picture', $this, $uploadField, $objectId);
        }
    
        $logger = $serviceManager->get('logger');
        $logArgs = ['app' => 'MUMUImageModule', 'user' => $serviceManager->get('zikula_users_module.current_user')->get('uname'), 'entity' => 'picture', 'id' => $objectId];
        $logger->debug('{app}: User {user} removed the {entity} with id {id}.', $logArgs);
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_POST_REMOVE, $event);
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to an update operation.
     * The event happens before the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *     - changes on associations are not allowed and won't be recognized by flush
     *     - changes on properties won't be recognized by flush as well
     *     - no creation of other entities allowed
     *
     * @see MU\MUImageModule\Entity\PictureEntity::preUpdateCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPreUpdateCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_PRE_UPDATE, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after an update operation.
     * The event happens after the database update operations for the entity data.
     *
     * Restrictions:
     *     - no access to entity manager or unit of work apis
     *     - will not be called for a DQL UPDATE statement
     *
     * @see MU\MUImageModule\Entity\PictureEntity::postUpdateCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPostUpdateCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $objectId = $this->createCompositeIdentifier();
        $logger = $serviceManager->get('logger');
        $logArgs = ['app' => 'MUMUImageModule', 'user' => $serviceManager->get('zikula_users_module.current_user')->get('uname'), 'entity' => 'picture', 'id' => $objectId];
        $logger->debug('{app}: User {user} updated the {entity} with id {id}.', $logArgs);
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_POST_UPDATE, $event);
    
        return true;
    }
    
    /**
     * Pre-Process the data prior to a save operation.
     * This combines the PrePersist and PreUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MU\MUImageModule\Entity\PictureEntity::preSaveCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPreSaveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_PRE_SAVE, $event);
        if ($event->isPropagationStopped()) {
            return false;
        }
    
        return true;
    }
    
    /**
     * Post-Process the data after a save operation.
     * This combines the PostPersist and PostUpdate events.
     * For more information see corresponding callback handlers.
     *
     * @see MU\MUImageModule\Entity\PictureEntity::postSaveCallback()
     * @return boolean true if completed successfully else false
     */
    protected function performPostSaveCallback()
    {
        $serviceManager = ServiceUtil::getManager();
        $objectId = $this->createCompositeIdentifier();
        $logger = $serviceManager->get('logger');
        $logArgs = ['app' => 'MUMUImageModule', 'user' => $serviceManager->get('zikula_users_module.current_user')->get('uname'), 'entity' => 'picture', 'id' => $objectId];
        $logger->debug('{app}: User {user} saved the {entity} with id {id}.', $logArgs);
    
        $dispatcher = $serviceManager->get('event_dispatcher');
    
        // create the new FilterPictureEvent and dispatch it
        $event = new FilterPictureEvent($this);
        $dispatcher->dispatch(MUImageEvents::PICTURE_POST_SAVE, $event);
    
        return true;
    }
    
    
    /**
     * Returns the formatted title conforming to the display pattern
     * specified for this entity.
     *
     * @return string The display title
     */
    public function getTitleFromDisplayPattern()
    {
        $serviceManager = ServiceUtil::getManager();
        $listHelper = $serviceManager->get('mu_muimage_module.listentries_helper');
    
        $formattedTitle = ''
                . $this->getTitle();
    
        return $formattedTitle;
    }
    
    
    /**
     * Returns a list of possible choices for the workflowState list field.
     * This method is used for validation.
     *
     * @return array List of allowed choices
     */
    public static function getWorkflowStateAllowedValues()
    {
        $serviceManager = ServiceUtil::getManager();
        $helper = $serviceManager->get('mu_muimage_module.listentries_helper');
        $listEntries = $helper->getWorkflowStateEntriesForPicture();
    
        $allowedValues = [];
        foreach ($listEntries as $entry) {
            $allowedValues[] = $entry['value'];
        }
    
        return $allowedValues;
    }
    
    /**
     * Sets/retrieves the workflow details.
     *
     * @param boolean $forceLoading load the workflow record
     *
     * @throws RuntimeException Thrown if retrieving the workflow object fails
     */
    public function initWorkflow($forceLoading = false)
    {
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $isReuse = FormUtil::getPassedValue('astemplate', '', 'GETPOST', FILTER_SANITIZE_STRING);
    
        // apply workflow with most important information
        $idColumn = 'id';
        
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('mu_muimage_module.workflow_helper');
        
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = [
            'module' => 'MUMUImageModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => $idColumn,
            'obj_id' => $this[$idColumn],
            'schemaname' => $schemaName
        ];
        
        // load the real workflow only when required (e. g. when func is edit or delete)
        if ((!in_array($currentFunc, ['index', 'view', 'display']) && empty($isReuse)) || $forceLoading) {
            $result = Zikula_Workflow_Util::getWorkflowForObject($this, $this['_objectType'], $idColumn, 'MUMUImageModule');
            if (!$result) {
                $session = $serviceManager->get('session');
                $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $serviceManager->get('translator.default')->__('Error! Could not load the associated workflow.'));
            }
        }
        
        if (!is_object($this['__WORKFLOW__']) && !isset($this['__WORKFLOW__']['schemaname'])) {
            $workflow = $this['__WORKFLOW__'];
            $workflow['schemaname'] = $schemaName;
            $this['__WORKFLOW__'] = $workflow;
        }
    }
    
    /**
     * Resets workflow data back to initial state.
     * To be used after cloning an entity object.
     */
    public function resetWorkflow()
    {
        $this->setWorkflowState('initial');
    
        $serviceManager = ServiceUtil::getManager();
        $workflowHelper = $serviceManager->get('mu_muimage_module.workflow_helper');
    
        $schemaName = $workflowHelper->getWorkflowName($this['_objectType']);
        $this['__WORKFLOW__'] = [
            'module' => 'MUMUImageModule',
            'state' => $this['workflowState'],
            'obj_table' => $this['_objectType'],
            'obj_idcolumn' => 'id',
            'obj_id' => 0,
            'schemaname' => $schemaName
        ];
    }
    
    /**
     * Start validation and raise exception if invalid data is found.
     *
     * @return boolean Whether everything is valid or not
     */
    public function validate()
    {
        if ($this->_bypassValidation === true) {
            return true;
        }
    
        $serviceManager = ServiceUtil::getManager();
    
        $validator = $serviceManager->get('validator');
        $errors = $validator->validate($this);
    
        if (count($errors) > 0) {
            $session = $serviceManager->get('session');
            foreach ($errors as $error) {
                $session->getFlashBag()->add(\Zikula_Session::MESSAGE_ERROR, $error->getMessage());
            }
            return false;
        }
    
        return true;
    }
    
    /**
     * Return entity data in JSON format.
     *
     * @return string JSON-encoded data
     */
    public function toJson()
    {
        return json_encode($this->toArray());
    }
    
    /**
     * Collect available actions for this entity.
     */
    protected function prepareItemActions()
    {
        if (!empty($this->_actions)) {
            return;
        }
    
        $currentLegacyControllerType = FormUtil::getPassedValue('lct', 'user', 'GETPOST', FILTER_SANITIZE_STRING);
        $currentFunc = FormUtil::getPassedValue('func', 'index', 'GETPOST', FILTER_SANITIZE_STRING);
        $component = 'MUMUImageModule:Picture:';
        $instance = $this->id . '::';
        $serviceManager = ServiceUtil::getManager();
        $permissionHelper = $serviceManager->get('zikula_permissions_module.api.permission');
        $translator = $serviceManager->get('translator.default');
        if ($currentLegacyControllerType == 'admin') {
            if (in_array($currentFunc, ['index', 'view'])) {
                $this->_actions[] = [
                    'url' => ['type' => 'picture', 'func' => 'display', 'arguments' => ['id' => $this['id']]],
                    'icon' => 'search-plus',
                    'linkTitle' => $translator->__('Open preview page'),
                    'linkText' => $translator->__('Preview')
                ];
                $this->_actions[] = [
                    'url' => ['type' => 'picture', 'func' => 'admindisplay', 'arguments' => ['id' => $this['id']]],
                    'icon' => 'eye',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => $translator->__('Details')
                ];
            }
            if (in_array($currentFunc, ['index', 'view', 'display'])) {
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = [
                        'url' => ['type' => 'picture', 'func' => 'adminedit', 'arguments' => ['id' => $this['id']]],
                        'icon' => 'pencil-square-o',
                        'linkTitle' => $translator->__('Edit'),
                        'linkText' => $translator->__('Edit')
                    ];
                    $this->_actions[] = [
                        'url' => ['type' => 'picture', 'func' => 'adminedit', 'arguments' => ['astemplate' => $this['id']]],
                        'icon' => 'files-o',
                        'linkTitle' => $translator->__('Reuse for new item'),
                        'linkText' => $translator->__('Reuse')
                    ];
                }
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = [
                        'url' => ['type' => 'picture', 'func' => 'admindelete', 'arguments' => ['id' => $this['id']]],
                        'icon' => 'trash-o',
                        'linkTitle' => $translator->__('Delete'),
                        'linkText' => $translator->__('Delete')
                    ];
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = [
                    'url' => ['type' => 'picture', 'func' => 'adminview', 'arguments' => []],
                    'icon' => 'reply',
                    'linkTitle' => $translator->__('Back to overview'),
                    'linkText' => $translator->__('Back to overview')
                ];
            }
        }
        if ($currentLegacyControllerType == 'user') {
            if (in_array($currentFunc, ['index', 'view'])) {
                $this->_actions[] = [
                    'url' => ['type' => 'picture', 'func' => 'display', 'arguments' => ['id' => $this['id']]],
                    'icon' => 'eye',
                    'linkTitle' => str_replace('"', '', $this->getTitleFromDisplayPattern()),
                    'linkText' => $translator->__('Details')
                ];
            }
            if (in_array($currentFunc, ['index', 'view', 'display'])) {
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_EDIT)) {
                    $this->_actions[] = [
                        'url' => ['type' => 'picture', 'func' => 'edit', 'arguments' => ['id' => $this['id']]],
                        'icon' => 'pencil-square-o',
                        'linkTitle' => $translator->__('Edit'),
                        'linkText' => $translator->__('Edit')
                    ];
                    $this->_actions[] = [
                        'url' => ['type' => 'picture', 'func' => 'edit', 'arguments' => ['astemplate' => $this['id']]],
                        'icon' => 'files-o',
                        'linkTitle' => $translator->__('Reuse for new item'),
                        'linkText' => $translator->__('Reuse')
                    ];
                }
                if ($permissionHelper->hasPermission($component, $instance, ACCESS_DELETE)) {
                    $this->_actions[] = [
                        'url' => ['type' => 'picture', 'func' => 'delete', 'arguments' => ['id' => $this['id']]],
                        'icon' => 'trash-o',
                        'linkTitle' => $translator->__('Delete'),
                        'linkText' => $translator->__('Delete')
                    ];
                }
            }
            if ($currentFunc == 'display') {
                $this->_actions[] = [
                    'url' => ['type' => 'picture', 'func' => 'view', 'arguments' => []],
                    'icon' => 'reply',
                    'linkTitle' => $translator->__('Back to overview'),
                    'linkText' => $translator->__('Back to overview')
                ];
            }
        }
    }
    
    /**
     * Creates url arguments array for easy creation of display urls.
     *
     * @return array The resulting arguments list
     */
    public function createUrlArgs()
    {
        $args = [];
    
        $args['id'] = $this['id'];
    
        if (property_exists($this, 'slug')) {
            $args['slug'] = $this['slug'];
        }
    
        return $args;
    }
    
    /**
     * Create concatenated identifier string (for composite keys).
     *
     * @return String concatenated identifiers
     */
    public function createCompositeIdentifier()
    {
        $itemId = $this['id'];
    
        return $itemId;
    }
    
    /**
     * Determines whether this entity supports hook subscribers or not.
     *
     * @return boolean
     */
    public function supportsHookSubscribers()
    {
        return true;
    }
    
    /**
     * Return lower case name of multiple items needed for hook areas.
     *
     * @return string
     */
    public function getHookAreaPrefix()
    {
        return 'mumuimagemodule.ui_hooks.pictures';
    }
    
    /**
     * Returns an array of all related objects that need to be persisted after clone.
     * 
     * @param array $objects The objects are added to this array. Default: []
     * 
     * @return array of entity objects
     */
    public function getRelatedObjectsToPersist(&$objects = []) 
    {
        return [];
    }
    
    /**
     * ToString interceptor implementation.
     * This method is useful for debugging purposes.
     *
     * @return string The output string for this entity
     */
    public function __toString()
    {
        return $this->getId();
    }
    
    /**
     * Clone interceptor implementation.
     * This method is for example called by the reuse functionality.
     * Performs a quite simple shallow copy.
     *
     * See also:
     * (1) http://docs.doctrine-project.org/en/latest/cookbook/implementing-wakeup-or-clone.html
     * (2) http://www.php.net/manual/en/language.oop5.cloning.php
     * (3) http://stackoverflow.com/questions/185934/how-do-i-create-a-copy-of-an-object-in-php
     */
    public function __clone()
    {
        // If the entity has an identity, proceed as normal.
        if ($this->id) {
            // unset identifiers
            $this->setId(0);
    
            // reset Workflow
            $this->resetWorkflow();
    
            // reset upload fields
            $this->setImageUpload('');
            $this->setImageUploadMeta([]);
    
            $this->setCreatedDate(null);
            $this->setCreatedUserId(null);
            $this->setUpdatedDate(null);
            $this->setUpdatedUserId(null);
    
            
        }
        // otherwise do nothing, do NOT throw an exception!
    }
}
